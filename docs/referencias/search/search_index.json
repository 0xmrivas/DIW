{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desarrollo web en entorno cliente","text":"<p>Podr\u00edamos decir que el objetivo de este m\u00f3dulo es desarrollar una interfaces de usuario intuitivas y atractivas.</p> <p>Para cumplir con este inicialmente vamos a hacer un repaso de la sintaxis b\u00e1sica de javascript, para a continuaci\u00f3n ir adentr\u00e1ndonos en su uso mas avanzado. </p> <p>Una vez hayamos consolidado las bases fundamentales de dicho lenguaje nos adentraremos en dos de los frameworks/librer\u00edas mas usados en la actualidad en la programaci\u00f3n del lado del cliente, React y Vue.js.</p> <p>Los contenidos se han dividido en las siguientes unidades (pulsando en cada una de ellas acceder\u00e1s a enlaces de referencia sobre los mismos, se completar\u00e1n conforme avance el curso):</p> <ul> <li>Unidad 1: Web Client Architectures and Technologies</li> <li>Unidad 2: JavaScript fundamentals</li> <li>Unidad 3: User-Defined Structures</li> <li>Unidad 4: DOM manipulation and events</li> <li>Unidad 5: React.js</li> <li>Unidad 6: MERN Stack</li> <li>Unidad 7: eCommerce Platform</li> <li>Unidad 8: Vue.js</li> </ul>"},{"location":"#referencias-web-generales","title":"Referencias web generales","text":"<p>El desarrollo de software est\u00e1 en constante evoluci\u00f3n, actualmente podemos observar como una avalancha de nuevas tendencias tecnol\u00f3gicas y metodolog\u00edas se va abriendo paso en \u00e9ste \u00e1mbito. Este es el motivo principal por el que la mayor parte de los apuntes proporcionados no son m\u00e1s que referencias web actuales a los temas que vamos a tratar.</p> <ul> <li>FreeCodeCamp</li> <li>developer.mozilla.org</li> <li>The Modern JavaScript Tutorial</li> <li>lenguajejs.com</li> <li>Javascript Cheatsheet</li> <li>Javascript notes By Majo Ledesma</li> <li>Netlify Sites Deployment</li> <li>React.js Documentation</li> <li>Vue.js Documentation</li> <li>Node.js Documentation</li> <li>Express.js Documentation</li> <li>MongoDB Documentation</li> </ul>"},{"location":"ud1/","title":"UD1 - Web Client Architectures and Technologies","text":""},{"location":"ud1/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta primera unidad did\u00e1ctica, nuestros estudiantes se embarcar\u00e1n en un emocionante viaje hacia los fundamentos del desarrollo web en entornos de cliente. El objetivo principal de esta unidad es proporcionar a los futuros desarrolladores de aplicaciones web una base s\u00f3lida de conocimientos y habilidades que les permitir\u00e1 comprender y crear aplicaciones web modernas y din\u00e1micas.</p> <p>En el coraz\u00f3n de esta unidad se encuentra un proyecto de investigaci\u00f3n integral que abordar\u00e1 aspectos clave del desarrollo web en entornos de cliente. Este proyecto desafiar\u00e1 a nuestros estudiantes a adentrarse en los conceptos fundamentales, las tecnolog\u00edas emergentes y las mejores pr\u00e1cticas que dan forma a la web actual.</p>"},{"location":"ud1/#objetivos-generales","title":"Objetivos Generales","text":"<ul> <li> <p>Investigar y comprender los diferentes modelos de programaci\u00f3n en entornos cliente/servidor y su aplicaci\u00f3n en el desarrollo web.</p> </li> <li> <p>Analizar los mecanismos utilizados para ejecutar c\u00f3digo en un navegador web y su relevancia en el desarrollo web moderno.</p> </li> <li> <p>Evaluar las capacidades y limitaciones de la ejecuci\u00f3n en el navegador, as\u00ed como la compatibilidad con diferentes navegadores web.</p> </li> <li> <p>Comparar las caracter\u00edsticas de los lenguajes de script con la programaci\u00f3n tradicional, destacando sus ventajas y desventajas.</p> </li> <li> <p>Explorar las tecnolog\u00edas y lenguajes asociados al desarrollo web en entornos de cliente y su papel en la creaci\u00f3n de aplicaciones web.</p> </li> <li> <p>Estudiar c\u00f3mo se integra el c\u00f3digo con las etiquetas HTML y su influencia en la experiencia del usuario.</p> </li> <li> <p>Investigar y utilizar diversas herramientas de programaci\u00f3n que facilitan el desarrollo web en entornos de cliente.</p> </li> </ul> <p>Esta unidad did\u00e1ctica proporcionar\u00e1 a nuestros estudiantes la base s\u00f3lida que necesitan para avanzar en su carrera en el desarrollo de aplicaciones web. \u00a1Pues eso, al l\u00edo!</p>"},{"location":"ud2/","title":"UD2 - JavaScript fundamentals","text":"<p>Como referencia de para esta unidad se ha tomado el material de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp. En concreto los siguientes apartados del mismo:</p>"},{"location":"ud2/#tipos-de-datos-uso-de-variables-y-ambitos","title":"Tipos de datos. Uso de variables y \u00e1mbitos","text":"<ul> <li>Declarar variables en JavaScript</li> <li>Almacenamiento de valores con el operador de asignaci\u00f3n</li> <li>Asignaci\u00f3n del valor de una variable a otra</li> <li>Inicializaci\u00f3n de variables con el operador de asignaci\u00f3n</li> <li>Declaraci\u00f3n de variables de tipo string</li> <li>Variables no inicializadas</li> <li>Sensibilidad a las may\u00fasculas y min\u00fasculas en variables</li> <li>Diferencias entre var y let</li> <li>Declarar una constante</li> <li>Interacci\u00f3n: alert, prompt, confirm</li> <li>Tipos de dato</li> <li>Conversiones de tipo</li> <li>M\u00e9todos en tipos primitivos</li> </ul>"},{"location":"ud2/#operadores","title":"Operadores","text":"<ul> <li>Sumar dos n\u00fameros con JavaScript</li> <li>Restar un n\u00famero a otro con JavaScript</li> <li>Multiplicar dos n\u00fameros con JavaScript</li> <li>Dividir un n\u00famero por otro con JavaScript</li> <li>Incrementar un n\u00famero con JavaScript</li> <li>Disminuir un n\u00famero con JavaScript</li> <li>Crear n\u00fameros decimales con JavaScript</li> <li>Multiplicar dos decimales con JavaScript</li> <li>Dividir un decimal entre otro con JavaScript</li> <li>Calcular el resto en JavaScript</li> <li>Asignaci\u00f3n compuesta con suma aumentada</li> <li>Asignaci\u00f3n compuesta con resta aumentada</li> <li>Asignaci\u00f3n compuesta con multiplicaci\u00f3n aumentada</li> <li>Asignaci\u00f3n Compuesta con divisi\u00f3n aumentada</li> <li>Escapar de las comillas literales en las cadenas</li> <li>Citando cadenas con comillas simples</li> <li>Secuencias de escape en cadenas</li> <li>Concatenaci\u00f3n de cadenas con el operador \"+\".</li> <li>Concatenaci\u00f3n de cadenas con el operador Plus Equals</li> <li>Construcci\u00f3n de cadenas con variables</li> <li>C\u00f3mo a\u00f1adir variables a las cadenas</li> <li>Encontrar la longitud de una cadena</li> <li>Uso de la notaci\u00f3n de par\u00e9ntesis para encontrar el primer car\u00e1cter de una cadena</li> <li>Comprender la Inmutabilidad de Cadenas</li> <li>Uso de la notaci\u00f3n de par\u00e9ntesis para econtrar el en\u00e9simo car\u00e1cter en una cadena</li> <li>Usar la notaci\u00f3n de par\u00e9ntesis para encontrar el \u00faltimo car\u00e1cter de una cadena</li> <li>Usar la notaci\u00f3n de par\u00e9ntesis para encontrar el en\u00e9simo car\u00e1cter en una cadena</li> <li>Espacios en blanco</li> </ul>"},{"location":"ud2/#estructuras-de-control","title":"Estructuras de control","text":"<ul> <li>Entender los valores booleanos</li> <li>Uso de la l\u00f3gica condicional con las sentencias If</li> <li>Comparaci\u00f3n con el operador de Igualdad</li> <li>Comparaci\u00f3n con el operador de Igualdad Estricta</li> <li>Practicar la comparaci\u00f3n de diferentes valores</li> <li>Comparaci\u00f3n con el operador de Desigualdad</li> <li>Comparaci\u00f3n con el operador de Desigualdad Estricta</li> <li>Comparaci\u00f3n con el operador Mayor que</li> <li>Comparaci\u00f3n con el operador mayor que o igual a</li> <li>Comparaci\u00f3n con el operador menor que</li> <li>Comparaci\u00f3n con el operador menor que o igual a</li> <li>Comparaciones con el operador l\u00f3gico And</li> <li>Comparaciones con el operador l\u00f3gico Or</li> <li>Introducci\u00f3n a las sentencias Else</li> <li>Introducci\u00f3n a las sentencias Else If</li> <li>Orden L\u00f3gico en las sentencias If Else</li> <li>Encadenamiento de sentencias If Else</li> <li>Golf</li> <li>Selecci\u00f3n de varias opciones con sentencias Switch</li> <li>Adici\u00f3n de una opci\u00f3n por defecto en las dentencias Switch</li> <li>M\u00faltiples opciones id\u00e9nticas en Sentencias Switch</li> <li>Sustituci\u00f3n de cadenas If Else por Switch</li> <li>Devoluci\u00f3n de valores booleanos desde funciones</li> <li>Patr\u00f3n de retorno temprano para funciones</li> <li>Contando cartas</li> </ul>"},{"location":"ud2/#estructuras-de-control-ii","title":"Estructuras de control II","text":"<ul> <li>Iterar con los bucles while de JavaScript</li> <li>Iterar con bucles For de JavaScript</li> <li>Iterar n\u00fameros impares con un bucle For</li> <li>Contar hacia atr\u00e1s con un bucle For</li> <li>Iterar a trav\u00e9s de una matriz con un bucle For</li> <li>Anidaci\u00f3n de Bucles For</li> <li>Iterar con bucles Do...While de JavaScript</li> <li>Reemplazar bucles usando Recursi\u00f3n</li> <li>B\u00fasqueda de Perfiles</li> <li>Generar fracciones aleatorias con JavaScript</li> <li>Generaci\u00f3n de n\u00fameros enteros aleatorios con JavaScript</li> <li>Generar n\u00fameros Enteros Aleatorios dentro de un Rango</li> <li>Uso de la funci\u00f3n parseInt</li> <li>Uso de la funci\u00f3n parseInt con un radix</li> <li>Uso del operador condicional (Ternario)</li> <li>Uso de m\u00faltiples operadores condicionales (Ternarios)</li> <li>Uso de la recurividad para crear una cuenta atr\u00e1s</li> <li>Uso de la recurividad para crear un rango de n\u00fameros</li> </ul>"},{"location":"ud2/#comentarios-y-debugging","title":"Comentarios y debugging","text":"<ul> <li>Comenta tu c\u00f3digo JavaScript</li> <li>Utilizar la consola de JavaScript para comprobar el valor de una variable</li> <li>Comprender las diferencias entre la consola de freeCodeCamp y la del navegador</li> <li>Utilizar typeof para comprobar el tipo de una variable</li> <li>Detecci\u00f3n de nombres de variables y funciones mal escritos</li> <li>Detecci\u00f3n de par\u00e9ntesis, corchetes, llaves y comillas no cerradas</li> <li>Detectar el uso mixto de comillas simples y dobles</li> <li>Detectar el uso del operador de asignaci\u00f3n en lugar del operador de igualdad</li> <li>Detectar la falta de par\u00e9ntesis de apertura y cierre despu\u00e9s de una llamada a una funci\u00f3n</li> <li>Detecci\u00f3n de argumentos pasados en el orden equivocado al llamar a una Funci\u00f3n</li> <li>Detecci\u00f3n de errores de dsplazamiento al utilizar la indexaci\u00f3n</li> <li>Precauci\u00f3n al reinicializar vriables dentro de un Bucle</li> <li>Prevenci\u00f3n de bucles infinitos con una condici\u00f3n terminal v\u00e1lida</li> </ul>"},{"location":"ud2/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda leer las siguientes secciones del material de lenguajejs.com:</p> <ul> <li>Tipos de datos</li> <li>Variables y constantes</li> <li>\u00c1mbitos o contextos</li> <li>Number</li> <li>Strings</li> <li>Operadores I</li> <li>Operadores II</li> <li>Estructuras de control</li> </ul>"},{"location":"ud3/","title":"UD3 - User-Defined Structures","text":"<p>Como referencia de para esta unidad se ha tomado el material de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp. </p>"},{"location":"ud3/#arrays","title":"Arrays","text":"<p>Un array es una colecci\u00f3n o agrupaci\u00f3n de elementos en una variable, cada uno de ellos ubicado por la posici\u00f3n que ocupa en el array. Veamos mas sobre arrays en Javascript:</p> <ul> <li>Almacenar m\u00faltiples valores en una variable utilizando arrays de JavaScript</li> <li>Anidar un array dentro de otro array</li> <li>Acceso a los datos de array mediante los \u00edndices</li> <li>Modificaci\u00f3n de los datos de array mediante los \u00edndices</li> <li>Acceso a arrays multidimensionales con \u00edndices</li> <li>Manipulaci\u00f3n de arrays con push()</li> <li>Manipulaci\u00f3n de arrays con pop()</li> <li>Manipulaci\u00f3n de arrays con shift()</li> <li>Manipulaci\u00f3n de arrays con unshift()</li> <li>Actividad: Lista de la compra</li> </ul>"},{"location":"ud3/#funciones","title":"Funciones","text":"<p>En Javascript, las funciones son uno de los tipos de datos m\u00e1s importantes, ya que estamos continuamente utiliz\u00e1ndolas, comenzemos a trabajar con ellas:</p> <ul> <li>Escribir JavaScript reutilizable con funciones</li> <li>Paso de valores a funciones con argumentos</li> <li>Devoluci\u00f3n de un valor desde una funci\u00f3n con return</li> <li>\u00c1mbito global y funciones</li> <li>\u00c1mbito local y funciones</li> <li>\u00c1mbito global vs. \u00e1mbito local en funciones</li> <li>Entendiendo el valor indefinido devuelto por una funci\u00f3n</li> <li>Asignaci\u00f3n con un valor devuelto</li> <li>Actividad: Permanecer en l\u00ednea</li> </ul>"},{"location":"ud3/#objetos","title":"Objetos","text":"<ul> <li>Construir objetos en JavaScript</li> <li>Acceso a las propiedades de los objetos con la notaci\u00f3n de corchetes</li> <li>Acceso a las propiedades de los objetos con variables</li> <li>Actualizaci\u00f3n de propiedades de objetos</li> <li>A\u00f1adir buevas propiedades a un objeto JavaScript</li> <li>Eliminaci\u00f3n de propiedades de un objeto JavaScript</li> <li>Uso de los objetos para las consultas</li> <li>Prueba de propiedades en objetos</li> <li>Manipulaci\u00f3n de objetos complejos</li> <li>Acceso a objetos anidados</li> <li>Acceso a arrays anidadas</li> <li>Colecci\u00f3n de registros</li> </ul>"},{"location":"ud3/#arrays-vs-objetos","title":"Arrays vs Objetos","text":"<p>Ya conoces algunas estructuras de datos comunes de JavaScript, matrices y objetos. Ahora aprendamos a identificar cuando usar cada una, adem\u00e1s de algunos m\u00e9todos \u00fatiles como splice()y Object.keys() para acceder y manipular datos.</p> <ul> <li>Utilizar un array para almacenar una colecci\u00f3n de datos</li> <li>Acceso al contenido de una array usando la notaci\u00f3n de par\u00e9ntesis</li> <li>A\u00f1adir elementos a un array con push() y unshift()</li> <li>Eliminar elementos de un array con pop() y shift()</li> <li>Eliminaci\u00f3n de elementos con splice()</li> <li>A\u00f1adir elementos con splice()</li> <li>Copiar elementos de un array con slice()</li> <li>Copiar un array con el operador Spread</li> <li>Combinar arrays con el operador Spread</li> <li>Comprobaci\u00f3n de la presencia de un elemento con indexOf()</li> <li>Iterar a trav\u00e9s de todos los elementos de un array utilizando bucles For</li> <li>Creaci\u00f3n de arrays multidimensionales complejos</li> <li>Adici\u00f3n de pares clave-valor a objetos JavaScript</li> <li>Modificaci\u00f3n de un objeto anidado dentro de otro objeto</li> <li>Acceso a nombres de propiedades con notaci\u00f3n de corchete</li> <li>Utilizar la palabra clave delete para eliminar propiedades de objetos</li> <li>Comprobar si un objeto tiene una propiedad</li> <li>Iterar a trav\u00e9s de las claves de un objeto con una sentencia for...in</li> <li>Generaci\u00f3n de un array de todas las claves de un objeto con Object.keys()</li> <li>Modificaci\u00f3n de un array almacenado en un objeto</li> </ul>"},{"location":"ud3/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda leer las siguientes secciones del material de lenguajejs.com: * Arrays * Objetos * POO</p>"},{"location":"ud4/","title":"UD4 - DOM manipulation and events","text":"<p>Como referencia de para esta unidad se ha tomado el material de lenguajejs.com:</p>"},{"location":"ud4/#dom","title":"DOM","text":"<ul> <li>\u00bfQu\u00e9 es el DOM?</li> <li>Seleccionar elementos del DOM</li> <li>Crear elementos en el DOM</li> <li>Gestionar atributos del DOM</li> <li>La API classList de Javascript</li> <li>Contenido en el DOM</li> <li>Insertar elementos en el DOM</li> <li>Navegar por elementos del DOM</li> </ul>"},{"location":"ud4/#eventos","title":"Eventos","text":"<ul> <li>\u00bfQu\u00e9 son los eventos?</li> <li>Eventos mediante HTML</li> <li>Eventos mediante Javascript</li> <li>El m\u00e9todo addEventListener</li> <li>Escuchar eventos y handleEvent</li> <li>Eventos nativos</li> <li>Eventos personalizados</li> <li>Eventos del navegador</li> <li>Emisi\u00f3n de eventos</li> <li>Propagaci\u00f3n de eventos</li> </ul>"},{"location":"ud4/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda leer las siguientes secciones del material de es.javascript.info, as\u00ed como realizar las actividades que se proponen en cada una de ellas:</p> <ul> <li>DOM</li> <li>Introducci\u00f3n a los eventos</li> <li>Eventos en la UI</li> </ul>"},{"location":"ud5.1-Empezando-con-React/","title":"Empezando con React","text":"<p>Vamos, en primer lugar, antes de empezar con nuestros proyectos de clase, a hacer varios cursos que nos van a servir para introducirnos en estas nuevas tecnolog\u00edas. </p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-react","title":"Introducci\u00f3n a React","text":"<p>En primer lugar empezaremos por este curso introductorio de React, en el cual aprenderemos c\u00f3mo crear diferentes tipos de componentes de React.</p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-redux","title":"Introducci\u00f3n a Redux","text":"<p>A medida que las aplicaciones crecen en tama\u00f1o y alcance, la gesti\u00f3n de datos compartidos se vuelve mucho m\u00e1s dif\u00edcil. Redux es un \"contenedor de estados\" que ayuda a que nuestras aplicaciones funcionen de manera predecible y que sean m\u00e1s f\u00e1ciles de probar.</p> <p>Vamos ahora a aprender algo de redux mediante este curso, aprenderemos los fundamentos de Redux para administrar datos en toda su aplicaci\u00f3n.</p>"},{"location":"ud5.1-Empezando-con-React/#react-y-redux","title":"React y Redux","text":"<p>Ahora que sabemos c\u00f3mo administrar el flujo de datos compartidos con Redux, es hora de combinar ese conocimiento con React. En \u00e9ste curso de freecodecamp vamos a crear un componente de React y administraremos el estado localmente a nivel de componente y en toda la aplicaci\u00f3n con Redux.</p>"},{"location":"ud5.10-React-Router/","title":"React Router DOM","text":"<p>El \"Client-Side Routing\" (enrutamiento del lado del cliente) es una t\u00e9cnica utilizada en aplicaciones web modernas, donde el enrutamiento y la carga de diferentes vistas o componentes de la p\u00e1gina se realizan enteramente en el navegador del usuario, sin necesidad de realizar peticiones adicionales al servidor para cada cambio de p\u00e1gina.</p> <p>React Router DOM es una librer\u00eda de React que permite implementar enrutamiento del lado del cliente (client-side routing), esto se logra mediante la manipulaci\u00f3n del historial del navegador y el uso de componentes de React que responden a cambios en la URL.</p> <p>Algunos puntos clave sobre el React Router y el enrutamiento del lado del cliente son:</p> <ul> <li> <p>Mejora de la Experiencia del Usuario: Al evitar recargas completas de la p\u00e1gina, las transiciones entre diferentes vistas son m\u00e1s r\u00e1pidas y fluidas, lo que mejora la experiencia del usuario.</p> </li> <li> <p>Mantenimiento del Estado de la Aplicaci\u00f3n: Dado que la p\u00e1gina no se recarga, el estado de la aplicaci\u00f3n se mantiene. Esto es \u00fatil, por ejemplo, para mantener el estado de los formularios o la posici\u00f3n de desplazamiento en la p\u00e1gina.</p> </li> <li> <p>Rutas Din\u00e1micas: React Router permite definir rutas din\u00e1micamente y cargar componentes en funci\u00f3n de los par\u00e1metros de la URL, lo que facilita la creaci\u00f3n de aplicaciones web complejas.</p> </li> <li> <p>Integraci\u00f3n con React: Al ser una biblioteca dise\u00f1ada espec\u00edficamente para React, React Router se integra perfectamente con el ecosistema de React, incluyendo el uso de hooks y el contexto.</p> </li> <li> <p>Optimizaci\u00f3n de Carga: Con el enrutamiento del lado del cliente, solo se cargan los recursos necesarios para el componente o vista actual, lo que puede mejorar el rendimiento de la aplicaci\u00f3n, especialmente en conexiones lentas o dispositivos con recursos limitados.</p> </li> </ul> <p>Manejo de URLs Amigables: React Router ayuda a manejar URLs amigables, lo cual es bueno para la usabilidad y el SEO (optimizaci\u00f3n en motores de b\u00fasqueda).</p>"},{"location":"ud5.10-React-Router/#transiciones-en-una-spa-single-page-application","title":"Transiciones en una SPA (Single Page Application)","text":"<p>Veamos c\u00f3mo afecta se manejan las transiciones de p\u00e1gina y las solicitudes de datos en una aplicaci\u00f3n SPA usando React y React Router.</p> <ul> <li> <p>Carga Inicial de la Aplicaci\u00f3n: La primera vez que un usuario accede a tu aplicaci\u00f3n, se realiza una llamada al servidor para cargar los archivos necesarios de React (HTML, JavaScript, CSS, etc.). Esta es la \u00fanica carga completa de la p\u00e1gina que ocurre en el modelo de enrutamiento del lado del cliente.</p> </li> <li> <p>Navegaci\u00f3n entre Rutas: Una vez que la aplicaci\u00f3n est\u00e1 cargada, la navegaci\u00f3n entre diferentes rutas (p\u00e1ginas o vistas) manejadas por React Router no implica llamadas adicionales al servidor para cargar la p\u00e1gina. Las transiciones se manejan internamente por React, actualizando solo los componentes necesarios en el DOM (Document Object Model).</p> </li> <li> <p>Llamadas API / Datos Din\u00e1micos: Si tus componentes React necesitan obtener datos del servidor (como datos de usuario, listas de productos, etc.), realizar\u00e1n llamadas API al backend cada vez que sea necesario. Estas llamadas suelen ser solicitudes HTTP (como GET, POST, etc.) y se hacen independientemente del enrutamiento del lado del cliente.</p> </li> <li> <p>Carga Perezosa (Lazy Loading): Si implementas la carga perezosa de componentes (usando React.lazy y Suspense, por ejemplo), React Router cargar\u00e1 din\u00e1micamente solo los componentes necesarios para la ruta actual. Esto podr\u00eda implicar solicitudes adicionales para cargar los archivos JavaScript correspondientes a esos componentes, pero solo cuando se accede a la ruta por primera vez.</p> </li> </ul> <p>Servicios Web o Recursos Externos: Cualquier llamada a servicios web, bases de datos, o recursos externos (como im\u00e1genes o archivos) desde tus componentes React implicar\u00e1 llamadas al servidor o a los servicios pertinentes.</p>"},{"location":"ud5.10-React-Router/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>Para esta ejemplo vamos a usar una estructura de archivos y carpetas similar a la de un proyecto real.</p> <p>Crearemos dentro del src, las siguientes carpetas: </p> <ul> <li>components. Tal y como hemos hecho hasta ahora, tendremos una carpeta para almacenar nuestros componentes personalizados.</li> <li>layouts. La usaremos para almacenar los layouts de nuestro proyecto, puede ser uno o mas de uno.</li> <li>router. Guardaremos en esta carpeta los archivoas necesarios para el enrutamiento de la aplicaci\u00f3n.</li> <li>pages. Finalmente, en pages tendremos las diferents p\u00e1ginas de nuestra aplicaci\u00f3n.</li> </ul> <p>Por ejemplo:</p> <p> </p>"},{"location":"ud5.10-React-Router/#instalacion-de-react-router-dom","title":"Instalaci\u00f3n de react-router-dom","text":"<p>La versi\u00f3n que vamos a usar es React Router v.6.4+, dicha versi\u00f3n introdujo nuevos enrutadores complatibles las nuevas API de datos:</p> <ul> <li> <p>createBrowserRouter</p> </li> <li> <p>createMemoryRouter</p> </li> <li> <p>createHashRouter</p> </li> </ul> <p>Para instalar la \u00faltima versi\u00f3n:</p> <pre><code>npm install react-router-dom\n</code></pre> <p>Para instalar una versi\u00f3n espec\u00edfica:</p> <pre><code>npm install react-router-dom@6.4\n</code></pre>"},{"location":"ud5.10-React-Router/#crear-enrutador","title":"Crear enrutador","text":"<p>Para habilitar el enrutamiento del lado del cliente tenemos que crear un router de navegador y configurar nuestras rutas. </p> <p>El router que vamos a usar es uno de los que se han incorporado en la nueva versi\u00f3n, createBrowserRouter. Este es el enrutador recomendado para todos los proyectos web de React Router, utiliza DOM history API para actualizar la URL y administrar la pila de historial.</p> <p>Tambi\u00e9n habilita la data API v6.4 como loaders, actions, fetchers y m\u00e1s. </p> <p>router/index.jsx</p> <pre><code>import { createBrowserRouter } from \"react-router-dom\";\nimport Home from \"../pages/Home\";\nimport About from \"../pages/About\";\nimport Blog from \"../pages/Blog\";\n\nexport const router = createBrowserRouter([\n    {\n        path: \"/\",\n        element: &lt;Home /&gt;,\n    },\n    {\n        path: \"/about\",\n        element: &lt;About /&gt;,\n    },\n    {\n        path: \"/blog\",\n        element: &lt;Blog /&gt;,\n    },\n]);\n</code></pre> <p>Incorporamos el RouterProvider al archivo main.jsx:</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\n\nimport { router } from \"./router\";\nimport { RouterProvider } from \"react-router-dom\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n    &lt;React.StrictMode&gt;\n        &lt;RouterProvider router={router} /&gt;\n    &lt;/React.StrictMode&gt;\n);\n</code></pre> <p>Ya tendr\u00edamos nuestra aplicaci\u00f3n enrutada. El problema es que si accedemos a una ruta que no existe nos da un error no controlado, es decir no tenemos la t\u00edpica p\u00e1gina de 404. Esto ocurre porque ya no estamos usando al enrutaci\u00f3n tradicional, sino una nuestra del lado de cliente. Por tanto, tenemos que controlar los errores en las rutas:</p>"},{"location":"ud5.10-React-Router/#useroutererror","title":"useRouterError","text":"<p>Para poder controlar los errores en las rutas tenemos el hook useRouterError, vamos a crearnos un componente nuevo que sea NotFound.</p> <p>NotFound.jsx</p> <pre><code>import { useRouteError } from \"react-router-dom\";\n\nconst NotFound = () =&gt; {\n    const error = useRouteError();\n    console.log(error);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;404&lt;/h1&gt;\n            &lt;p&gt;Page not found&lt;/p&gt;\n            &lt;p&gt;{error.statusText || error.message}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\nexport default NotFound;\n</code></pre> <p>router/index.jsx</p> <pre><code>export const router = createBrowserRouter([\n    {\n        path: \"/\",\n        element: &lt;Home /&gt;,\n        errorElement: &lt;NotFound /&gt;,\n    },\n    {\n        path: \"/about\",\n        element: &lt;About /&gt;,\n        errorElement: &lt;NotFound /&gt;,\n    },\n    {\n        path: \"/blog\",\n        element: &lt;Blog /&gt;,\n        errorElement: &lt;NotFound /&gt;,\n    },\n]);\n</code></pre>"},{"location":"ud5.10-React-Router/#rutas-anidadas","title":"Rutas anidadas","text":"<p>layout/LayoutPublic.jsx</p> <pre><code>import { Outlet } from \"react-router-dom\";\n\nconst LayoutPublic = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;nav&gt;Navbar&lt;/nav&gt;\n            &lt;Outlet /&gt;\n            &lt;footer&gt;Footer&lt;/footer&gt;\n        &lt;/div&gt;\n    );\n};\nexport default LayoutPublic;\n</code></pre> <p>router/index.jsx</p> <pre><code>export const router = createBrowserRouter([\n    {\n        path: \"/\",\n        element: &lt;LayoutPublic /&gt;,\n        errorElement: &lt;NotFound /&gt;,\n        children: [\n            {\n                index: true,\n                element: &lt;Home /&gt;,\n            },\n            {\n                path: \"/about\",\n                element: &lt;About /&gt;,\n            },\n            {\n                path: \"/blog\",\n                element: &lt;Blog /&gt;,\n            },\n        ],\n    },\n]);\n</code></pre>"},{"location":"ud5.10-React-Router/#navbar","title":"Navbar","text":"<p>components/Navbar.jsx</p> <pre><code>import { Link } from \"react-router-dom\";\nconst Navbar = () =&gt; {\n    return (\n        &lt;nav className=\"navbar navbar-dark bg-dark\"&gt;\n            &lt;div className=\"container\"&gt;\n                &lt;Link to=\"/\" className=\"btn btn-outline-primary\"&gt;\n                    Home\n                &lt;/Link&gt;\n                &lt;Link to=\"/about\" className=\"btn btn-outline-primary\"&gt;\n                    About\n                &lt;/Link&gt;\n                &lt;Link to=\"/blog\" className=\"btn btn-outline-primary\"&gt;\n                    Blog\n                &lt;/Link&gt;\n            &lt;/div&gt;\n        &lt;/nav&gt;\n    );\n};\n\nexport default Navbar;\n</code></pre> <p>layout/LayoutPublic.jsx</p> <pre><code>import { Outlet } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\n\nconst LayoutPublic = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;Navbar /&gt;\n            &lt;div className=\"container\"&gt;\n                &lt;Outlet /&gt;\n            &lt;/div&gt;\n            &lt;footer className=\"container\"&gt;Footer&lt;/footer&gt;\n        &lt;/div&gt;\n    );\n};\nexport default LayoutPublic;\n</code></pre>"},{"location":"ud5.10-React-Router/#navlink","title":"NavLink","text":"<p>NavLink es un componente especializado para crear enlaces de navegaci\u00f3n. Este componente se utiliza para crear enlaces de navegaci\u00f3n que se activan cuando la ruta coincide con la URL actual.</p> <p>De forma predeterminada se utiliza la clase CSS active para marcar el enlace como activo.</p> <p>components/Navbar.jsx</p> <pre><code>&lt;NavLink to=\"/\" className=\"btn btn-outline-primary\"&gt;\n    Home\n&lt;/NavLink&gt;\n&lt;NavLink to=\"/about\" className=\"btn btn-outline-primary\"&gt;\n    About\n&lt;/NavLink&gt;\n&lt;NavLink to=\"/blog\" className=\"btn btn-outline-primary\"&gt;\n    Blog\n&lt;/NavLink&gt;\n</code></pre> <p>isActive</p> <pre><code>&lt;NavLink\n    to=\"tasks\"\n    className={({ isActive }) =&gt; (isActive ? activeClassName : undefined)}\n&gt;\n    Tasks\n&lt;/NavLink&gt;\n</code></pre>"},{"location":"ud5.10-React-Router/#loader-y-useloaderdata","title":"Loader y useLoaderData","text":"<p>El loader en React Router desempe\u00f1a un papel importante en la carga y manejo de datos antes de que se renderice una ruta. </p> <ul> <li> <p>Carga de Datos Previa al Renderizado: El loader se ejecuta antes de que el componente de la ruta se muestre, cargando los datos necesarios para ese componente. Esto asegura que todos los datos est\u00e9n disponibles antes de que el usuario vea la p\u00e1gina.</p> </li> <li> <p>Separaci\u00f3n de Responsabilidades: Mantiene el c\u00f3digo de carga de datos separado del componente de la interfaz de usuario, lo que facilita la organizaci\u00f3n y el mantenimiento del c\u00f3digo.</p> </li> <li> <p>Manejo Eficiente del Estado de Carga: Permite manejar de manera eficiente el estado de carga de los datos, mostrando indicadores de carga mientras los datos est\u00e1n siendo obtenidos, y luego renderizando el componente con los datos ya cargados.</p> </li> <li> <p>Mejora del Rendimiento y la Experiencia del Usuario: Al cargar los datos necesarios antes del renderizado del componente, se reduce el tiempo visible de carga y se evitan parpadeos en la interfaz, mejorando as\u00ed la experiencia del usuario.</p> </li> </ul> <p>Vamos a ver c\u00f3mo usar las API loader y useLoaderData para cargar y mostrar datos en nuestras rutas.</p> <p>Blog.jsx</p> <pre><code>const Blog = () =&gt; {\n    return \"Blog\";\n};\nexport default Blog;\n\nexport const loaderBlogs = async () =&gt; {\n    const data = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const blogs = await data.json();\n    return { blogs };\n};\n</code></pre> <p>Este loaderBlogs es un ejemplo de un loader:</p> <ul> <li> <p>Qu\u00e9 Hace: Carga la lista de blogs desde una API antes de que el componente Blog se muestre.</p> </li> <li> <p>C\u00f3mo se Usa: Este loader se asocia con una ruta espec\u00edfica. Cuando la ruta /blog es accedida, React Router ejecuta loaderBlogs antes de renderizar el componente Blog.</p> </li> <li> <p>Ventajas: Gracias a este loader, el componente Blog tiene inmediatamente disponible los datos de los blogs al momento de su renderizado, evitando as\u00ed el tener que manejar el estado de carga dentro del propio componente.</p> </li> </ul> <p>router/index.jsx</p> <pre><code>import Blog, { loaderBlogs } from \"../pages/Blog\";\n\n{\n    path: \"/blog\",\n    element: &lt;Blog /&gt;,\n    loader: loaderBlogs\n},\n</code></pre> <p>Utilizamos 'useLoaderData' para acceder a los datos cargados por 'loaderBlogs':</p> <p>Blog.jsx</p> <pre><code>// Este componente muestra una lista de blogs.\n\nimport { Link, useLoaderData } from \"react-router-dom\";\n\nconst Blog = () =&gt; {\n    const { blogs } = useLoaderData(); // Accede a los datos cargados\n    return (\n        &lt;ul&gt;\n            {blogs.length &gt; 0 ? (\n                blogs.map((blog) =&gt; (\n                    &lt;li key={blog.id}&gt;\n                        &lt;Link to={`/blog/${blog.id}`}&gt;{blog.title}&lt;/Link&gt;\n                    &lt;/li&gt;\n                ))\n            ) : (\n                &lt;li&gt;No blogs found&lt;/li&gt;\n            )}\n        &lt;/ul&gt;\n    );\n};\nexport default Blog;\n\n// Funci\u00f3n loader: Carga datos desde una API externa\nexport const loaderBlogs = async () =&gt; {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const blogs = await response.json(); // Convierte la respuesta en JSON\n    return { blogs };\n};\n</code></pre>"},{"location":"ud5.10-React-Router/#rutas-con-parametros","title":"Rutas con par\u00e1metros","text":"<p>Veamos c\u00f3mo manejar rutas con par\u00e1metros, por ejemplo, para mostrar un post espec\u00edfico.</p> <pre><code>{\n    path: \"/blog/:id\",\n    element: &lt;Post /&gt;,\n},\n</code></pre> <p>Post.jsx</p> <pre><code>// Este componente muestra los detalles de un post espec\u00edfico.\n\nconst Post = () =&gt; {\n    return \"Post\";\n};\nexport default Post;\n\n// Carga los datos de un post espec\u00edfico basado en el ID de la ruta\nexport const loaderPost = async ({ params }) =&gt; {\n    const data = await fetch(\n        `https://jsonplaceholder.typicode.com/posts/${params.id}`\n    );\n    const post = await data.json();\n    return { post };\n};\n</code></pre> <pre><code>{\n    path: \"/blog/:id\",\n    element: &lt;Post /&gt;,\n    loader: loaderPost,\n},\n</code></pre> <p>Post.jsx</p> <pre><code>\nimport { useLoaderData } from \"react-router-dom\";\n\nconst Post = () =&gt; {\n    const { post } = useLoaderData(); // Accede a los datos del post espec\u00edfico\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{post.title}&lt;/h1&gt;\n            &lt;p&gt;{post.body}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\nexport default Post;\n\nexport const loaderPost = async ({ params }) =&gt; {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`);\n    const post = await response.json();\n    return { post };\n};\n</code></pre>"},{"location":"ud5.10-React-Router/#usenavigation","title":"useNavigation","text":"<p>El hook useNavigation nos proporciona herramientas para manejar y responder a cambios en la navegaci\u00f3n dentro de tu aplicaci\u00f3n.</p> <ul> <li> <p>Acceso al Estado de Navegaci\u00f3n: Permite a los componentes acceder al estado actual de la navegaci\u00f3n. Esto incluye si la navegaci\u00f3n est\u00e1 \"idle\" (inactiva), \"loading\" (cargando), o \"submitting\" (enviando datos).</p> </li> <li> <p>Control de Indicadores de Carga: Con useNavigation, puedes mostrar indicadores de carga o cualquier otra interfaz de usuario relevante durante las transiciones de navegaci\u00f3n. Por ejemplo, puedes mostrar un mensaje de \"Cargando...\" o una animaci\u00f3n de carga cuando el usuario navega de una p\u00e1gina a otra, mejorando as\u00ed la experiencia de usuario.</p> </li> <li> <p>Respuesta a Cambios en la Navegaci\u00f3n: Permite a los componentes reaccionar a los cambios en el estado de navegaci\u00f3n. Esto es \u00fatil, por ejemplo, para deshabilitar botones o cambiar la interfaz de usuario mientras se est\u00e1 cargando una nueva p\u00e1gina o se est\u00e1n enviando datos a un servidor.</p> </li> <li> <p>Mejorar la Experiencia del Usuario: Al informar al usuario sobre el estado de navegaci\u00f3n (por ejemplo, que una p\u00e1gina est\u00e1 cargando), se mejora la transparencia y se reduce la confusi\u00f3n o la frustraci\u00f3n del usuario.</p> </li> </ul> <p>LayoutPublic.jsx</p> <pre><code>// Este componente act\u00faa como un layout para p\u00e1ginas p\u00fablicas.\n// Utiliza 'useNavigation' para mostrar indicadores de carga durante la navegaci\u00f3n.\n\nimport { Outlet, useNavigation } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\n\nconst LayoutPublic = () =&gt; {\n    const navigation = useNavigation(); // Accede al estado de navegaci\u00f3n\n\n    return (\n        &lt;div&gt;\n            &lt;Navbar /&gt;\n            &lt;main className=\"container\"&gt;\n                {navigation.state === \"loading\" &amp;&amp; (\n                    &lt;div className=\"alert alert-info my-5\"&gt;Loading...&lt;/div&gt; // Indicador de carga\n                )}\n                &lt;Outlet /&gt; // Renderiza el componente de la ruta actual\n            &lt;/main&gt;\n            &lt;footer className=\"container\"&gt;Footer&lt;/footer&gt;\n        &lt;/div&gt;\n    );\n};\nexport default LayoutPublic;\n\n</code></pre> <p>En este c\u00f3digo, useNavigation se utiliza para mostrar un mensaje de \"Loading...\" cada vez que se est\u00e1 cargando una nueva ruta. Esto informa al usuario que la navegaci\u00f3n est\u00e1 en proceso y mejora la experiencia de espera.</p>"},{"location":"ud5.10-React-Router/#error-data","title":"Error data","text":"<p>Vamos a manejar los errores en las solicitudes, para darle mas robuztez a la aplicaci\u00f3n.</p> <p>Post.jsx</p> <pre><code>// Mejora el manejo de errores en la carga de datos del post\n\nexport const loaderPost = async ({ params }) =&gt; {\n    const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`);\n\n    if (!response.ok) {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n    }\n\n    const post = await response.json();\n    return { post };\n};\n\n</code></pre> <p>Podr\u00edamos, si queremos, usar el dise\u00f1o del layout en error.</p> <pre><code>export const router = createBrowserRouter([\n    {\n        path: \"/\",\n        element: &lt;LayoutPublic /&gt;,\n        errorElement: &lt;NotFound /&gt;,\n        children: [\n            {\n                errorElement: &lt;NotFound /&gt;,\n                children: [\n                    {\n                        index: true,\n                        element: &lt;Home /&gt;,\n                    },\n                    {\n                        path: \"/about\",\n                        element: &lt;About /&gt;,\n                    },\n                    {\n                        path: \"/blog\",\n                        element: &lt;Blog /&gt;,\n                        loader: loaderBlogs,\n                    },\n                    {\n                        path: \"/blog/:id\",\n                        element: &lt;Post /&gt;,\n                        loader: loaderPost,\n                    },\n                ],\n            },\n        ],\n    },\n]);\n\n</code></pre>"},{"location":"ud5.10-React-Router/#what-are-good-alternatives-to-data-fetching-in-effects","title":"What are good alternatives to data fetching in Effects?","text":"<p>Escribir llamadas fetch dentro de los efectos (Effects) es un m\u00e9todo com\u00fan para obtener datos en aplicaciones completamente basadas en el cliente. Sin embargo, este enfoque manual tiene varias desventajas:</p> <ul> <li> <p>No Funcionan en el Servidor: Los efectos no se ejecutan en el servidor. Esto significa que el HTML renderizado inicialmente en el servidor solo incluir\u00e1 un estado de carga sin datos. El cliente tendr\u00e1 que descargar todo el JavaScript y renderizar la aplicaci\u00f3n solo para descubrir que ahora necesita cargar los datos. Esto no es eficiente.</p> </li> <li> <p>Waterfalls de Red: Hacer fetch directamente en los efectos puede crear \"waterfalls\" (cascadas) de red. Renderizas el componente padre, este obtiene algunos datos, luego renderiza los componentes hijos, y ellos comienzan a obtener sus datos. Si la red es lenta, esto es mucho m\u00e1s lento que obtener todos los datos en paralelo.</p> </li> <li> <p>Falta de Precarga y Cach\u00e9: Obtener datos directamente en los efectos generalmente significa que no se pre-cargan o almacenan en cach\u00e9 los datos. Por ejemplo, si el componente se desmonta y luego se monta de nuevo, tendr\u00eda que obtener los datos nuevamente.</p> </li> <li> <p>No es Ergon\u00f3mico: Hay bastante c\u00f3digo repetitivo involucrado en escribir llamadas fetch de manera que no sufran de problemas como condiciones de carrera.</p> </li> </ul> <p>Estas desventajas no son espec\u00edficas de React, sino que se aplican a la obtenci\u00f3n de datos al montar con cualquier biblioteca. La obtenci\u00f3n de datos no es trivial de hacer bien, por lo que se recomiendan los siguientes enfoques:</p> <ul> <li> <p>Usar Mecanismos Integrados de Frameworks: Si usas un framework, utiliza su mecanismo integrado de obtenci\u00f3n de datos. Los frameworks modernos de React tienen mecanismos de obtenci\u00f3n de datos integrados que son eficientes y no sufren de estas desventajas.</p> </li> <li> <p>Otra opci\u00f3n es usar o construir un cach\u00e9 del lado del cliente, para ello podmeos usar soluciones, como React Query, useSWR y React Router 6.4+. </p> </li> </ul> <p>Fuente: What are good alternatives to data fetching in Effects?</p>"},{"location":"ud5.10-React-Router/#recursos","title":"Recursos","text":"<ul> <li>{JSON} Placeholder (Free fake API for testing and prototyping)</li> <li>React Router</li> <li>Bootstrap</li> </ul>"},{"location":"ud5.10.2-React.lazy/","title":"Lazy Load","text":"<p>El \"Lazy Load\" (carga perezosa) no es exclusivo del enrutador de React (React Router), sino que es un concepto m\u00e1s amplio y una pr\u00e1ctica com\u00fan en el desarrollo web, aplicable a varias tecnolog\u00edas y frameworks.</p> <ul> <li> <p>En el Contexto de React: En React, el Lazy Load se implementa com\u00fanmente utilizando React.lazy() y Suspense. Estas caracter\u00edsticas permiten dividir el c\u00f3digo de la aplicaci\u00f3n en chunks (fragmentos) que se cargan solo cuando son necesarios. Esto no est\u00e1 directamente ligado a React Router, aunque a menudo se usa en conjunto con \u00e9l para optimizar la carga de componentes asociados a diferentes rutas.</p> </li> <li> <p>En Otras Tecnolog\u00edas y Frameworks: El concepto de Lazy Load tambi\u00e9n se aplica en otros frameworks y bibliotecas, tanto en el desarrollo frontend como backend. Por ejemplo, en Angular, Vue.js, y otros frameworks de JavaScript, existen t\u00e9cnicas similares para cargar componentes o m\u00f3dulos de forma perezosa.</p> </li> <li> <p>Uso General en Desarrollo Web: M\u00e1s all\u00e1 de los frameworks de JavaScript, Lazy Load se usa en varias formas en el desarrollo web, como en la carga perezosa de im\u00e1genes y otros recursos. Esto significa que los recursos solo se cargan cuando son visibles o necesarios en la p\u00e1gina, lo cual es una pr\u00e1ctica com\u00fan para mejorar el rendimiento y la eficiencia.</p> </li> </ul> <p>Aunque el Lazy Load se utiliza frecuentemente en combinaci\u00f3n con React Router en aplicaciones React para optimizar la carga de componentes de ruta, es un concepto y una pr\u00e1ctica general en el desarrollo web que va m\u00e1s all\u00e1 de cualquier herramienta o framework espec\u00edfico.</p> <p>Veamos el problema que vienen a \"solucionar\" en las SPA:</p> <p> </p> <p>Este usuario todav\u00eda tiene que descargar los cargadores y componentes para las rutas project y projects, \u00a1aunque no los necesite! Y en el peor de los casos, el usuario nunca los necesitar\u00e1 si no navega por esas rutas. Esto no puede ser ideal para nuestra UX.</p>"},{"location":"ud5.10.2-React.lazy/#lazy-load-en-react","title":"Lazy Load en React","text":"<p>En React, la carga perezosa (Lazy Loading) no se realiza por defecto; requiere una configuraci\u00f3n expl\u00edcita. Para implementarlo, en una aplicaci\u00f3n React, utilizaremos React.lazy() junto con React.Suspense(), que son caracter\u00edsticas proporcionadas por React para este prop\u00f3sito.</p> <p>Veamos un ejemplo b\u00e1sico de c\u00f3mo implementar Lazy Load en React:</p> <p>Importamos React.lazy y Suspense:</p> <pre><code>import React, { Suspense, lazy } from 'react';\n</code></pre> <p>Utilizamos React.lazy() para cargar un componente de forma perezosa:</p> <pre><code>const LazyComponent = lazy(() =&gt; import('./LazyComponent'));\n</code></pre> <p>En este ejemplo, LazyComponent es un componente que se cargar\u00e1 solo cuando sea necesario (por ejemplo, cuando se acceda a la ruta correspondiente).</p> <p>Envolvemos el componente perezoso con Suspense:</p> <pre><code>function App() {\n  return (\n    &lt;Suspense fallback={&lt;div&gt;Cargando...&lt;/div&gt;}&gt;\n      &lt;LazyComponent /&gt;\n    &lt;/Suspense&gt;\n  );\n}\n</code></pre> <p>El prop fallback de Suspense es lo que se muestra mientras el componente est\u00e1 cargando (por ejemplo, un mensaje de carga o un spinner).</p> <p>Integraci\u00f3n con React Router: Si est\u00e1s utilizando React Router, puedes integrar Lazy Load con las rutas:</p> <pre><code>import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    &lt;Router&gt;\n      &lt;Suspense fallback={&lt;div&gt;Cargando...&lt;/div&gt;}&gt;\n        &lt;Switch&gt;\n          &lt;Route path=\"/lazy-component\" element={LazyComponent} /&gt;\n          {/* otras rutas */}\n        &lt;/Switch&gt;\n      &lt;/Suspense&gt;\n    &lt;/Router&gt;\n  );\n}\n</code></pre>"},{"location":"ud5.10.2-React.lazy/#lazy-load-router-69","title":"Lazy load Router 6.9","text":"<p>A partir de React Router v6.9.0, se a\u00f1adi\u00f3 una nueva funcionalidad llamada Route.lazy, que ofrece una forma m\u00e1s integrada y eficiente de manejar la carga perezosa directamente dentro de las definiciones de las rutas.</p> <p>La diferencia clave es que mientras React.lazy() se enfoca en cargar componentes de manera perezosa dentro del ciclo de renderizado, Route.lazy en React Router v6.9.0 permite introducir la carga perezosa fuera del ciclo de renderizado. Esto es particularmente \u00fatil para optimizar tanto la carga de componentes como la obtenci\u00f3n de datos de manera m\u00e1s efectiva, reduciendo el tama\u00f1o del paquete inicial cr\u00edtico y mejorando el rendimiento durante las navegaciones subsiguientes.</p> <p>A continuaci\u00f3n, vemos un ejemplo de c\u00f3mo podemos implementarlo en nuesrta aplicaci\u00f3n React:</p> <ul> <li>Definimos las Rutas con Route.lazy: Primero, definiremos las rutas utilizando el nuevo m\u00e9todo lazy() para cargar los componentes de manera perezosa. Esto significa que los componentes solo se cargar\u00e1n cuando sean necesarios, es decir, cuando el usuario navegue a la ruta correspondiente.</li> </ul> <pre><code>import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n// Aqu\u00ed estamos utilizando la nueva funci\u00f3n `lazy` de React Router\nconst Home = Route.lazy(() =&gt; import('./Home'));\nconst About = Route.lazy(() =&gt; import('./About'));\nconst Contact = Route.lazy(() =&gt; import('./Contact'));\n\nfunction App() {\n  return (\n    &lt;Router&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n        &lt;Route path=\"/contact\" element={&lt;Contact /&gt;} /&gt;\n        {/* otras rutas */}\n      &lt;/Routes&gt;\n    &lt;/Router&gt;\n  );\n}\n</code></pre> <p>En este ejemplo, Home, About y Contact son componentes que se cargan de manera perezosa.</p> <ul> <li>Uso de Suspense: Aunque Route.lazy maneja la carga perezosa, a\u00fan necesitar\u00e1s usar Suspense de React para definir un componente de fallback que se mostrar\u00e1 mientras se carga el componente perezoso.</li> </ul> <pre><code>import React, { Suspense } from 'react';\n// ... (importaciones y definiciones de rutas como antes)\n\nfunction App() {\n  return (\n    &lt;Router&gt;\n      &lt;Suspense fallback={&lt;div&gt;Cargando...&lt;/div&gt;}&gt;\n        &lt;Routes&gt;\n          {/* tus rutas definidas aqu\u00ed */}\n        &lt;/Routes&gt;\n      &lt;/Suspense&gt;\n    &lt;/Router&gt;\n  );\n}\n</code></pre> <p>Este enfoque reduce el tama\u00f1o del paquete inicial necesario para cargar la aplicaci\u00f3n, ya que los componentes para rutas espec\u00edficas solo se cargar\u00e1n cuando se acceda a ellas. Es una manera efectiva de mejorar el rendimiento de las aplicaciones SPA (Single Page Application) al minimizar el tiempo de carga inicial y los recursos necesarios.</p> <p>Para m\u00e1s detalles y ejemplos, revisar la documentaci\u00f3n oficial de React Router.</p>"},{"location":"ud5.11-Context-API/","title":"Context API","text":"<p>En esta secci\u00f3n aprenderemos a trabajar con Context API. Seg\u00fan React, Context API \u201cproporciona una forma de pasar datos mediante el \u00e1rbol de componentes sin pasar props manualmente a todos los niveles\u201d.</p>"},{"location":"ud5.11-Context-API/#por-que-utilizar-context-api","title":"\u00bfPor qu\u00e9 utilizar Context API?","text":"<p>En React normalmente se pasan los datos de padre a componente hijo, mediante propiedades (props). El problema es que esto, a veces, se vuelve insostenible cuando la aplicaci\u00f3n crece. </p> <p>Context se dise\u00f1\u00f3 con el objetivo de compartir datos considerados \u201cglobales\u201d para un \u00e1rbol de componentes de React. Algunos ejemplos en los que podr\u00eda ser interesante su uso, por ejemplo, cuando tengamos en el \u00e1rbol de componentes datos del usuario autenticado, la plantilla seleccionada, o el idioma preferido.</p> <p> </p>"},{"location":"ud5.11-Context-API/#casos-de-uso-comunes-para-context","title":"Casos de Uso Comunes para Context","text":"<p>Algunos casos de uso en el que podemos aplicar la API de contexto:</p> <ul> <li>Manejo de Temas: Utilizar Context para manejar temas claros y oscuros en toda la aplicaci\u00f3n.</li> <li>Autenticaci\u00f3n de Usuario: Almacenar informaci\u00f3n del usuario autenticado y controlar el acceso a distintas partes de la aplicaci\u00f3n.</li> <li>Configuraci\u00f3n de Idioma y Localizaci\u00f3n: Gestionar las preferencias de idioma y localizaci\u00f3n del usuario.</li> </ul>"},{"location":"ud5.11-Context-API/#rendimiento-y-optimizacion-con-context","title":"Rendimiento y Optimizaci\u00f3n con Context","text":"<ul> <li>Rendimiento: Context puede causar renderizados innecesarios si no se utiliza cuidadosamente. Es importante comprender cu\u00e1ndo un componente necesita suscribirse a cambios de Context.</li> <li>Optimizaci\u00f3n: Dividir Context en contextos m\u00e1s peque\u00f1os seg\u00fan la necesidad, y usar React.memo para evitar renderizados innecesarios en componentes consumidores.</li> </ul>"},{"location":"ud5.11-Context-API/#como-usar-context","title":"\u00bfC\u00f3mo usar Context?","text":"<p>Context tiene las siguientes caracter\u00edsticas y/o elementos principales:</p> <ul> <li>React.createContext</li> <li>Context.Provider</li> <li>Context.Consumer </li> </ul>"},{"location":"ud5.11-Context-API/#reactcreatecontext","title":"React.createContext","text":"<p>CreateContext crea un objeto Context. Cuando React renderiza un componente que se suscribe a este objeto Context, este leer\u00e1 el valor de contexto actual del Provider m\u00e1s cercano en el \u00e1rbol. Cada objeto Context viene con un componente Provider de React que permite que los componentes que lo consumen se suscriban a los cambios del contexto.</p> <pre><code>const MyContext = React.createContext()\n</code></pre>"},{"location":"ud5.11-Context-API/#provider","title":"Provider","text":"<p>Cada objeto Context viene con un componente Provider de React que permite que los componentes que lo consumen se suscriban a los cambios del contexto.</p> <p>El componente Provider acepta una prop value que se pasar\u00e1 a los componentes consumidores que son descendientes de este Provider.</p> <pre><code>&lt;MyContext.Provider value={/* alg\u00fan valor */}&gt;\n</code></pre>"},{"location":"ud5.11-Context-API/#usecontext","title":"useContext","text":"<p>useContext acepta un objeto de contexto (el valor devuelto de React.createContext) y devuelve el valor de contexto actual. El valor actual del contexto es determinado por la propiedad value del  ascendentemente m\u00e1s cercano en el \u00e1rbol al componente que hace la llamada. <pre><code>const contextValue = React.MyContext()\n</code></pre> <p>Cuando el  ascendentemente m\u00e1s cercano en el \u00e1rbol se actualiza, el Hook activa una renderizaci\u00f3n con el value m\u00e1s reciente del contexto pasado a ese proveedor MyContext.  <p>El argumento enviado a useContext debe ser el objeto del contexto en s\u00ed mismo:</p> <ul> <li>Correcto: useContext(MyContext)</li> <li>Incorrecto: useContext(MyContext.Consumer)</li> <li>Incorrecto: useContext(MyContext.Provider)</li> </ul> <p>Un componente que llama a useContext siempre se volver\u00e1 a renderizar cuando el valor del contexto cambie. </p>"},{"location":"ud5.11-Context-API/#ejemplo-de-uso-de-context-api","title":"Ejemplo de uso de context API","text":"<p>En la aplicaci\u00f3n del ejempo vamos a necesitar crear un contexto user para que todos los elementos y p\u00e1ginas de la aplicaci\u00f3n puedan saber si hay un usuario logueado o no, la informaci\u00f3n a mostrar no ser\u00e1 la misma en ambos casos. Vamos a partir del siguiente c\u00f3digo base.</p>"},{"location":"ud5.11-Context-API/#createcontext","title":"CreateContext","text":"<p>Lo primero que tenemos que hacer es crear el contexto, habitualmente cada contexto se almacena en un archivo independiente y se almacenan dentro de un directorio que suele nombrarse como contexts. Es conveniente darle al archivo un nombre descriptivo, en caso le llamaremos UserContext.</p> <p>context/UserContext.jsx</p> <pre><code>import { createContext, useContext } from \"react\";\n\n// UserContext es el contexto que se crea. Este contexto eventualmente proporcionar\u00e1 y recibir\u00e1 datos a/de los componentes que lo consuman.\n\nexport const UserContext = createContext(false);\n</code></pre> <p>Una vez tenemos creado el contexto UserContext podemos acceder al valor de este desde cualquier parte de la aplicaci\u00f3n. Disponemos para ello de un hook de React, useContext.</p> <p>components/Navbar.js</p> <pre><code>import React, { useContext } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { UserContext } from '../context/UserContext'\n\nconst Navbar = () =&gt; {\n  console.log(useContext(UserContext))\n  return (\n    &lt;nav&gt;\n      &lt;NavLink to='/'&gt; Home &lt;/NavLink&gt; |\n      &lt;NavLink to='/dashboard'&gt; Dashboard &lt;/NavLink&gt;\n    &lt;/nav&gt;\n  )\n}\n\nexport default Navbar\n</code></pre> <p>Como vemos, ya podemos acceder al contexto, pero eso probablemente no es suficiente, necesitaremos que los componentes puedan tambien modificar del contexto. Para ello vamos a almacenar el contexto creado en un estado y pasar a los componentes tanto el estado como su funci\u00f3n modificadora. Para hacerlo vamos a usar un componente Provider.</p>"},{"location":"ud5.11-Context-API/#provider_1","title":"Provider","text":"<p>context/UserContext.jsx</p> <pre><code>import { createContext, useState } from 'react'\n\nexport const UserContext = createContext()\n\nconst UserProvider = ({ children }) =&gt; {\n  const [user, setUser] = useState(null)\n  return (\n    &lt;UserContext.Provider value={{ user, setUser }}&gt;\n      {children}\n    &lt;/UserContext.Provider&gt;\n  )\n}\n\nexport default UserProvider\n</code></pre> <p>Vamos a analizar el c\u00f3digo anterior:</p> <ul> <li> <p>UserProvider: UserProvider es un componente que act\u00faa como proveedor del contexto UserContext. Todo componente que necesite acceso al contexto debe estar dentro de este UserProvider.</p> </li> <li> <p>useState para Manejar el Estado: Aqu\u00ed se utiliza el Hook useState para crear un estado llamado user. Inicialmente, este estado est\u00e1 establecido en false. setUser es una funci\u00f3n que permite actualizar este estado.</p> </li> <li> <p>Propagando el Contexto: UserContext.Provider es un componente que hace que el valor del contexto ({ user, setUser }) est\u00e9 disponible para todos los componentes hijos (denotados por {children}). Esto significa que cualquier componente dentro de UserProvider puede acceder al estado user y a la funci\u00f3n setUser.</p> </li> <li> <p>Value del Provider: El value del UserContext.Provider es un objeto que contiene el estado user y la funci\u00f3n setUser. Cualquier componente que acceda a UserContext podr\u00e1 obtener user y llamar a setUser para actualizarlo</p> </li> </ul> <p>main.jsx</p> <pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { RouterProvider } from 'react-router-dom'\nimport UserProvider from './context/UserContext'\nimport { router } from './router'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;UserProvider&gt;\n      &lt;RouterProvider router={router} /&gt;\n    &lt;/UserProvider&gt;\n  &lt;/React.StrictMode&gt;\n)\n</code></pre> <p>Navbar.jsx</p> <pre><code>import React, { useContext } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { UserContext } from '../context/UserContext'\n\nconst Navbar = () =&gt; {\n  console.log(useContext(UserContext)) // Podemos ver por consola que recibimos el objeto.\n  return (\n    &lt;nav&gt;\n      &lt;NavLink to='/'&gt; Home &lt;/NavLink&gt; |\n      &lt;NavLink to='/dashboard'&gt; Dashboard &lt;/NavLink&gt;\n    &lt;/nav&gt;\n  )\n}\n\nexport default Navbar\n</code></pre> <p>Ahora vemos que ya recibimos un objeto con el user y su funci\u00f3n modificadora setUser, de esta forma des cualquier componente podremos modificar el valor del mismo.</p> <p>Vamos a probarlo con el navbar:</p> <p>Navbar.jsx</p> <pre><code>import React, { useContext } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { UserContext } from '../context/UserContext'\n\nconst Navbar = () =&gt; {\n  const { user, setUser } = useContext(UserContext)\n  return (\n    &lt;nav&gt;\n      &lt;NavLink to='/'&gt; Home &lt;/NavLink&gt; |\n          {user &amp;&amp; (\n            &lt;&gt;\n              &lt;NavLink to='/dashboard'&gt;\n                Dashboard\n              &lt;/NavLink&gt;\n              &lt;button onClick={() =&gt; setUser(null)}&gt;\n               Logout\n              &lt;/button&gt;\n            &lt;/&gt;\n          )}\n    &lt;/nav&gt;\n  )\n}\n\nexport default Navbar\n</code></pre> <p>Home.jsx</p> <pre><code>import { useUserContext } from \"../context/UserContext\";\n\nconst Home = () =&gt; {\n  const { user, setUser } = useUserContext();\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Home&lt;/h1&gt;\n      {!user &amp;&amp; (\n        &lt;button onClick={() =&gt; setUser({ name: \"Guillermo Ventanas\" })}&gt;Login&lt;/button&gt;\n      )}\n    &lt;/&gt;\n  );\n};\n\nexport default Home;\n</code></pre>"},{"location":"ud5.11-Context-API/#navbar","title":"Navbar","text":"<p>Una vez tenemos el login funcionando, utilizaremos el contexto para mostrar en el navbar solo las opciones pertinentes en funci\u00f3n de si hay un usuario logueado. Por ejemplo, la opci\u00f3n dashboard no se mostrar\u00e1 si el usuario no est\u00e1 logueago. </p> <pre><code>import React, { useContext } from 'react'\nimport { NavLink, useNavigate } from 'react-router-dom'\nimport { UserContext } from '../context/UserContext'\n\nconst Navbar = () =&gt; {\n\n  const {user, setUser} = useContext(UserContext)\n  const navigate = useNavigate()\n\n  const closeSesion = () =&gt; {\n    setUser(false)\n    navigate(\"/\")\n  }\n\n  const handleLogin = () =&gt; {\n    setUser(true)\n    navigate(\"/dashboard\")\n  }\n\n  return (\n    &lt;nav&gt;\n        &lt;NavLink to =\"/\"&gt;Home |&lt;/NavLink&gt;\n      {\n        user?(\n          &lt;&gt;\n          &lt;NavLink to =\"/dashboard\"&gt;Dashboard&lt;/NavLink&gt;\n          &lt;button onClick={()=&gt; closeSesion()}&gt;Logout&lt;/button&gt;\n          &lt;/&gt;\n        ):(\n          &lt;button onClick={()=&gt; handleLogin()}&gt;Login&lt;/button&gt;\n        )\n      }\n    &lt;/nav&gt;\n  )\n}\n\nexport default Navbar\n</code></pre>"},{"location":"ud5.11-Context-API/#private-routes","title":"Private Routes","text":"<p>Las rutas protegidas son rutas que solo se pueden acceder si el usuario est\u00e1 autenticado. Si el usuario no est\u00e1 autenticado, se redirige a la p\u00e1gina de inicio de sesi\u00f3n. En la aplicaci\u00f3n tenemos un LayoutPrivate, esto nos permite proteger mas facilmente todo lo que necesitemos, ya que protegiendo dicho Layout quedar\u00eda protegido todo las p\u00e1ginas que mostremos bajo este Layout.</p> <p>LayoutPrivate.jsx</p> <pre><code>import React, { useEffect, useContext} from 'react'\nimport { Outlet, useNavigate } from 'react-router-dom'\nimport { UserContext } from '../context/UserContext'\n\nconst LayoutPrivate = () =&gt; {\n  const {user} = useContext(UserContext)\n  const navigate = useNavigate()\n\n  useEffect(() =&gt; {\n    if (!user) {\n      navigate('/login')\n    }\n  }, [user])\n\n  return (\n    &lt;div&gt;\n      LayoutPrivate\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default LayoutPrivate\n</code></pre> <p>Una alternativa sin useEffect:</p> <pre><code>import React, { useContext } from 'react'\nimport { Navigate, Outlet } from 'react-router-dom'\nimport { UserContext } from '../context/UserContext'\n\nconst LayoutPrivate = () =&gt; {\n\n  const {user} = useContext(UserContext)\n\n  return ( \n    &lt;&gt;\n      {\n        user? &lt;Outlet /&gt; : &lt;Navigate to =\"/\" /&gt;\n      }\n    &lt;/&gt;\n  )\n}\n\nexport default LayoutPrivate\n</code></pre> <p>Dashboard.jsx</p> <pre><code>import React, { useContext } from 'react'\nimport { UserContext } from '../context/UserContext'\n\n\nconst Dashboard = () =&gt; {\n  const { user, setUser } = useContext(UserContext)\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\n      &lt;p&gt;{user?.name}&lt;/p&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default Dashboard;\n</code></pre>"},{"location":"ud5.11-Context-API/#integracion-con-apis-externas-y-manejo-de-efectos","title":"Integraci\u00f3n con APIs Externas y Manejo de Efectos","text":"<p>Ejemplo de c\u00f3mo Context puede ser utilizado para manejar datos de APIs externas y c\u00f3mo integrarlo con useEffect para operaciones as\u00edncronas.</p> <pre><code>// Ejemplo: Uso de Context para gestionar datos de una API externa\nconst DataContext = React.createContext();\n\nconst DataProvider = ({ children }) =&gt; {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    fetchData().then(setData); // fetchData es una funci\u00f3n que llama a una API externa\n  }, []);\n\n  return &lt;DataContext.Provider value={data}&gt;{children}&lt;/DataContext.Provider&gt;;\n};\n</code></pre> <p>De esta manera nos aseguramos que los componentes consumidores puedan acceder a los datos cargados de la API externa de manera eficiente y centralizada </p>"},{"location":"ud5.11-Context-API/#alternativas-a-context-api","title":"Alternativas a Context API","text":"<ul> <li> <p>MobX: Una alternativa que ofrece una gesti\u00f3n de estado m\u00e1s autom\u00e1tica y reactiva. MobX se centra en la gesti\u00f3n reactiva del estado a trav\u00e9s de observables, lo que puede simplificar el manejo de estados complejos en aplicaciones grandes.</p> </li> <li> <p>Recoil: Una biblioteca de gesti\u00f3n de estado de React m\u00e1s reciente, que proporciona una forma m\u00e1s atomizada y eficiente de manejar estados en aplicaciones grandes. Recoil permite manejar un estado global con un enfoque m\u00e1s granular, lo que puede ser beneficioso en aplicaciones con muchos estados interdependientes.</p> </li> <li> <p>Zustand: Una biblioteca de gesti\u00f3n de estado minimalista y eficiente para React. Zustand destaca por su simplicidad y facilidad de uso, ofreciendo una soluci\u00f3n liviana para la gesti\u00f3n de estados sin la complejidad adicional de Redux. Es especialmente \u00fatil en proyectos donde se desea una soluci\u00f3n r\u00e1pida y sencilla para manejar estados compartidos.</p> </li> <li> <p>Redux: Redux es un \u201ccontenedor de estados\u201d previsible y centralizado para aplicaciones de JavaScript. Nos proporciona un conjunto completo de herramientas para administrar el estado:</p> <ul> <li>Viene con un depurador que nos permite \"viajar en el tiempo\" (historial de acciones y ver c\u00f3mo el estado de cada uno de esos momentos).</li> <li>Proporciona una API de middleware que le brinda acceso a herramientas como redux-sagas.</li> <li>Sus enlaces de React evitan muchos renderizados innecesarios.</li> <li>Como puede ver, el contexto no reemplaza a Redux. El contexto no le permitir\u00e1 viajar en el tiempo con depuraci\u00f3n, middleware configurable.</li> </ul> </li> <li> <p>npmtrends; context vs mobx vs recoil vs redux vs zustand</p> </li> </ul>"},{"location":"ud5.11-Context-API/#recursos","title":"Recursos","text":"<ul> <li>Contex API</li> <li>alternativa a redux</li> <li>context-api-vs-redux</li> <li>when context replaces redux</li> </ul>"},{"location":"ud5.12-React%2BFirebase/","title":"React con Firebase","text":""},{"location":"ud5.13-Patrones/","title":"Patrones de Dise\u00f1o","text":"<p>Los patrones de dise\u00f1o son soluciones repetibles para problemas comunes en el desarrollo de software, aceleran el proceso de desarrollo y hacen que el c\u00f3digo sea m\u00e1s f\u00e1cil de leer y mantener.</p>"},{"location":"ud5.13-Patrones/#patrones-de-diseno-mas-usados-en-react","title":"Patrones de Dise\u00f1o m\u00e1s Usados en React","text":"<ul> <li> <p>Componentes Funcionales vs. Contenedores: Diferencia entre componentes con estado (stateful) y sin estado (stateless). Los componentes funcionales siempre renderizan lo mismo o solo lo que se les pasa a trav\u00e9s de props.</p> </li> <li> <p>Patr\u00f3n Compuesto: Utilizado cuando dos o m\u00e1s componentes trabajan juntos, donde uno es el padre y los dem\u00e1s son hijos. Este patr\u00f3n muestra relaciones entre componentes y permite que se comuniquen de manera flexible.</p> </li> <li> <p>Renderizado Condicional: Basado en el estado, se renderiza un JSX espec\u00edfico. Por ejemplo, mostrar diferentes mensajes al usuario seg\u00fan su estado de inicio de sesi\u00f3n.</p> </li> <li> <p>Componentes Controlados: Utilizado para manejar el estado de los formularios web. El componente controlado toma su estado a trav\u00e9s de props y notifica cualquier cambio mediante callbacks.</p> </li> <li> <p>Hooks de React: Permiten usar React sin clases. Proporcionan funciones como useEffect y useState para manejar el estado y los efectos secundarios en los componentes funcionales.</p> </li> <li> <p>Higher-Order Component (HOC): Un HOC toma un componente como argumento y, al devolverlo, agrega datos y funcionalidad al componente. Por ejemplo, en React con Redux, puedes pasar el componente a trav\u00e9s de la funci\u00f3n connect para inyectar datos desde el Redux store.</p> </li> </ul>"},{"location":"ud5.13-Patrones/#introduccion-a-higher-order-components-hoc","title":"Introducci\u00f3n a Higher-Order Components (HOC)","text":"<p>Los HOC son funciones que toman un componente y devuelven un nuevo componente con funcionalidades adicionales. Los HOCs son utilizados principalmente para reutilizar la l\u00f3gica de componentes, manipular props, o abstraer el estado.</p>"},{"location":"ud5.13-Patrones/#ejemplo-practico-aplicacion-todo","title":"Ejemplo Pr\u00e1ctico: Aplicaci\u00f3n Todo","text":"<p>Reescribir nuestra aplicaci\u00f3n Todo para utilizar Higher-Order Components (HOCs) es posible, aunque al ser una aplicaci\u00f3n bastante directa no sacar\u00edamos mucho partido al uso de HOCs. Sin embargo, para prop\u00f3sitos educativos o de exploraci\u00f3n, ciertamente podemos hacerlo.</p> <p>Vamos a crear un HOC que podr\u00eda ser \u00fatil en nuestra aplicaci\u00f3n, un HOC que maneja el estado de \"edici\u00f3n\" de una tarea. Este HOC se encargar\u00e1 de gestionar si una tarea est\u00e1 en modo de edici\u00f3n y proporcionar\u00e1 la l\u00f3gica y los m\u00e9todos necesarios para cambiar entre modos.</p> <p>Vamos a reescribir el componente Todo para usar un HOC que maneje su estado de edici\u00f3n. El HOC proporcionar\u00e1 props adicionales para gestionar este estado.</p> <p>Primero, creamos el HOC: </p> <p>withEditState.jsx</p> <pre><code>import React, { useState } from 'react';\n\nconst withEditState = WrappedComponent =&gt; {\n  return props =&gt; {\n    const [isEditing, setIsEditing] = useState(false);\n    const toggleEdit = () =&gt; setIsEditing(!isEditing);\n\n    return (\n      &lt;WrappedComponent \n        {...props} \n        isEditing={isEditing} \n        toggleEdit={toggleEdit} \n      /&gt;\n    );\n  };\n};\n\nexport default withEditState;\n\n</code></pre> <p>Ahora, modifiquemos el componente Todo para que utilice este HOC:</p> <pre><code>// Todo.jsx\nimport React from 'react';\nimport withEditState from './withEditState';\n\nconst Todo = ({ todo, deleteTodo, updateTodoState, toggleEdit, isEditing }) =&gt; {\n  const { id, title, description, priority, state } = todo;\n\n  return (\n    &lt;li className='list-group-item'&gt;\n      &lt;div className=\"d-flex justify-content-between align-items-start\"&gt;\n        &lt;div&gt;\n          {isEditing ? (\n            &lt;div&gt;\n              {/* Aqu\u00ed ir\u00eda tu formulario de edici\u00f3n */}\n              &lt;button onClick={toggleEdit} className='btn btn-sm btn-success mr-2'&gt;Guardar&lt;/button&gt;\n            &lt;/div&gt;\n          ) : (\n            &lt;div&gt;\n              &lt;h5 className={state ? 'completada' : undefined}&gt;{title}&lt;/h5&gt;\n              &lt;p className={state ? 'completada' : undefined}&gt;{description}&lt;/p&gt;\n              &lt;div className='d-flex'&gt;\n                &lt;button onClick={() =&gt; deleteTodo(id)} className='btn btn-sm btn-danger mr-2'&gt;Eliminar&lt;/button&gt;\n                &lt;button onClick={toggleEdit} className='btn btn-sm btn-warning mr-2'&gt;Editar&lt;/button&gt;\n                &lt;button onClick={() =&gt; updateTodoState(id)} className='btn btn-sm btn-primary'&gt;Actualizar Estado&lt;/button&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          )}\n        &lt;/div&gt;\n        &lt;span className=\"badge badge-primary\"&gt;\n          {priority &amp;&amp; \"prioridad\"}\n        &lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/li&gt;\n  );\n};\n\nexport default withEditState(Todo);\n</code></pre> <p>En este ejemplo, el HOC withEditState agrega l\u00f3gica adicional al componente Todo, permitiendo que cada tarea maneje su propio estado de edici\u00f3n. Esto es \u00fatil si quieres que cada tarea en tu lista tenga su propia l\u00f3gica de edici\u00f3n independiente del estado global de la aplicaci\u00f3n.</p> <p>Ten en cuenta que esta es una demostraci\u00f3n del concepto de HOC. En la pr\u00e1ctica real, hay que evaluar muy bien si el uso de un HOC es la mejor opci\u00f3n para un caso espec\u00edfico o si hay otras formas m\u00e1s eficientes de lograr la misma funcionalidad, como usando Hooks personalizados o Context API.</p>"},{"location":"ud5.14-Refuerzo/","title":"Material de Refuerzo","text":"<p>Como material de refuerzo de \u00e9sta unidad, se propone la realizaci\u00f3n de un curso de React en formato video. Durante el curso se revisan los fundamentos de React en este curso desde cero, y se crean cuatro proyectos paso a paso.</p>"},{"location":"ud5.14-Refuerzo/#enlace-al-curso","title":"Enlace al curso","text":"<ul> <li>Aprende React Desde Cero - Curso de React Con Proyectos</li> </ul>"},{"location":"ud5.14-Refuerzo/#codigo-en-github","title":"C\u00f3digo en GitHub:","text":"<p>\ud83d\udd17 Proyecto 1: Clon de la secci\u00f3n de Testimonios de estudiantes de freeCodeCamp</p> <p>\ud83d\udd17 Proyecto 2: Contador de clics</p> <p>\ud83d\udd17 Proyecto 3: Calculadora interactiva</p> <p>\ud83d\udd17 Proyecto 4: Aplicaci\u00f3n de tareas</p>"},{"location":"ud5.14-Refuerzo/#creditos","title":"Cr\u00e9ditos","text":"<p>Curso creado por: Estefania Cassingena Navone.</p>"},{"location":"ud5.15-Ampliacion/","title":"Material de Ampliaci\u00f3n","text":"<p>Como material de ampliaci\u00f3n de \u00e9sta unidad, se propone la realizaci\u00f3n de uno de los retos de Frontend Mentor.</p> <p>\u00a1La cl\u00e1sica aplicaci\u00f3n de tareas pendientes con algunos cambios! Esta aplicaci\u00f3n incluye un cambio de tema oscuro/claro y un reordenamiento de arrastrar y soltar para cualquiera que desee una prueba adicional.</p>"},{"location":"ud5.15-Ampliacion/#enlace-al-reto","title":"Enlace al reto","text":"<ul> <li>Aplicaci\u00f3n todo</li> </ul>"},{"location":"ud5.2-Paso-a-paso/","title":"Paso a paso con React","text":"<p>En la documentaci\u00f3n oficial de React encontraremos toda la informaci\u00f3n de la librer\u00eda, y adem\u00e1s, algunos tutoriales muy interesantes. Uno de los recursos de obligada visita es su gu\u00eda de inicio r\u00e1pido.</p>"},{"location":"ud5.2-Paso-a-paso/#otros-materiales","title":"Otros materiales","text":"<p>A parte de lo anteriormente visto, estaremos usando mas funcionalidades, dejamos por aqu\u00ed algunos enlaces que estar\u00eda bien ir revisando a estas alturas:</p> <ul> <li>React Routing Guide</li> <li>Redux</li> <li>React Redux</li> <li>Redux Dev Tools</li> </ul>"},{"location":"ud5.3-Tres-en-raya/","title":"Juego tres en raya","text":"<p>Como mencionamos anteriormente, la documentaci\u00f3n de react contiene material muy interesante para su aprendizaje. Entre ellos, un tutorial muy interesante para construir este peque\u00f1o juego.</p> <p>Puedes ir directamente a la documentaci\u00f3n oficial de react y hacer el tutorial, o si lo prefieres, puedes seguir aqu\u00ed las diferentes secciones del tutorial:</p> <ul> <li>Configuraci\u00f3n para el tutorial te dar\u00e1 un punto de partida para seguir el tutorial.</li> <li>Descripci\u00f3n general te ense\u00f1ar\u00e1 los fundamentos de React: componentes, props y estado.</li> <li>Completar el juego te ense\u00f1ar\u00e1 las t\u00e9cnicas m\u00e1s comunes en el desarrollo de React.</li> <li>Agregar viajes en el tiempo te brindar\u00e1 una visi\u00f3n m\u00e1s profunda de las fortalezas \u00fanicas de React.</li> </ul> <p>Este tutorial es ideal si prefieres aprender haciendo y quieres ver algo tangible de manera r\u00e1pida. Si prefieres aprender cada concepto paso a paso, comienza con Describir la UI.</p>"},{"location":"ud5.4-Mi-Primer-Proyecto/","title":"Mi primer proyecto","text":"<p>En este apartado se introducen algunos recursos \u00fatiles para iniciar tu primer proyecto en React.</p>"},{"location":"ud5.4-Mi-Primer-Proyecto/#que-voy-a-necesitar-para-trabajar-con-react","title":"\u00bfQue voy a necesitar para trabajar con React?","text":"<p>Es necesario contar con:</p> <ul> <li> <p>Node js, un entorno en tiempo de ejecuci\u00f3n multiplataforma, de c\u00f3digo abierto, para la capa del servidor (pero no limit\u00e1ndose a ello) basado en el lenguaje de programaci\u00f3n JavaScript.</p> </li> <li> <p>npm (Node Package Manager), es un gestor de paquetes desarrollado en su totalidad bajo el lenguaje JavaScript por Isaac Schlueter, a trav\u00e9s del cual podemos obtener cualquier librer\u00eda con tan solo una sencilla l\u00ednea de c\u00f3digo.</p> </li> </ul>"},{"location":"ud5.4-Mi-Primer-Proyecto/#extensiones-visual-code-studio","title":"Extensiones Visual Code Studio","text":"<p>A continuaci\u00f3n se listan algunas extensiones que pueden resultar muy \u00fatiles para trabajar con React en \u00e9ste editor.</p> <ul> <li>ES7 React/Redux/React-Native/JS snippets</li> </ul>"},{"location":"ud5.4-Mi-Primer-Proyecto/#como-iniciar-un-proyecto-react","title":"\u00bfC\u00f3mo iniciar un proyecto React?","text":"<p>Tenemos dos opciones:</p> <ul> <li>Create React App (CRA)</li> <li>Vite</li> </ul>"},{"location":"ud5.4-Mi-Primer-Proyecto/#create-react-app","title":"Create React App","text":"<p>El paquete Create React App fue desarrollado por facebook, es un entorno que viene preconfigurado con todo lo necesario para crear una aplicaci\u00f3n React.</p> <p>Herramientas como webpack o Babel est\u00e1n ya preconfigurados y nos podemos despreocupar de ellas.</p> <p>https://create-react-app.dev/</p>"},{"location":"ud5.4-Mi-Primer-Proyecto/#como-creamos-una-app-con-cra","title":"\u00bfC\u00f3mo creamos una app con CRA?","text":"<pre><code>npx create-react-app my-app\ncd my-app\ncode .\nnpm start\n</code></pre> <p>Wual\u00e1 ya tendr\u00e1s tu aplicaci\u00f3n funcionando y ejecutada en Visual Studio Code.</p>"},{"location":"ud5.4-Mi-Primer-Proyecto/#vite","title":"Vite","text":"<p>Vite es una herramienta de que te ayudar\u00e1 a crear proyectos (sin atarte a ning\u00fan framework concreto) y que su desarrollo y construcci\u00f3n final sea lo m\u00e1s sencilla posible.</p> <p>Est\u00e1 desarrollada por Evan You, el creador de Vue.</p> <p>Actualmente, Vite soporta tanto proyectos vanilla (sin utilizar frameworks), como proyectos utilizando Vue, React, Preact o Lit-element (tanto en versi\u00f3n Javascript, como Typescript). Vite trabaja con Rollup como empaquetador.</p> <p>Las templates de Vite, sirven para proporcionar puntos de partida preconfigurados para diferentes tipos de proyectos web. Estas templates incluyen una configuraci\u00f3n inicial que es espec\u00edfica para un marco o una pila de tecnolog\u00eda en particular.</p>"},{"location":"ud5.4-Mi-Primer-Proyecto/#como-creamos-una-app-con-vite","title":"\u00bfC\u00f3mo creamos una app con Vite?","text":"<pre><code>npm create vite@latest\ncode .\nnpm start\n</code></pre> <p>Wual\u00e1 ya tendr\u00e1s tu aplicaci\u00f3n funcionando y ejecutada en Visual Studio Code.</p>"},{"location":"ud5.4-Mi-Primer-Proyecto/#cra-vs-vite","title":"CRA vs Vite","text":"<p>Comparativa entre CRA y Vite</p>"},{"location":"ud5.5-Fundamentos/","title":"Fundamentos de React","text":""},{"location":"ud5.5-Fundamentos/#escribir-marcado-con-jsx","title":"Escribir Marcado con JSX","text":"<ul> <li>JSX combina HTML y JavaScript.</li> <li>Requiere etiquetas cerradas,  .</li> <li>Las propiedades y m\u00e9todos en JSX son camelCase.</li> <li>Envolver m\u00faltiples etiquetas en <code>&lt;div&gt;</code> o <code>&lt;&gt;</code>.</li> </ul> <p>Las expresiones de JavaScript tambi\u00e9n se pueden incrustar dentro de JSX usando llaves, incluidas variables, funciones y propiedades.</p> <pre><code>const App = () =&gt; {\n  return (\n    &lt;div&gt;\n        &lt;p&gt;Esto es un parrafo&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Source</p> <p>Si tienes mucho HTML que convertir a JSX, puedes utilizar un convertidor en l\u00ednea.</p>"},{"location":"ud5.5-Fundamentos/#anadir-estilos","title":"A\u00f1adir Estilos","text":"<ul> <li>Uso de <code>className</code> para CSS.</li> <li>Escribir CSS en archivos separados.</li> <li>Ejemplo:</li> </ul> <pre><code>const Parrafo = () =&gt; {\n  return (\n    &lt;&gt;\n        &lt;p className=\"text-center\"&gt;Esto es un parrafo&lt;/p&gt;\n    &lt;/&gt;\n  )\n}\n</code></pre> <pre><code>/* In your CSS */  \n.text-center {\n    text-align: center;\n}\n</code></pre> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#interolacion","title":"Interolaci\u00f3n","text":"<ul> <li>Incrustar variables en JSX con <code>{}</code>.</li> <li>Uso en marcado y atributos.</li> <li>Ejemplo:</li> </ul> <pre><code>const App = () =&gt; {\n\n    const title = \"Titulo desde React\"\n    const imagen = \"src/assets/images/imagen1.jpg\"\n    const classTitle = \"text-center\"\n\n  return (\n\n    &lt;div&gt;\n        &lt;h1 className='text-center'&gt;{title}&lt;/h1&gt;\n        &lt;h1 className='text-center'&gt;{title.toUpperCase()}&lt;/h1&gt;\n        &lt;h1 className={classTitle}&gt;{title.toUpperCase()}&lt;/h1&gt;\n        &lt;h2&gt;Componente variables {1+1}&lt;/h2&gt;\n        {/* &lt;img src=\"src/assets/images/imagen1.jpg\" alt=\"\" /&gt; */}\n        &lt;img src={imagen} alt=\"\" /&gt;\n        &lt;img src={imagen} alt={`imagen - ${title}`} /&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#componentes","title":"Componentes","text":"<ul> <li>Componentes son bloques de UI.</li> <li>Funciones JavaScript que devuelven marcado.</li> <li>Ejemplo de declaraci\u00f3n y anidaci\u00f3n.</li> </ul> <pre><code>function MyButton() {  \n  return (  \n    &lt;button&gt;Soy un bot\u00f3n&lt;/button&gt;  \n  );  \n}\n\nexport default function MyApp() {  \n  return (  \n    &lt;div&gt;  \n      &lt;h1&gt;Bienvenido a mi aplicaci\u00f3n&lt;/h1&gt;  \n      &lt;MyButton /&gt;  \n    &lt;/div&gt;  \n  );  \n}\n</code></pre> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#renderizado-condicional","title":"Renderizado Condicional","text":"<ul> <li>Uso de <code>if</code> o operadores condicionales.</li> <li>Ejemplo con <code>if</code> y operador <code>?</code>:</li> </ul> <pre><code>let content;  \nif (isLoggedIn) {  \n  content = &lt;AdminPanel /&gt;;  \n} else {  \n  content = &lt;LoginForm /&gt;;  \n}\nreturn (&lt;div&gt;{content}&lt;/div&gt;);\n</code></pre> <p>Si prefieres un c\u00f3digo m\u00e1s compacto, puedes utilizar el operador ? condicional. A diferencia de if, funciona dentro de JSX:</p> <pre><code>&lt;div&gt;\n  {isLoggedIn ? (\n    &lt;AdminPanel /&gt;\n  ) : (\n    &lt;LoginForm /&gt;\n  )}\n&lt;/div&gt;\n</code></pre> <p>Cuando no necesites la rama else, puedes tambi\u00e9n usar la sintaxis l\u00f3gica &amp;&amp;, m\u00e1s breve:</p> <pre><code>&lt;div&gt;\n  {isLoggedIn &amp;&amp; &lt;AdminPanel /&gt;}\n&lt;/div&gt;\n</code></pre> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#renderizado-de-listas","title":"Renderizado de Listas","text":"<ul> <li>Uso de <code>map()</code> para listas.</li> <li>Atributo <code>key</code> para elementos \u00fanicos.</li> <li>Ejemplo:</li> </ul> <pre><code>const App = () =&gt; {\n  const frutas = [\"\ud83c\udf50\", \"\ud83c\udf4c\", \"\ud83c\udf4e\"];\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;ul&gt;\n        {frutas.map((fruta, index) =&gt; {\n          return &lt;li key={index}&gt;{fruta}&lt;/li&gt;;\n        })}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#compartir-datos-entre-componentes-props","title":"Compartir Datos entre Componentes - props","text":"<ul> <li>Las props se utilizan para enviar informaci\u00f3n al componente anidado.</li> <li>Ejemplo:</li> </ul> <pre><code>const MyButton = (props) =&gt; {\n  return &lt;button&gt;{props.text}&lt;/button&gt;;\n};\n\nconst App = () =&gt; {\n  const title = \"Mi primero proyecto con React.js\";\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1 className=\"text-primary\"&gt;{title}&lt;/h1&gt;\n      &lt;MyButton text=\"bot\u00f3n 1\"/&gt;\n      &lt;MyButton text=\"bot\u00f3n 2\"/&gt;\n      &lt;MyButton text=\"bot\u00f3n 3\"/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#proptypes","title":"PropTypes","text":"<ul> <li>Proporciona una forma de documentar y validar las props que se esperan en un componente.</li> <li>Ayuda a evitar errores y facilita el desarrollo y mantenimiento del c\u00f3digo.</li> <li>Ejemplo:</li> </ul> <pre><code>const MyButton = (props) =&gt; {\n  return &lt;button&gt;{props.text}-{props.edad}&lt;/button&gt;;\n};\n\nMyButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  edad: PropTypes.number.isRequired,\n};\n\nconst App = () =&gt; {\n  const title = \"Mi primero proyecto con React.js\";\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1 className=\"text-primary\"&gt;{title}&lt;/h1&gt;\n      &lt;MyButton text=\"bot\u00f3n 1\" edad={18}/&gt;\n\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"ud5.5-Fundamentos/#eventos","title":"Eventos","text":"<ul> <li>Los eventos de React se nombran usando camelCase, en vez de min\u00fasculas.</li> <li>Con JSX pasas una funci\u00f3n como el manejador del evento, en vez de un string.</li> <li>Ejemplo:</li> </ul> <pre><code>const MyButton = () =&gt; {\n  const handleClick = () =&gt; {\n    console.log(\"me diste click\");\n  };\n\n  return &lt;button onClick={handleClick}&gt;i'am a button&lt;/button&gt;;\n};\n</code></pre> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#modularizar-con-componentes","title":"Modularizar con Componentes","text":"<p>Los componentes permiten separar la interfaz de usuario en piezas independientes, reutilizables y pensar en cada pieza de forma aislada.</p> <p>components/MyButton.jsx</p> <pre><code>const MyButton = () =&gt; {\n  const handleClick = () =&gt; {\n    console.log(\"me diste click\");\n  };\n\n  return &lt;button onClick={handleClick}&gt;i'am a button&lt;/button&gt;;\n   };\n\nexport default MyButton;\n</code></pre> <p>App.jsx</p> <pre><code>import MyButton from \"./components/MyButton\";\nconst App = () =&gt; {\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1 className=\"text-primary\"&gt;{title}&lt;/h1&gt;\n      &lt;MyButton /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"ud5.5-Fundamentos/#actualizar-la-pantalla","title":"Actualizar la pantalla","text":"<p>A menudo, querr\u00e1s que tu componente \u00abrecuerde\u00bb alguna informaci\u00f3n y la muestre. Por ejemplo, quiz\u00e1 quieras contar el n\u00famero de veces que hiciste clic en un bot\u00f3n. </p> <p>\u00bfQu\u00e9 pasa si hago esto? </p> <p>ButtonState.jsx</p> <pre><code>export default () =&gt; {\n  let counter = 0;\n\n  const handleClickIncrement = () =&gt; {\n    counter++;\n    console.log(counter);\n  };\n\n  return &lt;button onClick={handleClickIncrement}&gt;Counter: {counter}&lt;/button&gt;;\n};\n</code></pre> <p>App.jsx</p> <pre><code>import MyButton from \"./components/MyButton\";\nconst App = () =&gt; {\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1 className=\"text-primary\"&gt;{title}&lt;/h1&gt;\n      &lt;ButtonState /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre> <ul> <li>Nada le indica a React que tenemos que volver a renderizar para pintar nuevamente button.</li> <li>Necesitamos un Hook que modifique el estado.</li> </ul> <p>Source</p>"},{"location":"ud5.5-Fundamentos/#uso-de-hooks","title":"Uso de Hooks","text":"<ul> <li>Uso de <code>useState</code> para manejar estado.</li> <li>Ejemplo:</li> </ul> <pre><code>import { useState } from \"react\";\n\nexport default () =&gt; {\n  const [counter, setCounter] = useState(0);\n\n  const handleClickIncrement = () =&gt; {\n    setCounter(counter + 1);\n    //setCounter((prevCounter) =&gt; prevCounter + 1);\n  };\n\n  return &lt;button onClick={handleClickIncrement}&gt;Counter: {counter}&lt;/button&gt;;\n};\n\n</code></pre> <p>Source</p>"},{"location":"ud5.6-Formularios/","title":"Formularios","text":"<p>Los formularios funcionan de manera un poco diferente a otros elementos DOM en React. En esta secci\u00f3n veremos:</p> <ul> <li>Formularios no controlados</li> <li>Formularios controlados</li> </ul>"},{"location":"ud5.6-Formularios/#recursos","title":"Recursos","text":"<p>En la secci\u00f3n usaremos los siguientes recursos:</p> <ul> <li>React Developer Tools</li> </ul>"},{"location":"ud5.6-Formularios/#formularios-no-controlados","title":"Formularios no controlados","text":"<p>En la mayor\u00eda de los casos se recomienda el uso de componentes controlados para implementar formularios. En un componente controlado, los datos del formulario son manejados por un componente React.</p> <p>La alternativa son los componentes no controlados, donde los datos del formulario son manejados por el propio DOM. </p> <p>Para escribir un componente no controlado, a la hora de acceder al componente no usaremos los selectores habituales de javascript, ya que estos pueden generar conflictos entre el DOM virtual de React y el DOM real, por ello usaremos una referencia para obtener los valores del formulario desde el DOM.</p> <ul> <li>refs: Las referencias proporcionan una forma de acceder a los nodos del DOM o a elementos React creados en el m\u00e9todo de renderizado.</li> <li>useRef: useRef devuelve un objeto ref mutable cuya propiedad .current se inicializa con el argumento pasado (initialValue). El objeto devuelto se mantendr\u00e1 persistente durante la vida completa del componente.</li> </ul> <p>Veamos un ejemplo de formulario no controlado:</p> <pre><code>import React, { useRef } from 'react'\n\nconst FormNoControlados = () =&gt; {\n\n    const formulario = useRef(null)\n    //console.log(formulario)\n\n    const handleSubmit = e =&gt; {     \n        e.preventDefault()\n        const datos = new FormData(formulario.current)\n        console.log(...datos.entries())\n        const objetoDatos = Object.fromEntries([...datos.entries()])\n        console.log(objetoDatos);\n\n        const {title, description, state} = objetoDatos\n\n        if (!title.trim() || !description.trim() || !state.trim()) {\n            console.log(\"error!!!!!!!!!!\");\n            return\n        }\n\n        console.log(\"Enviando objeto datos al server!!!!\")\n\n    }\n\n  return (\n    &lt;div&gt;\n        &lt;p&gt;Form No Controlados&lt;/p&gt;\n        &lt;form ref={formulario} onSubmit={handleSubmit}&gt;\n            &lt;input \n                name=\"title\"\n                placeholder=\"Introduce nombre de la tarea\"\n                type=\"text\" \n                className=\"form-control mb-2\" \n                defaultValue=\"Tarea 1\"\n            /&gt;\n            &lt;textarea\n                name=\"description\"\n                placeholder=\"Introduce la descripcion\"\n                className=\"form-control mb-2\" \n                defaultValue=\"Descripci\u00f3n de la tarea 1\"\n            /&gt;\n            &lt;select \n                name=\"state\" \n                className=\"form-control mb-2\" \n                defaultValue=\"Pendiente\"\n\n            &gt;\n                &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt;\n                &lt;option value=\"completada\"&gt;Completada&lt;/option&gt;\n            &lt;/select&gt;\n            &lt;button\n                 type=\"submit\" \n                 className='btn btn-primary'\n            &gt;\n                A\u00f1adir\n            &lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default FormNoControlados\n</code></pre>"},{"location":"ud5.6-Formularios/#formularios-controlados","title":"Formularios controlados","text":"<p>Los componentes React que rendericen un formulario tambi\u00e9n pueden controlar lo que pasa en ese formulario, as\u00ed podremos detectar que ocurre en los input input en tiempo real.</p> <p>Veamos un ejemplo:</p> <pre><code>import React, { useState } from 'react'\n\nconst FormularioControlado = () =&gt; {\n\n    // 1. Creamos un estado por cada input.\n    const [title, setTitle] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n    const [state, setState] = useState(\"pendiente\")\n\n\n    const handleSubmit = (e) =&gt; {\n        e.preventDefault()\n        console.log(`Enviando ${title}, ${description}, y ${state} al servidor ...`)\n    }\n\n  return (\n    &lt;div&gt;\n        &lt;p&gt;Formularios Controlados&lt;/p&gt;\n        &lt;form onSubmit={handleSubmit}&gt;\n            &lt;input \n                name=\"title\"\n                placeholder=\"Introduce nombre de la tarea\"\n                type=\"text\" \n                className=\"form-control mb-2\" \n                // 2. Para asociar el estado con el valor del campo, usamos el value del input.\n                value = {title}\n                // 3. Tal y como hemos visto en el error de la consola, la propiedad value tiene que estar pendiente de un onChange.\n                // onChange={e =&gt; console.log(e.target.value)} \n\n                onChange={e =&gt; setTitle(e.target.value)} \n            /&gt;\n            &lt;textarea\n                name=\"description\"\n                placeholder=\"Introduce la descripcion\"\n                className=\"form-control mb-2\" \n                value = {description}\n                onChange={e =&gt; setDescription(e.target.value)} \n            /&gt;\n            &lt;select \n                name=\"state\" \n                className=\"form-control mb-2\" \n                value = {state}\n                onChange={e =&gt; setState(e.target.value)} \n\n            &gt;\n                &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt;\n                &lt;option value=\"completada\"&gt;Completada&lt;/option&gt;\n            &lt;/select&gt;\n            &lt;button\n                 type=\"submit\" \n                 className='btn btn-primary'\n            &gt;\n                A\u00f1adir\n            &lt;/button&gt;\n        &lt;/form&gt;\n\n    &lt;/div&gt;\n  )\n}\n\nexport default FormularioControlado\n</code></pre> <p>Si tuvieramos un formulario con muchos inputs, la soluci\u00f3n anterior ser\u00eda algo tediosa. Vamos a mejorar el c\u00f3digo:</p> <pre><code>\nimport React, { useState } from 'react'\n\nconst FormularioControlado = () =&gt; {\n\n    const [todo, setTodo] = useState({\n        title: \"Todo 01\",\n        description:\"Descripci\u00f3n 01\",\n        state:\"pendiente\"\n    })\n\n    const handleSubmit = (e) =&gt; {\n        e.preventDefault()\n        console.log(`Enviando ${todo.title}, ${todo.description}, y ${todo.state} al servidor ...`)\n    }\n\n    const handlechange = e =&gt; {\n        console.log(e.target.value)\n        console.log(e.target.name)\n        setTodo({\n            ...todo, \n           [ e.target.name]:e.target.value\n        })\n    }\n\n  return (\n    &lt;div&gt;\n        &lt;p&gt;Formularios Controlados&lt;/p&gt;\n        &lt;form onSubmit={handleSubmit}&gt;\n            &lt;input \n                name=\"title\"\n                placeholder=\"Introduce nombre de la tarea\"\n                type=\"text\" \n                className=\"form-control mb-2\"\n                value = {todo.title}\n                onChange={handlechange}\n            /&gt;\n            &lt;textarea\n                name=\"description\"\n                placeholder=\"Introduce la descripcion\"\n                className=\"form-control mb-2\" \n                value = {todo.description}\n                onChange={handlechange}\n            /&gt;\n            &lt;select \n                name=\"state\" \n                className=\"form-control mb-2\" \n                value = {todo.state}\n                onChange={handlechange}\n            &gt;\n                &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt;\n                &lt;option value=\"completada\"&gt;Completada&lt;/option&gt;\n            &lt;/select&gt;\n            &lt;button\n                 type=\"submit\" \n                 className='btn btn-primary'\n            &gt;\n                A\u00f1adir\n            &lt;/button&gt;\n        &lt;/form&gt;\n\n    &lt;/div&gt;\n  )\n}\n\nexport default FormularioControlado\n</code></pre> <p>A\u00f1adimos ahora un checkbox, el cual tiene un comportamiento algo diferente:</p> <pre><code>import React, { useState } from 'react'\n\nconst FormularioCheckBox = () =&gt; {\n\n    const estadoInicial = {\n        title: \"\", \n        description: \"\", \n        state: \"pendiente\",\n        todoCheck:false\n    }\n    const [todo, setTodo] = useState(estadoInicial)\n\n    const [error, setError] = useState(false)\n\n\n    const handleSubmit = (e) =&gt; {\n        e.preventDefault()\n        const {title, description} = todo\n\n        if (!title.trim() || !description.trim()) {\n            setError(true);\n            console.log(error)\n            return\n        }\n        console.log(\"Enviando objeto datos al server!!!!\")\n        setError(false)\n        setTodo(estadoInicial)\n    }\n\n    // const handleChange = (e) =&gt; {\n    //     //console.log(e.target)\n    //     setTodo({\n    //         ...todo,\n    //         [e.target.name]: e.target.type === 'checkbox' ? e.target.checked : e.target.value\n    //     })\n    // }\n\n    const handleChange = (e) =&gt; {\n        const {name, value, checked, type} = e.target \n        setTodo({\n            ...todo,\n            [name]: type === 'checkbox' ? checked : value\n        })\n    }\n\n  return (\n    &lt;div&gt;\n        &lt;p&gt;Formularios Controlados con CheckBox&lt;/p&gt;\n\n        {\n            error ? &lt;div className=\"alert alert-danger\"&gt;Campos obligatorios&lt;/div&gt; : null\n        }\n\n        &lt;form onSubmit={handleSubmit}&gt;\n            &lt;input \n                name=\"title\"\n                placeholder=\"Introduce nombre de la tarea\"\n                type=\"text\" \n                className=\"form-control mb-2\" \n                // onChange={e =&gt;setTodo({...todo, title: e.target.value})}\n                onChange={e=&gt;handleChange(e)}\n                value={todo.title}\n\n            /&gt;\n            &lt;textarea\n                name=\"description\"\n                placeholder=\"Introduce la descripcion\"\n                className=\"form-control mb-2\" \n                onChange={e=&gt;handleChange(e)}\n                value={todo.description}\n            /&gt;\n            &lt;select \n                name=\"state\" \n                className=\"form-control mb-2\" \n                onChange={e=&gt;handleChange(e)}\n                value={todo.state}\n            &gt;\n                &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt;\n                &lt;option value=\"completada\"&gt;Completada&lt;/option&gt;\n            &lt;/select&gt;\n            &lt;div className=\"form-check mb-2\"&gt;\n                &lt;input \n                    className=\"form-check-input\" \n                    type=\"checkbox\" \n                    name=\"todoCheck\"\n                    checked={todo.todoCheck}\n                    onChange={e =&gt; handleChange(e)}\n                /&gt;\n                &lt;label \n                    className=\"form-check-label\" \n                    htmlFor=\"flexCheckDefault\"&gt;\n                &lt;/label&gt;\n                Prioridad\n            &lt;/div&gt;\n            &lt;button\n                 type=\"submit\" \n                 className='btn btn-primary'\n            &gt;\n                A\u00f1adir\n            &lt;/button&gt;\n        &lt;/form&gt;\n\n    &lt;/div&gt;\n  )\n}\n\nexport default FormularioCheckBox\n</code></pre>"},{"location":"ud5.7-Todo-App/","title":"Todo App","text":"<p>En esta secci\u00f3n realizaremos una pr\u00e1ctica para ir aterrizando todo lo aprendido.</p>"},{"location":"ud5.7-Todo-App/#recursos","title":"Recursos","text":"<p>En la secci\u00f3n usaremos los siguientes recursos:</p> <ul> <li>Bootstrap </li> <li>SweetAlert2 </li> <li>Nano ID </li> <li>Netlify </li> </ul>"},{"location":"ud5.7-Todo-App/#formulario","title":"Formulario","text":"<p>Vamos a comenzar dise\u00f1ando la estructura de la aplicaci\u00f3n y nuestros primeros componentes, tendremos los siguientes componentes: - App.jsx =&gt; Ser\u00e1 el componente principal de la aplicaci\u00f3n, donde vamos a llamar a los dem\u00e1s. - Formulario.jsx =&gt; Formulario de a\u00f1adir tareas. - TodoList.jsx =&gt; Lista de tareas. - Todo.jsx =&gt; Tarea.</p> <p>La l\u00f3gica vamos a ponerla en el componente que envuelve a todos los dem\u00e1s, App.jsx, con el objetivo de pasarle los estados y funciones al resto de los componentes mediante propps.</p> <p>App.jsx </p> <pre><code>import React, { useEffect, useState } from 'react'\nimport Formulario from './components/Formulario'\nimport TodoList from './components/TodoList'\n\nconst todosInitialState = JSON.parse(localStorage.getItem(\"todos\")) || [ ]\n\nconst todoInitialState = {\n  title: '',\n  description: '',\n  state: '',\n  priority: false\n}\n\nconst App = () =&gt; {\n\n  const [todos, setTodos] = useState(todosInitialState)\n  const [editionMode, setEditionMode] = useState(false)\n  const [todo, setTodo] = useState(todoInitialState)\n\n  useEffect(()=&gt; {\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\n  })\n\n  const addTodo = todo =&gt; {\n    setTodos([...todos,todo])\n  }\n\n  const deleteTodo = id =&gt; {\n    const newArray = todos.filter(todo =&gt; todo.id !== id)\n    setTodos(newArray)\n  }\n\n  const updateTodoState = id =&gt; {\n    const newArray = todos.map(todo =&gt; {\n      if (todo.id == id) {\n        todo.state = !todo.state\n      }\n      return todo\n    })\n    setTodos(newArray)\n  }\n\n  const handleEditionMode = todo =&gt; {\n    setEditionMode(true)\n    setTodo(todo)\n  }\n\n  const editTodo = id =&gt; {\n    const newArray = todos.map(item =&gt; {\n      if (item.id === todo.id) {\n        item = todo\n      }\n      return item\n    })\n    setTodos(newArray)\n    setEditionMode(false)\n    setTodo(todoInitialState)\n  }\n\n  return (\n    &lt;div className='container mt-4'&gt;\n      &lt;h1 className='text-center'&gt;Todo App&lt;/h1&gt;\n      &lt;hr /&gt;\n      &lt;div className='row mt-2'&gt;\n        &lt; Formulario \n            todo={todo}\n            setTodo={setTodo}\n            addTodo = {addTodo} \n            editionMode={editionMode} \n            editTodo = {editTodo} /&gt;\n        &lt; TodoList \n            todos={todos} \n            deleteTodo={deleteTodo} \n            updateTodoState={updateTodoState}\n            handleEditionMode={handleEditionMode}\n          /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Formulario.jsx</p> <pre><code>import { useState } from \"react\"\nimport Swal from \"sweetalert2\"\n\nconst Formulario = ({addTodo, editionMode, editTodo, todo, setTodo}) =&gt; {\n\nconst {title, description, priority, state} = todo\n\n  const handleSubmit = e =&gt; {     \n     e.preventDefault()\n     if (title.trim() === \"\" || description.trim() === \"\") {\n      return Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"Algo va mal...!\",\n      });\n     } \n\n     addTodo({\n      ...todo,\n      id:Date.now(),\n      state: state == \"completada\"\n     })\n    console.log(`Enviando ${todo.title}, ${todo.description} y ${todo.state} al servidor...`)\n  }\n\n  const handleEdit = e =&gt; {\n    e.preventDefault()\n    editTodo()\n  }\n\n  const handlechange = e =&gt; {\n    const {name, type, checked, value } = e.target\n    setTodo({\n      ...todo,\n    [name]:type === \"checkbox\"? checked:value\n    })\n  }\n\n  return (\n      &lt;div className='col-4'&gt;\n        &lt;h3 className='text-center'&gt;{editionMode ? 'Editar Tarea' : 'Agregar tareas'}&lt;/h3&gt;\n        &lt;form onSubmit={editionMode ? handleEdit : handleSubmit}&gt;\n            &lt;input \n                name=\"title\" \n                placeholder=\"Introduce nombre de la tarea\"\n                type=\"text\" \n                className=\"form-control mb-2\" \n                value = {todo.title}\n                onChange={handlechange}\n            /&gt;\n            &lt;textarea\n                name=\"description\"\n                placeholder=\"Introduce la descripcion\"\n                className=\"form-control mb-2\" \n                value = {todo.description}\n                onChange={handlechange}\n            /&gt;\n            &lt;select \n                name=\"state\" \n                className=\"form-control mb-2\" \n                value = {todo.state} \n                onChange={handlechange}\n            &gt;\n                &lt;option value=\"pendiente\"&gt;Pendiente&lt;/option&gt;\n                &lt;option value=\"completada\"&gt;Completada&lt;/option&gt;\n            &lt;/select&gt;\n\n            &lt;div className=\"form-checked mb-2\"&gt;\n              &lt;input \n                className=\"form-checked-input\"\n                type=\"checkbox\"\n                name=\"priority\"\n                id = \"inputchecked\"\n                checked = {todo.priority}\n                onChange={handlechange}\n              /&gt;\n              &lt;label \n                htmlFor=\"inputchecked\"\n                className=\"form-checked-label\"\n              &gt;\n                Prioridad\n              &lt;/label&gt;\n            &lt;/div&gt;\n            {editionMode ? (\n              &lt;button className='btn btn-warning w-100 mt-2'&gt;\n                Guardar Cambios\n              &lt;/button&gt;\n            ) : (\n              &lt;button className='btn btn-dark w-100 mt-2'&gt;Agregar&lt;/button&gt;\n            )}\n        &lt;/form&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default Formulario\n</code></pre> <p>Todolist.jsx</p> <pre><code>import React from 'react'\nimport  Todo  from './Todo'\n\nconst TodoList = ({todos, deleteTodo, updateTodoState, handleEditionMode}) =&gt; {\n  return (\n    &lt;div className='col-8'&gt;\n    &lt;h3 className='text-center'&gt;Lista de tareas&lt;/h3&gt;\n      &lt;ul&gt;\n        {\n          todos.sort((a,b) =&gt; {\n            return (b.priority - a.priority) - (b.state - a.state)*2\n          })\n          .map(todo=&gt; (\n            &lt; Todo \n              key={todo.id} \n              todo={todo} \n              deleteTodo={deleteTodo} \n              updateTodoState={updateTodoState} \n              handleEditionMode={handleEditionMode} \n            /&gt;\n          ))\n        }\n        {\n          todos.length === 0 &amp;&amp; (\n            &lt;li className='list-group-item text-center'&gt;No hay tareas pendientes&lt;/li&gt;\n          )\n        }\n      &lt;/ul&gt;\n    &lt;/div&gt;\n\n  )\n}\n\nexport default TodoList\n</code></pre> <p>Todo.jsx</p> <pre><code>import React from 'react'\n\nconst Todo = ({todo, deleteTodo, updateTodoState, handleEditionMode}) =&gt; {\n\n  const {id, title, description, priority, state} = todo\n\n  return (\n      &lt;li className='list-group-item'&gt;\n        &lt;div className=\"d-flex justify-content-between align-items-start\"&gt;\n          &lt;div&gt;\n            &lt;h5 className={state ? 'completada' : undefined}&gt; \n              {title}\n            &lt;/h5&gt;\n            &lt;p className={state ? 'completada' : undefined}&gt; \n              {description}\n            &lt;/p&gt;\n            &lt;p className={state ? 'completada' : undefined}&gt; &lt;/p&gt;\n            &lt;div className='d-flex'&gt;\n              &lt;button onClick={() =&gt; deleteTodo(id)} className='btn btn-sm btn-danger mr-2'&gt;Eliminar&lt;/button&gt;\n              &lt;button onClick={() =&gt; handleEditionMode(todo)} className='btn btn-sm btn-warning mr-2'&gt;Editar&lt;/button&gt;\n              &lt;button onClick={() =&gt; updateTodoState(id)} className='btn btn-sm btn-primary'&gt;Actualizar Estado&lt;/button&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;span className=\"badge badge-primary\"&gt;\n            {priority &amp;&amp; \"prioridad\"}\n            &lt;/span&gt;\n        &lt;/div&gt;\n      &lt;/li&gt;\n  )\n}\n\nexport default Todo\n</code></pre>"},{"location":"ud5.7-Todo-App/#deploy","title":"Deploy","text":"<p>Para hacer el deploy en primer lugar generamos los archivos est\u00e1ticos de la aplicaci\u00f3n ejecutando en el terminal del visual code:</p> <pre><code>npm run build\n</code></pre> <p>Una vez ejecutado se nos habr\u00e1 generado una carpeta, dist, en el directorio, que es la que subimos a nuestro hosting.</p>"},{"location":"ud5.8-Drag-and-Drop/","title":"Drag &amp; Drop","text":"<p>En esta secci\u00f3n realizaremos un Drag&amp;Drop, para ello usaremos una librer\u00eda externa. React hello-pangea/dnd es una librer\u00eda que nos permite utilizar drag and drop en React. Esta dise\u00f1ada para ser liviana, r\u00e1pida y f\u00e1cil de usar.</p>"},{"location":"ud5.8-Drag-and-Drop/#recursos","title":"Recursos","text":"<p>En la secci\u00f3n usaremos los siguientes recursos:</p> <ul> <li>hello-pangea/dnd</li> <li>documentaci\u00f3n api</li> <li>freecodecamp tutorial</li> <li>forwarding-refs</li> <li>Tutorial: Yoelvis Mulen { code }</li> </ul>"},{"location":"ud5.8-Drag-and-Drop/#instalacion","title":"Instalaci\u00f3n","text":"<p>Instalamos la librer\u00eda hello-pangea/dnd.</p> <pre><code># npm\nnpm install @hello-pangea/dnd --save\n</code></pre>"},{"location":"ud5.8-Drag-and-Drop/#proyecto-inicial","title":"Proyecto inicial","text":"<p>Para este ejemplo vamos a usar un proyecto de simple, ordenar un array con varias tareas.</p> <p>C\u00f3digo inicial del App.jsx</p> <pre><code>import { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nfunction App() {\n  const initialTodos = [\n    { id: 1, text: \"Aprender React\" },\n    { id: 2, text: \"Aprender Js\" },\n    { id: 3, text: \"Aprender Vue\" },\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1&gt;Drag &amp; Drop&lt;/h1&gt;\n      &lt;ul&gt;\n        {todos.map((todo) =&gt; (\n          &lt;li key={todo.id}&gt;{todo.text}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>index.css</p> <pre><code>li {\n  border: 2px solid rgb(114, 168, 250);\n  padding: 0.5rem;\n}\n\nul {\n  list-style: none;\n  padding: 1rem;\n  border: 2px solid rgb(30, 72, 210);\n}\n</code></pre>"},{"location":"ud5.8-Drag-and-Drop/#importamos-los-componentes-de-la-libreria","title":"Importamos los componentes de la librer\u00eda","text":"<p>Lo primero que tenemos que hacer es importar los componentes que vamos a usar, en este caso:</p> <pre><code>import { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n</code></pre> <p>Estos componentes van a servir para implementar el Drag&amp;Drop:</p> <ul> <li> <p>DragDropContext le dar\u00e1 a nuestra aplicaci\u00f3n la capacidad de usar la librer\u00eda.</p> </li> <li> <p>Droppable es un componente que le permite a la librer\u00eda saber d\u00f3nde se pueden soltar los elementos. Es como un contenedor que puede contener elementos que se pueden arrastrar. Podemos tener una o varias areas hello-pangea/dnd.</p> </li> <li> <p>Draggable es un componente que le permite a la librer\u00eda saber qu\u00e9 elementos se pueden arrastrar.</p> </li> </ul> <p>App.jsx despu\u00e9s de la importaci\u00f3n:</p> <pre><code>import { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nfunction App() {\n  const initialTodos = [\n    { id: 1, text: \"Aprender React\" },\n    { id: 2, text: \"Aprender Js\"},\n    { id: 3, text: \"Aprender Vue\"},\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Drag &amp; Drop&lt;/h1&gt;\n      &lt;ul&gt;\n        {todos.map((todo) =&gt; (\n          &lt;li key={todo.id}&gt;{todo.text}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"ud5.8-Drag-and-Drop/#dragdropcontext","title":"DragDropContext","text":"<p>Ahora ya podemos empezar a trabajar con la librer\u00eda, vamos a utilizar el componente  para envolver la parte de la aplicaci\u00f3n en donde queremos que se habilite arrastrar y soltar (Drag &amp; Drop).</p> <pre><code>import { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nfunction App() {\n  const initialTodos = [\n    { id: 1, text: \"Aprender React\" },\n    { id: 2, text: \"Aprender Js\"},\n    { id: 3, text: \"Aprender Vue\"},\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n\n  return (\n    &lt;DragDropContext&gt;\n      &lt;h1&gt;Drag &amp; Drop&lt;/h1&gt;\n      &lt;ul&gt;\n        {todos.map((todo) =&gt; (\n          &lt;li key={todo.id}&gt;{todo.text}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/DragDropContext&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"ud5.8-Drag-and-Drop/#droppable","title":"Droppable","text":"<p>Ahora necesitamos crear un \u00e1rea Droppable, es decir nos permitir\u00e1 proporcionar un \u00e1rea espec\u00edfica donde nuestros items puedan ser movidos.</p> <pre><code>import { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nfunction App() {\n  const initialTodos = [\n    { id: 1, text: \"Aprender React\" },\n    { id: 2, text: \"Aprender Js\" },\n    { id: 3, text: \"Aprender Vue\" },\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n\n  return (\n    &lt;DragDropContext&gt;\n      &lt;h1&gt;Drag &amp; Drop&lt;/h1&gt;\n      &lt;Droppable droppableId=\"droppable-1\"&gt;\n        {(droppableProvided) =&gt; (\n          &lt;ul\n            ref={droppableProvided.innerRef}\n            {...droppableProvided.droppableProps}\n          &gt;\n            {todos.map((todo) =&gt; (\n              &lt;li key={todo.id}&gt;{todo.text}&lt;/li&gt;\n            ))}\n          &lt;/ul&gt;\n        )}\n      &lt;/Droppable&gt;\n    &lt;/DragDropContext&gt;\n  );\n}\n\nexport default App;\n</code></pre> <ul> <li>droppableId: Es un identificador \u00fanico que se usa para identificar esta instancia espec\u00edfica de Droppable.</li> <li>droppableProvider: Nos permite acceder a la informaci\u00f3n de estado de la librer\u00eda.</li> <li>droppableProvider.innerRef: Esto crear\u00e1 una referencia (provided.innerRef) para que la librer\u00eda acceda al elemento HTML del elemento de la lista.</li> <li>droppableProvider.droppableProps: referencia API</li> </ul>"},{"location":"ud5.8-Drag-and-Drop/#draggable","title":"Draggable","text":"<p>Ahora usaremos el componente Draggable, que nuevamente, similar al componente Droppable, incluir\u00e1 una funci\u00f3n en la que pasaremos los accesorios a los componentes de nuestro elemento de lista.</p> <pre><code>import { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nfunction App() {\n  const initialTodos = [\n    { id: 1, text: \"Aprender React\" },\n    { id: 2, text: \"Aprender Js\" },\n    { id: 3, text: \"Aprender Vue\" },\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n\n  return (\n    &lt;DragDropContext&gt;\n      &lt;h1&gt;Drag &amp; Drop&lt;/h1&gt;\n      &lt;Droppable droppableId=\"droppable-1\"&gt;\n        {(droppableProvided) =&gt; (\n          &lt;ul\n            ref={droppableProvided.innerRef}\n            {...droppableProvided.droppableProps}\n          &gt;\n            {todos.map((todo, index) =&gt; (\n              &lt;Draggable key={todo.id} draggableId={`${todo.id}`} index={index}&gt;\n                {(dragableProvided) =&gt; (\n                  &lt;li\n                    ref={dragableProvided.innerRef}\n                    {...dragableProvided.draggableProps}\n                    {...dragableProvided.dragHandleProps}\n                  &gt;\n                    {todo.text}\n                  &lt;/li&gt;\n                )}\n              &lt;/Draggable&gt;\n            ))}\n          &lt;/ul&gt;\n        )}\n      &lt;/Droppable&gt;\n    &lt;/DragDropContext&gt;\n  );\n}\n\nexport default App;\n</code></pre> <ul> <li>draggableId={todo.id} : Identificador \u00fanico que se usa para identificar esta instancia espec\u00edfica de Draggable.</li> <li>index={index} : Es el \u00edndice de la lista de elementos que se est\u00e1 iterando. Se usa para determinar el orden de los elementos en la lista.</li> <li>draggableProvider.innerRef: Esto crear\u00e1 una referencia ( provided.innerRef) para que la librer\u00eda acceda al elemento HTML del elemento de la lista.</li> <li>draggableProvider.draggableProps y draggableProvider.dragHandleProps: referencia API</li> </ul>"},{"location":"ud5.8-Drag-and-Drop/#droppableproviderplaceholder","title":"droppableProvider.placeholder","text":"<p>Se puede utilizar un espacio reservado para mostrar d\u00f3nde se colocar\u00e1 el elemento cuando se suelta.</p> <pre><code>import { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nfunction App() {\n  const initialTodos = [\n    { id: 1, text: \"Aprender React\" },\n    { id: 2, text: \"Aprender Js\" },\n    { id: 3, text: \"Aprender Vue\" },\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n\n  return (\n    &lt;DragDropContext&gt;\n      &lt;h1&gt;Drag &amp; Drop&lt;/h1&gt;\n      &lt;Droppable droppableId=\"droppable-1\"&gt;\n        {(droppableProvided) =&gt; (\n          &lt;ul\n            ref={droppableProvided.innerRef}\n            {...droppableProvided.droppableProps}\n          &gt;\n            {todos.map((todo, index) =&gt; (\n              &lt;Draggable key={todo.id} draggableId={`${todo.id}`} index={index}&gt;\n                {(dragableProvided) =&gt; (\n                  &lt;li\n                    ref={dragableProvided.innerRef}\n                    {...dragableProvided.draggableProps}\n                    {...dragableProvided.dragHandleProps}\n                  &gt;\n                    {todo.text}\n                  &lt;/li&gt;\n                )}\n              &lt;/Draggable&gt;\n            ))}\n            {droppableProvided.placeholder}\n          &lt;/ul&gt;\n        )}\n      &lt;/Droppable&gt;\n    &lt;/DragDropContext&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"ud5.8-Drag-and-Drop/#reordenar-los-elementos-despues-del-drag-drop","title":"Reordenar los elementos despues del drag &amp; drop","text":"<p>Para resolverlo, podemos ver que DragDropContext toma un props onDragEnd que nos permitir\u00e1 activar una funci\u00f3n despu\u00e9s de que se haya completado el arrastre.</p> <pre><code>    &lt;DragDropContext onDragEnd={handleonDragEnd}&gt;\n</code></pre> <p>Ahora implementamos la funci\u00f3n handleonDragEnd y observamos que nos devuelve, veremos que nos da la posici\u00f3n iniicial y final del elemento movido, con eso podemos ya ordenar el array:</p> <pre><code>  const handleonDragEnd = (result) =&gt; {\n    const { destination, source } = result;\n    if (!destination) return;\n    //console.log(result);\n    const startIndex = source.index;\n    const endIndex = destination.index;\n\n    reorder(startIndex, endIndex);\n  };\n\n  const reorder = (startIndex, endIndex) =&gt; {\n    const result = [...todos];\n    //const removed = result.splice(startIndex, 1);\n    const [removed] = result.splice(startIndex, 1);\n    //console.log(removed);\n    //console.log(result);\n\n    result.splice(endIndex, 0, removed);\n    //console.log(result);\n\n    setTodos(result);\n  };\n</code></pre> <ul> <li>splice js: El m\u00e9todo splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.</li> <li> <p>Sintaxis: array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</p> </li> <li> <p>start: Indice donde se comenzar\u00e1 a cambiar el array.</p> </li> <li>deleteCount: N\u00famero de elementos (enteros) a eliminar, comenzando por start.<ul> <li>Si es 1, se eliminar\u00e1 un elemento.</li> <li>Si es 0, no se eliminar\u00e1n elementos. En este caso, se debe especificarse al menos un nuevo elemento.</li> </ul> </li> <li>item1, item2, ...: Los elementos que se agregar\u00e1n al array. Si no se especifican, splice() solo eliminar\u00e1 elementos del array.</li> </ul>"},{"location":"ud5.8-Drag-and-Drop/#codigo-final","title":"C\u00f3digo final","text":"<pre><code>import { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\n\nfunction App() {\n  const initialTodos = [\n    { id: 1, text: \"Aprender React\" },\n    { id: 2, text: \"Aprender Js\" },\n    { id: 3, text: \"Aprender Vue\" },\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n\n  const handleonDragEnd = (result) =&gt; {\n    const { destination, source } = result;\n    if (!destination) return;\n    const startIndex = source.index;\n    const endIndex = destination.index;\n    reorder(startIndex, endIndex);\n  };\n\n  const reorder = (startIndex, endIndex) =&gt; {\n    const result = [...todos];\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    setTodos(result);\n  };\n\n  return (\n    &lt;DragDropContext onDragEnd={handleonDragEnd}&gt;\n      &lt;h1&gt;Drag &amp; Drop&lt;/h1&gt;\n      &lt;Droppable droppableId=\"droppable-1\"&gt;\n        {(droppableProvided) =&gt; (\n          &lt;ul\n            ref={droppableProvided.innerRef}\n            {...droppableProvided.droppableProps}\n          &gt;\n            {todos.map((todo, index) =&gt; (\n              &lt;Draggable key={todo.id} draggableId={`${todo.id}`} index={index}&gt;\n                {(dragableProvided) =&gt; (\n                  &lt;li\n                    ref={dragableProvided.innerRef}\n                    {...dragableProvided.draggableProps}\n                    {...dragableProvided.dragHandleProps}\n                  &gt;\n                    {todo.text}\n                  &lt;/li&gt;\n                )}\n              &lt;/Draggable&gt;\n            ))}\n            {droppableProvided.placeholder}\n          &lt;/ul&gt;\n        )}\n      &lt;/Droppable&gt;\n    &lt;/DragDropContext&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"ud5.9-useEffect-fetch/","title":"UseEffect","text":"<p>El Hook de efecto nos permite llevar a cabo efectos secundarios en componentes funcionales. Al usar este Hook, le estamos indicando a React que el componente tiene que hacer algo despu\u00e9s de renderizarse. React recordar\u00e1 la funci\u00f3n que le hemos pasado (nos referiremos a ella como nuestro \u201cefecto\u201d), y la llamar\u00e1 cuando se actualice el DOM.</p> <p>\u00bfSe ejecuta useEffect despu\u00e9s de cada renderizado? \u00a1S\u00ed! Por defecto se ejecuta despu\u00e9s del primer renderizado y despu\u00e9s de cada actualizaci\u00f3n.</p> <pre><code>import { useEffect, useState } from \"react\";\n\nconst App = () =&gt; {\n    const [count, setCount] = useState(0);\n\n    useEffect(() =&gt; {\n        console.log(\"App mounted\");\n    });\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect {count}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>\u00bfPor qu\u00e9 veo dos logs?</p> <p>Si ves que se repiten los console logs, es porque est\u00e1 activado strict mode en React. En producci\u00f3n no ocurrir\u00e1. Quiz\u00e1s esyar\u00eda bien desactivarlo en \u00e9sta pr\u00e1ctica para estudiar bien los renderizados y que no sea confuso, pero solo para probar, realmente no dememos hacer una aplicaci\u00f3n en react sin usar el modo estricto.</p> <pre><code>ReactDOM.createRoot(document.getElementById(\"root\")).render(\n      // &lt;React.StrictMode&gt;\n        &lt;App /&gt;\n      // &lt;/React.StrictMode&gt;\n);\n</code></pre> <p>M\u00e1s info stric mode</p> <p>\u00bfC\u00f3mo podemos hacer que useEffect se ejecute solo una vez? Como segundo argumento useEffect acepta un array de dependencias, si le pasamos un array vac\u00edo como segundo argumento ya s\u00f3lo se ejecutar\u00e1 una vez al cargar la p\u00e1gina.</p> <pre><code>useEffect(() =&gt; {\n    console.log(\"App mounted\");\n}, []);\n</code></pre>"},{"location":"ud5.9-useEffect-fetch/#fetch","title":"fetch","text":"<p>Una de los usos m\u00e1s habituales de useEffect es la de hacer peticiones a una API.</p> <pre><code>import { useEffect, useState } from \"react\";\n\nconst App = () =&gt; {\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then((response) =&gt; response.json())\n            .then((data) =&gt; setData(data));\n    }, []);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect&lt;/h1&gt;\n            &lt;ul&gt;\n                {data.map((user) =&gt; (\n                    &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre>"},{"location":"ud5.9-useEffect-fetch/#async-await","title":"async await","text":"<p>Tambi\u00e9n podemos usar async await para hacer peticiones a una API, para ello necesitamos una funci\u00f3n async.</p> <pre><code>useEffect(async () =&gt; {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n\n    const data = await response.json();\n    setData(data);\n}, []);\n</code></pre> <p>\u00a1\u00a1Pero esto nos dar\u00e1 un error!!</p> <p>Parece que escribiste useEffect(async () =&gt; ...) o devolviste una Promesa. En su lugar, escribe la funci\u00f3n as\u00edncrona dentro de tu efecto y ll\u00e1mala inmediatamente. useEffect debe devolver una funci\u00f3n de limpieza o nada.</p> <p>El problema aqu\u00ed es que se supone que el primer argumento de useEffect es una funci\u00f3n que no devuelve nada (undefined) o una funci\u00f3n (para limpiar los efectos secundarios). \u00a1Pero una funci\u00f3n as\u00edncrona devuelve una Promesa, que no se puede llamar como una funci\u00f3n! Simplemente no es lo que el useEffect espera para su primer argumento.</p> <p>M\u00e1s info</p> <p>Soluci\u00f3n:</p> <pre><code>import { useEffect, useState } from \"react\";\n\nconst App = () =&gt; {\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        const fetchData = async () =&gt; {\n            try {\n                const response = await fetch(\n                    \"https://jsonplaceholder.typicode.com/users\"\n                );\n                if (!response.ok) {\n                    throw \"Error al conectar la API\";\n                }\n                const data = await response.json();\n                setData(data);\n            } catch (error) {\n                console.log(error);\n                setData([]);\n            }\n        };\n        fetchData();\n    }, []);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect&lt;/h1&gt;\n            &lt;ul&gt;\n                {data.map((user) =&gt; (\n                    &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre>"},{"location":"ud5.9-useEffect-fetch/#extraer-funcion","title":"Extraer funci\u00f3n","text":"<p>Parece que tiene poco sentido el que llamemos a la funci\u00f3n fetchData autom\u00e1ticamente despues de declararla, vamos a sacar de useEffect la declaraci\u00f3n de la funci\u00f3n useFetch.</p> <pre><code>import { useEffect, useState } from \"react\";\n\nconst App = () =&gt; {\n    const [data, setData] = useState([]);\n\n    const fetchData = async () =&gt; {\n        console.log(\"fetchData\");\n        try {\n            const response = await fetch(\n                \"https://jsonplaceholder.typicode.com/users\"\n            );\n            if (!response.ok) {\n                throw \"Error al conectar la API\";\n            }\n            const data = await response.json();\n            setData(data);\n        } catch (error) {\n            console.log(error);\n            setData([]);\n        }\n    };\n\n    useEffect(() =&gt; {\n        fetchData();\n    }, []);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect&lt;/h1&gt;\n            &lt;ul&gt;\n                {data.map((user) =&gt; (\n                    &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>WARNING. Pero, ahora nos encontramos con un problema. Si os fij\u00e1is, ahora cada vez que un componente se renderize se crear\u00e1 la funci\u00f3n fetchData. Ojo, no se va a ejecutar porque la llamada est\u00e1 dentro del useEffect, pero si se va a cargar en memoria una y otra vez. Si no queremos que se cree cada vez, podemos usar useCallback.</p> <p>Poniendo un console.log en el fetchData podemos comprobar el problema que acabamos de mencionar:</p> <pre><code>import { useEffect, useState } from \"react\";\n\nconst App = () =&gt; {\n    console.log(\"App\");\n\n    const [data, setData] = useState([]);\n    const [counter, setCounter] = useState(0);\n\n    const fetchData = async () =&gt; {\n        console.log(\"fetchData\");\n        try {\n            const response = await fetch(\n                \"https://jsonplaceholder.typicode.com/users\"\n            );\n            if (!response.ok) {\n                throw \"Error al conectar la API\";\n            }\n            const data = await response.json();\n            setData(data);\n        } catch (error) {\n            console.log(error);\n            setData([]);\n        }\n    };\n\n    useEffect(() =&gt; {\n        fetchData();\n    }, []);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;\n                Increment {counter}\n            &lt;/button&gt;\n            &lt;ul&gt;\n                {data.map((user) =&gt; (\n                    &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>Si bien esto no es un problema en nuestra aplicaci\u00f3n, es peque\u00f1a, si lo ser\u00e1 en una aplicaci\u00f3n grande.</p>"},{"location":"ud5.9-useEffect-fetch/#usecallback","title":"useCallBack","text":"<p>useCallback es un hook que nos permite memorizar una funci\u00f3n. Esto quiere decir que si la funci\u00f3n que le pasamos como argumento no ha cambiado, useCallback no la volver\u00e1 a crear.</p> <p>Necesitas pasar dos cosas a useCallback:</p> <ul> <li>Una definici\u00f3n de funci\u00f3n que desea almacenar en cach\u00e9.</li> <li>Una lista de dependencias.</li> </ul> <pre><code>import { useEffect, useState, useCallback } from \"react\";\n\nconst App = () =&gt; {\n    const [data, setData] = useState([]);\n\n    const fetchData = useCallback(async () =&gt; {\n        console.log(\"fetchData\");\n        try {\n            const response = await fetch(\n                \"https://jsonplaceholder.typicode.com/users\"\n            );\n            if (!response.ok) {\n                throw \"Error al conectar la API\";\n            }\n            const data = await response.json();\n            setData(data);\n        } catch (error) {\n            console.log(error);\n            setData([]);\n        }\n    }, []);\n\n    useEffect(() =&gt; {\n        fetchData();\n    }, [fetchData]);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect&lt;/h1&gt;\n            &lt;ul&gt;\n                {data.map((user) =&gt; (\n                    &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>Otra soluci\u00f3n:</p> <pre><code>import { useEffect, useState } from \"react\";\n\nconst fetchData = async (setData) =&gt; {\n    console.log(\"fetchData\");\n    try {\n        const response = await fetch(\n            \"https://jsonplaceholder.typicode.com/users\"\n        );\n        if (!response.ok) {\n            throw \"Error al conectar la API\";\n        }\n        const data = await response.json();\n        setData(data);\n    } catch (error) {\n        console.log(error);\n        setData([]);\n    }\n};\n\nconst App = () =&gt; {\n    console.log(\"App\");\n\n    const [data, setData] = useState([]);\n    const [counter, setCounter] = useState(0);\n\n    useEffect(() =&gt; {\n        fetchData(setData);\n    }, []);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;\n                Increment {counter}\n            &lt;/button&gt;\n            &lt;ul&gt;\n                {data.map((user) =&gt; (\n                    &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>En mi opini\u00f3n, esta segunda soluci\u00f3n no es muy adecuada, ya que pe perdemos la reusabilidad del componente. Lo cual, entre otras cosas, es uno de los fundamentos de React.</p>"},{"location":"ud5.9-useEffect-fetch/#custom-react-hook","title":"custom react hook","text":"<p>Con el objetivo de poder reutilizar la llamada a la API cuantas veces sea necesario, lo ideal ser\u00eda que la llev\u00e1ramos a un custom react hook. </p> <p>useFetch.jsx</p> <pre><code>import { useCallback, useEffect, useState } from \"react\";\n\nexport const useFetch = (url) =&gt; {\n    console.log(\"useFetch\");\n\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const getData = useCallback(async () =&gt; {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(\"Error fetching data\");\n            }\n            const data = await response.json();\n            setData(data);\n        } catch (error) {\n            setError(error.message);\n        } finally {\n            setLoading(false);\n        }\n    }, [url]);\n\n    useEffect(() =&gt; {\n        getData();\n    }, [getData]);\n\n    return { data, loading, error };\n};\n</code></pre> <p>App.jsx</p> <pre><code>import { useState } from \"react\";\nimport { useFetch } from \"./hooks/useFetch\";\n\nconst App = () =&gt; {\n    const [counter, setCounter] = useState(0);\n\n    const { data, loading, error } = useFetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n    );\n\n    if (loading) {\n        return &lt;h1&gt;Loading...&lt;/h1&gt;;\n    }\n\n    if (error) {\n        return &lt;h1&gt;{error}&lt;/h1&gt;;\n    }\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;useEffect&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;\n                Increment {counter}\n            &lt;/button&gt;\n            &lt;ul&gt;\n                {data.map((user) =&gt; (\n                    &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;\n                ))}\n            &lt;/ul&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default App;\n</code></pre>"},{"location":"ud5.9-useEffect-fetch/#recursos","title":"Recursos","text":"<ul> <li>{JSON} Placeholder (Free fake API for testing and prototyping)</li> <li>useEffect</li> <li>useCallback</li> <li>coffeebytes</li> <li>devtrium</li> <li>stackoverflow</li> </ul>"},{"location":"ud5/","title":"UD5 - React.js","text":"<p>React es sin duda una de las tecnolog\u00edas web m\u00e1s revolucionarias de la actualidad, fue lanzado por primera vez en 2013 por Facebook y es actualmente mantenido por ellos mismo y la comunidad de c\u00f3digo abierto, la cual se extiende alrededor del mundo.</p> <p>React, a diferencia de muchas tecnolog\u00edas del desarrollo web, es una librer\u00eda lo que lo hace mucho m\u00e1s f\u00e1cil de implementar en muchos desarrollos, ya que se encarga exclusivamente de la interfaz gr\u00e1fica del usuario y consume los datos a trav\u00e9s de API que por lo general son REST.</p> <p>El nombre de React proviene de su capacidad de crear interfaces de usuario reactivas, la cual es la capacidad de una aplicaci\u00f3n para actualizar toda la interfaz gr\u00e1fica en cadena, como si se tratara de una f\u00f3rmula en Excel, donde al cambiar el valor de una celda autom\u00e1ticamente actualiza todas las celdas que depende del valor actualizado y esto se repite con las celdas que a la vez depend\u00eda de estas \u00faltimas.</p>"},{"location":"ud5/#como-funciona-react","title":"C\u00f3mo funciona React","text":"<p>React nos permite crear la interfaz UI mediante una sintaxis propia llamada Javascript XML (JSX) el cual es una mezcla entre XML y HTML que permite la construcci\u00f3n de elementos HTML de una forma muy simple y r\u00e1pida.</p> <p>Las aplicaciones desarrolladas mediante JSX no pueden ser interpretadas por el navegador, por lo que es requerido que todo el c\u00f3digo sea convertido a Javascript nativo mediante un proceso llamado transpilaci\u00f3n, el cual es parecido a la compilaci\u00f3n, pero en este proceso no se lleva a cabo una compilaci\u00f3n como tal, sino que el c\u00f3digo es convertido de JSX a Javascript.</p> <p>Este proceso es llevado a cabo mediante herramientas como Webpack el cual es el m\u00e1s ampliamente utilizado.</p> <p> </p> <p>Como vemos en la imagen, Webpack es en realidad un empaquetador, el cual organiza, compacta y mediante plugins como Babel realiza la transpilaci\u00f3n, arrojando como resultado una serie de archivos compactos y listos para ser utilizados.</p>"},{"location":"ud5/#react-y-el-backend","title":"React y el Backend","text":"<p>React solo sirve para la creaci\u00f3n de interfaz gr\u00e1fica, por lo que el desarrollo del backend queda fuera de React y es precisamente eso lo que lo hace una librer\u00eda super portable, ya que la podemos integrar con cualquier API ya desarrollada.</p> <p>C\u00f3mo React no es capaz de resolver la parte del backend es necesario desarrollar el API de datos mediante otras tecnolog\u00edas como NodeJS, el cual es por lo general el servidor m\u00e1s utilizado para el desarrollo con React.</p> <p>El API es consumido mediante AJAX a medida que la aplicaci\u00f3n lo demanda.</p> <p> </p>"},{"location":"ud5/#react-y-web-components","title":"React y Web Components","text":"<p>React utiliza un concepto llamado Web Componentes, el cual es la creaci\u00f3n de tus propias etiquetas de HTML para representar tus componentes. Te imaginas crear un login en tu p\u00e1gina utilizando una etiqueta como esta &lt;login&gt;, pues esta forma de trabajar es la que propone React, donde todo lo que desarrollemos sean componentes que puedan ser reutilizables cuantas veces queramos, incluso podr\u00e1n ser empaquetadas como librer\u00edas para que las utilices en diferentes desarrollos. Esto lo puedes ver como si cada componente fuera una peque\u00f1a caja, y lo \u00fanico que tenemos que hacer es colocar las cajas donde la necesitemos.</p> <p> </p> <p>Como podemos ver en la imagen, cada parte de la aplicaci\u00f3n puede ser un componente (etiqueta) el cual solo se tiene que agregar a la p\u00e1gina para crear interfaces gr\u00e1ficas mucho m\u00e1s r\u00e1pido. Ahora veamos c\u00f3mo quedar\u00eda esta misma p\u00e1gina, pero en c\u00f3digo con React:</p> <pre><code>import React from 'react'\nimport NavBar from './NavBar'\nimport Login from './Login'\nimport Footer from './Footer'\nclass LoginApp extends React.Component{\n  render(){\n    return(\n    &lt;div&gt;\n        &lt;NavBar/&gt;\n        &lt;Login/&gt;\n        &lt;Footer/&gt;\n    &lt;/div&gt;\n    )\n  }\n}\n</code></pre> <p>Observemos que estamos utilizando las etiquetas como NavBar y Login,  las cuales no son propias de HTML.</p>"},{"location":"ud5/#react-y-el-shadow-dom","title":"React y el Shadow DOM","text":"<p>Como se ha comentado anteriormente, React se ejecuta del lado de cliente, por lo que es esta misma la encargada de actualizar el DOM a medida que el usuario interact\u00faa con la UI, sin embargo, el proceso de actualizaci\u00f3n del DOM es un trabajo muy costoso para el navegador, por lo que actualizar el DOM cada vez que el usuario realiza una acci\u00f3n, no es una opci\u00f3n, es por esto que React provee un DOM propio llamado Shadow DOM el cual es una versi\u00f3n del DOM sobre la cual React trabaja para realizar los cambios, y una vez que calcula todos los cambios que hay que realizar es solo entonces cuando actualiza el DOM del navegador. </p> <p>Este proceso es en realidad muy complejo y React se encarga por completo de su gesti\u00f3n, por lo que como programadores no hace falta preocuparnos por estos detalles en la mayor\u00eda de las veces.</p> <p> </p> <p>Cuando se realiza un cambio en el Shadow DOM, este se sincroniza con el DOM original y es necesario realizar un proceso llamado reconciliaci\u00f3n, el cual es el encargado de aplicar los cambios del Shadow DOM al DOM real.</p> <p> </p>"},{"location":"ud5/#react-y-los-estados","title":"React y los Estados","text":"<p>Una de las principales caracter\u00edsticas de React es que los componentes pueden mantener estados. Los estados le indican los datos que el componente muestra, e incluso el formato en se muestran.</p> <p>Por ejemplo, podemos tener un formulario, el cual tenga los estados de solo lectura y edici\u00f3n, en el primero, solo mostraremos los datos en texto plano, como un &lt;p&gt; o un &lt;span&gt; mientras que cuando el formulario est\u00e1 en estado de edici\u00f3n, podemos representar el formulario con &lt;imput type=\u201dtext\u201d /&gt;</p> <p>Cuando un componente por alguna raz\u00f3n modifica su estado, entra en lo que se le conoce como Dirty o Sucio, y esto le indica a React que debe de haber un proceso de reconciliaci\u00f3n para actualizar los datos en la UI. Como ya hablamos en hace un momento, React utiliza programaci\u00f3n Reactiva para actualizar los componentes, de tal forma, que cuando un componente es actualizado, todos los componentes hijos del \u00e1rbol DOM ser\u00e1n evaluados para determinar si deben de ser tambi\u00e9n actualizados.</p> <p> </p> <p>En la imagen podemos apreciar en rojo, los componentes que fueron actualizados por el usuario, por lo que React deber\u00e1 iniciar el proceso dereconciliaci\u00f3n para estos componentes, pero adicional, si este componente tiene componentes hijos, React deber\u00e1 determinar si los hijos necesitan ser tambi\u00e9n actualizados en cascada, a \u00e9ste proceso es a lo que se le conoce como programaci\u00f3n Reactiva.</p>"},{"location":"ud5/#deploy-de-react","title":"Deploy de React","text":"<p>Finalmente, React tiene una forma muy particular de ser cargado por el navegador, pues cuando el usuario entra a la p\u00e1gina, est\u00e1 solo tiene un elemento, sobre el cual react montar\u00e1 toda la aplicaci\u00f3n.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"/bundle.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Adicional del elemento root, se carga un JavaScript llamado bundle.js el cual es en realidad TODA LA APLICACI\u00d3N en un solo archivo, el cual es generado por Webpack tras ejecutar el proceso de transpilaci\u00f3n. Cuando el bundle.js se carga por completo, reemplaza el componente root por la aplicaci\u00f3n desarrollada en React.</p>"},{"location":"ud6/","title":"UD6 - MERN Stack","text":""},{"location":"ud7/","title":"UD7 - eCommerce Platform","text":""},{"location":"ud8.1-Paso-a-paso/","title":"Paso a paso con Vue","text":"<p>En la documentaci\u00f3n oficial de Vue encontraremos toda la informaci\u00f3n del framework, y adem\u00e1s, algunos recursos muy interesantes.</p> <p>Vamos a comenzar a trabajar revisando uno de los recursos de obligada visita, su ruta de aprendizaje:</p> <ul> <li> <p>Leer la guia. La gu\u00eda lo gu\u00eda a trav\u00e9s de cada aspecto del marco con todo detalle.</p> </li> <li> <p>Tutorial. Para aquellos que prefieren aprender las cosas de forma pr\u00e1ctica.</p> </li> <li> <p>Mira los ejemplos. Explora ejemplos de funciones principales y tareas comunes de la interfaz de usuario.</p> </li> </ul> <p>Diferentes desarrolladores tienen diferentes estilos de aprendizaje. Si\u00e9ntete libre de elegir una ruta de aprendizaje que se adapte a tus preferencias, \u00a1aunque se recomienda revisar todo el contenido!</p>"},{"location":"ud8.1-Paso-a-paso/#referencias","title":"Referencias","text":"<p>Material elaborado por Vue.js.</p>"},{"location":"ud8.10-Vue-con-Firebase/","title":"Vue con Firebase","text":""},{"location":"ud8.11-Refuerzo/","title":"Material de Refuerzo","text":"<p>Como material de refuerzo de \u00e9sta unidad, se propone la realizaci\u00f3n de varios cursos de Vue en formato video. En estos cursos se revisan los fundamentos de Vue, componentes y Vue router.</p>"},{"location":"ud8.11-Refuerzo/#enlace-a-los-cursos","title":"Enlace a los cursos","text":"<ul> <li> <p>Vue.js 3 Fundamentals</p> </li> <li> <p>Componentes en Vue desde cero</p> </li> <li> <p>Aprende a enrutar con Vue Router</p> </li> </ul>"},{"location":"ud8.12-Ampliacion/","title":"Material de Ampliaci\u00f3n","text":"<p>Como material de ampliaci\u00f3n de \u00e9sta unidad, se propone la realizaci\u00f3n de uno de los retos de Frontend Mentor.</p> <p>\u00a1La cl\u00e1sica aplicaci\u00f3n de tareas pendientes con algunos cambios! Esta aplicaci\u00f3n incluye un cambio de tema oscuro/claro y un reordenamiento de arrastrar y soltar para cualquiera que desee una prueba adicional.</p>"},{"location":"ud8.12-Ampliacion/#enlace-al-reto","title":"Enlace al reto","text":"<ul> <li>Aplicaci\u00f3n todo</li> </ul>"},{"location":"ud8.2-Fundamentos-Vue/","title":"Fundamentos Vue","text":""},{"location":"ud8.2-Fundamentos-Vue/#usando-vue-desde-cdn","title":"Usando Vue desde CDN","text":"<p>Antes de crear nuestras SPA con Vue vamos a revisar algunos de sus aspectos fundamentales. Para ello vamos a usar Vue directamente desde un CDN, incorporemos el siguiente enlace a nuestro HTML:</p> <pre><code>  &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n</code></pre> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Cuando se usa Vue desde un CDN, no hay un \"paso de compilaci\u00f3n\" involucrado. Esto hace que la configuraci\u00f3n sea mucho m\u00e1s simple y es adecuado para mejorar HTML est\u00e1tico o integrarse con un marco de back-end. Sin embargo, no podr\u00e1 utilizar la sintaxis de componente de archivo \u00fanico (SFC).</p>"},{"location":"ud8.2-Fundamentos-Vue/#la-instancia-de-la-aplicacion","title":"La instancia de la aplicaci\u00f3n","text":"<p>Cada aplicaci\u00f3n de Vue comienza creando una nueva instancia de aplicaci\u00f3n con la createAppfunci\u00f3n:</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n  /* root component options */\n})\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#montaje-de-la-aplicacion","title":"Montaje de la aplicaci\u00f3n","text":"<p>Una instancia de aplicaci\u00f3n no renderizar\u00e1 nada hasta que se llame a su m\u00e9todo .mount(). Espera un argumento \"contenedor\", que puede ser un elemento DOM real o una cadena de selecci\u00f3n:</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n  /* root component options */\n})\n\napp.mount('#myApp')\n\n</code></pre> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;!-- Control absoluto de este DIV --&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>El contenido del componente ra\u00edz de la aplicaci\u00f3n se representar\u00e1 dentro del elemento contenedor myApp. El elemento contenedor en s\u00ed no se considera parte de la aplicaci\u00f3n.</p>"},{"location":"ud8.2-Fundamentos-Vue/#sintaxis-de-plantilla","title":"Sintaxis de plantilla","text":"<p>Vue utiliza una sintaxis de plantilla basada en HTML que le permite vincular declarativamente el DOM. Vue compila las plantillas en un c\u00f3digo JavaScript altamente optimizado Combinado con la reactividad, Vue es capaz de calcular la cantidad m\u00ednima de componentes a renderizar y aplicar la cantidad m\u00ednima de manipulaciones en el DOM.</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n    template: `\n    &lt;h1&gt; Hola Vue3 &lt;/h1&gt;\n    &lt;p&gt; Desde app.js &lt;/p&gt;\n    `\n})\n\napp.mount('#myApp')\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#interpolacion-de-texto","title":"Interpolaci\u00f3n de texto","text":"<p>La interpolaci\u00f3n de texto (bigote o llaves dobles) es una forma de insertar valores en una plantilla.</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n    template: `\n    &lt;h1&gt; Hola Vue3 &lt;/h1&gt;\n    &lt;p&gt; {{ 1+ 1 }} &lt;/p&gt;\n    `\n})\n\napp.mount('#myApp')\n</code></pre> <p>Igualmente podemos usar la interpolaci\u00f3n en nuestro archivo HTML directamente, el siguiente c\u00f3digo nos dar\u00eda la misma salida que el anterior:</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n    // template: `\n    // &lt;h1&gt; Hola Vue3 &lt;/h1&gt;\n    // &lt;p&gt; {{ 1+ 1 }} &lt;/p&gt;\n    `\n})\n\napp.mount('#myApp')\n</code></pre> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;!-- Control absoluto de este DIV --&gt;\n        &lt;h1&gt; Hola Vue3 &lt;/h1&gt;\n        &lt;p&gt; {{ 1+ 1 }} &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En la interpolaci\u00f3n o renderarizaci\u00f3n declarativa podemos usar expresiones de javascript, pero no todas son validas. Por ejemplo, no podemos usar, if, for, while...</p>"},{"location":"ud8.2-Fundamentos-Vue/#declaracion-de-estado-reactivo","title":"Declaraci\u00f3n de estado reactivo","text":"<p>Con la API de opciones, usamos la opci\u00f3n data para declarar el estado reactivo de un componente.</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n data() {\n    return {\n      message: \"I'm Batman\",\n    }\n  },\n})\n\napp.mount('#myApp')\n</code></pre> <p>Ese message que hemos declarado podemos ahora usarlo en nuestro HTML..</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt; Hola Vue3 &lt;/h1&gt;\n        &lt;p&gt; {{ message }} &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Cada vez que cambie el valor de message, Vue se encargar\u00e1 de pintar los cambios en el HTML.</p> <p>Podemos crear las propiedades que necesitemos:</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n  data() {\n    return {\n      quote: \"I'm Batman\",\n      author: 'Bruce Wayne',\n    }\n  }\n})\n\napp.mount('#myApp')\n</code></pre> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n      &lt;h3&gt;{{ quote }}&lt;/h3&gt;\n      &lt;blockquote&gt;-{{ author }}&lt;/blockquote&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#directivas-de-vue","title":"Directivas de Vue","text":"<p>Las directivas de Vue son atributos especiales que se colocan en las etiquetas HTML y est\u00e1n prefijados por v-, como por ejemplo, v-for, v-bind o v-on, entre muchas otras. Estas directivas permiten realizar acciones din\u00e1micas potentes (bucles, condicionales, etc...) que no se pueden realizar en HTML por si solo.</p> <p> </p>"},{"location":"ud8.2-Fundamentos-Vue/#manejo-de-eventos","title":"Manejo de eventos","text":"<p>Para escuhar eventos DOM y ejecutar JavaScript cuando se activan podemos usar la directiva v-on, que normalmente acortamos al s\u00edmbolo @.</p> <p>El uso ser\u00eda v-on:click=\"handler\" o con el atajo, @click=\"handler\".</p> <p>Partiendo del c\u00f3digo del ejemplo anterior vamos a implementar un bot\u00f3n que al hacer click en el mismo cambiemos el author de la quote.</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n      &lt;h3&gt;{{ quote }}&lt;/h3&gt;\n      &lt;blockquote&gt;-{{ author }}&lt;/blockquote&gt;\n      &lt;button v-on:click=\"changeQuote\"&gt;Change quote&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ya tenemos un bot\u00f3n que al hacer cick en el va a llamar a una funci\u00f3n changeQuote, ahora implementamos dicha funci\u00f3n o m\u00e9todo en nuestro app.js.</p> <p>app.js</p> <pre><code>const app = Vue.createApp({\n  data() {\n    return {\n      quote: \"I'm Batman\",\n      author: 'Bruce Wayne',\n    }\n  },\n  methods: {\n    changeQuote() {\n      console.log('Hola desde changeQuote')\n      this.author = 'Manuel Rivas'\n    }\n  }\n})\n\napp.mount('#myApp')\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#directiva-v-for","title":"Directiva v-for","text":"<p>La directiva v-for se usa para iterar sobre una lista de elementos. Para que Vue pueda rastrear la identidad de cada nodo y, por lo tanto, reutilizar y reordenar los elementos existentes, tenemos que proporcionar un atributo key \u00fanico para cada elemento.</p> <p>Para este ejemplo vamos a utilizar una lista de quotes que vamos a colocar en nuestro archivo app.js:</p> <p>app.js</p> <pre><code>const quotes = [\n  {\n    quote:\n      'The night is darkest just before the dawn. And I promise you, the dawn is coming.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'I believe what doesn\u2019t kill you simply makes you, stranger.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote:\n      'Your anger gives you great power. But if you let it, it will destroy you\u2026 As it almost did me',\n    author: 'Henri Ducard, Batman Begins',\n  },\n  {\n    quote:\n      'You either die a hero or live long enough to see yourself become the villain.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'If you\u2019re good at something, never do it for free.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote: 'Yes, father. I shall become a bat.',\n    author: 'Bruce Wayne/Batman, Batman: Year One',\n  },\n]\n\nconst app = Vue.createApp({\n  data() {\n    return {\n\n    }\n  },\n})\n\napp.mount('#myApp')\n\n</code></pre> <p>Para que estan quotes entren a formar parte de la reactividad de Vue, tenemos que, de alguna manera, pasarselas a nuestra app vue:</p> <p>app.js</p> <pre><code>const quotes = [\n  {\n    quote:\n      'The night is darkest just before the dawn. And I promise you, the dawn is coming.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'I believe what doesn\u2019t kill you simply makes you, stranger.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote:\n      'Your anger gives you great power. But if you let it, it will destroy you\u2026 As it almost did me',\n    author: 'Henri Ducard, Batman Begins',\n  },\n  {\n    quote:\n      'You either die a hero or live long enough to see yourself become the villain.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'If you\u2019re good at something, never do it for free.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote: 'Yes, father. I shall become a bat.',\n    author: 'Bruce Wayne/Batman, Batman: Year One',\n  },\n]\n\nconst app = Vue.createApp({\n  data() {\n    return {\n        quotes:quotes\n    }\n  },\n})\n\napp.mount('#myApp')\n\n</code></pre> <p>De esta manera ya podr\u00edamos reenderizar el elemento en el HTML.</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes&lt;/h1&gt;\n        &lt;hr&gt;\n        {{ quotes }}\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ahora, haciendo uso de la directiva v-for, vamos a recorrer la lista y a pintarla por pantalla.</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes&lt;/h1&gt;\n        &lt;hr&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"({ quote, author }, index) in quotes\"&gt;\n                &lt;span&gt;{{ index + 1 }} - {{ quote }}&lt;/span&gt;\n                &lt;blockquote&gt;-{{ author }}&lt;/blockquote&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>A continuaci\u00f3n vamos a poner un input que nos permita escribir algo y al presionar intro poder crear un nuevo quote, utilizaremos para ello la directiva v-model.</p>"},{"location":"ud8.2-Fundamentos-Vue/#directiva-v-model","title":"Directiva v-model","text":"<p>v-model se puede utilizar en un componente para implementar un enlace bidireccional.</p> <p>En primer lugar vamos a crearnos una nueva propiedad reactiva, newQuote, para posteriormente almacenar el contenido del input. Tambien vamos a implementar el input en el html.</p> <p>app.js</p> <pre><code>const quotes = [\n  {\n    quote:\n      'The night is darkest just before the dawn. And I promise you, the dawn is coming.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'I believe what doesn\u2019t kill you simply makes you, stranger.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote:\n      'Your anger gives you great power. But if you let it, it will destroy you\u2026 As it almost did me',\n    author: 'Henri Ducard, Batman Begins',\n  },\n  {\n    quote:\n      'You either die a hero or live long enough to see yourself become the villain.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'If you\u2019re good at something, never do it for free.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote: 'Yes, father. I shall become a bat.',\n    author: 'Bruce Wayne/Batman, Batman: Year One',\n  },\n]\n\nconst app = Vue.createApp({\n  data() {\n    return {\n        quotes:quotes,\n        newQuote: 'Hola mundo',\n    }\n  },\n})\n\napp.mount('#myApp')\n</code></pre> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes&lt;/h1&gt;\n        &lt;input type=\"text\"&gt;\n        &lt;hr&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"({ quote, author }, index) in quotes\"&gt;\n                &lt;span&gt;{{ index + 1 }} - {{ quote }}&lt;/span&gt;\n                &lt;blockquote&gt;-{{ author }}&lt;/blockquote&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ya lo tenemos preparado, pero no hay ninguna relaci\u00f3n ente el input y la propiedad que hemos creado, para ello vamos a usar la directiva v-model.</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes  &lt;small&gt;{{ newQuote }}&lt;/small&gt; &lt;/h1&gt;\n        &lt;input\n          type=\"text\"\n          v-model=\"newQuote\"&gt;\n        &lt;hr&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"({ quote, author }, index) in quotes\"&gt;\n                &lt;span&gt;{{ index + 1 }} - {{ quote }}&lt;/span&gt;\n                &lt;blockquote&gt;-{{ author }}&lt;/blockquote&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Estamos pintando newQuote dentro de una etiqueta span para comprobar que efectivamente est\u00e1 funcionando. Ahora volvemos a utilizar la directiva v-on para escuchar el evento intro y a\u00f1adir el nuevo quote a las ya existentes.</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n    &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes  &lt;small&gt;{{ newQuote }}&lt;/small&gt; &lt;/h1&gt;\n        &lt;input\n          type=\"text\"\n          v-model=\"newQuote\"\n          v-on:keypress=\"addQuote\"&gt;\n        &lt;hr&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"({ quote, author }, index) in quotes\"&gt;\n                &lt;span&gt;{{ index + 1 }} - {{ quote }}&lt;/span&gt;\n                &lt;blockquote&gt;-{{ author }}&lt;/blockquote&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ahora tenemos que implementar ese nuevo m\u00e9todo addQuote, para que al presionar intro, a\u00f1ada la nueva quote.</p> <p>app.js</p> <pre><code>const quotes = [\n  {\n    quote:\n      'The night is darkest just before the dawn. And I promise you, the dawn is coming.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'I believe what doesn\u2019t kill you simply makes you, stranger.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote:\n      'Your anger gives you great power. But if you let it, it will destroy you\u2026 As it almost did me',\n    author: 'Henri Ducard, Batman Begins',\n  },\n  {\n    quote:\n      'You either die a hero or live long enough to see yourself become the villain.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'If you\u2019re good at something, never do it for free.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote: 'Yes, father. I shall become a bat.',\n    author: 'Bruce Wayne/Batman, Batman: Year One',\n  },\n]\n\nconst app = Vue.createApp({\n  data() {\n    return {\n      quotes,\n      newQuote: 'Hola mundo',\n    }\n  },\n  methods: {\n    addQuote(e) {\n        console.log(e)\n        if (e.charCode !== 13) return\n        this.quotes.unshift({\n            quote: this.newQuote,\n        })\n    },\n  },\n})\n\napp.mount('#myApp')\n</code></pre> <p>Nuesto c\u00f3digo ya cumple con nuestro objetivo, pero es mejorable, podemos usar los modificadores de eventos de vue.</p>"},{"location":"ud8.2-Fundamentos-Vue/#modificadores-de-eventos","title":"Modificadores de eventos","text":"<p>Hay ciertos eventos que se usan con asiduidad, por ejemplo event.preventDefault(), para evitar tener que lidiar con detalles de eventos DOM Vue proporciona una serie de modificadores de eventos para v-on. Estos modificadores son sufijos de directiva indicados por un punto.</p> <p>En esta ocasi\u00f3n vamos a usar un modificador para mejorar el c\u00f3digo anterior.</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n    &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes  &lt;small&gt;{{ newQuote }}&lt;/small&gt; &lt;/h1&gt;\n        &lt;input\n          type=\"text\"\n          v-model=\"newQuote\"\n          v-on:keypress.enter=\"addQuote\"&gt;\n        &lt;hr&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"({ quote, author }, index) in quotes\"&gt;\n                &lt;span&gt;{{ index + 1 }} - {{ quote }}&lt;/span&gt;\n                &lt;blockquote&gt;-{{ author }}&lt;/blockquote&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>app.js</p> <pre><code>const quotes = [\n  {\n    quote:\n      'The night is darkest just before the dawn. And I promise you, the dawn is coming.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'I believe what doesn\u2019t kill you simply makes you, stranger.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote:\n      'Your anger gives you great power. But if you let it, it will destroy you\u2026 As it almost did me',\n    author: 'Henri Ducard, Batman Begins',\n  },\n  {\n    quote:\n      'You either die a hero or live long enough to see yourself become the villain.',\n    author: 'Harvey Dent, The Dark Knight',\n  },\n  {\n    quote: 'If you\u2019re good at something, never do it for free.',\n    author: 'The Joker, The Dark Knight',\n  },\n  {\n    quote: 'Yes, father. I shall become a bat.',\n    author: 'Bruce Wayne/Batman, Batman: Year One',\n  },\n]\n\nconst app = Vue.createApp({\n  data() {\n    return {\n      quotes,\n      newQuote: 'Hola mundo',\n    }\n  },\n  methods: {\n    addQuote() {\n      this.quotes.unshift({\n        quote: this.newQuote,\n      })\n    },\n  },\n})\n\napp.mount('#myApp')\n</code></pre> <p>En la siguiente imagen podemos ver que si ejecutamos la aplicaci\u00f3n ya podemos insertar nuevas quotes, pero queda algo raro, pinta el - del campo author aunque no tenga contenido.</p> <p> </p> <p>Vamos a solucionarlo utilizando una nueva directiva, v-if.</p>"},{"location":"ud8.2-Fundamentos-Vue/#directiva-v-if","title":"Directiva v-if","text":"<p>La directiva v-if se usa para renderizar condicionalmente un bloque. El bloque solo se representar\u00e1 si la expresi\u00f3n de la directiva devuelve un valor verdadero.</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes  &lt;small&gt;{{ newQuote }}&lt;/small&gt; &lt;/h1&gt;\n        &lt;input\n          type=\"text\"\n          v-model=\"newQuote\"\n          v-on:keypress.enter=\"addQuote\"&gt;\n        &lt;hr&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"({ quote, author }, index) in quotes\"&gt;\n                &lt;span&gt;{{ index + 1 }} - {{ quote }}&lt;/span&gt;\n                &lt;blockquote v-if=\"author\"&gt;-{{ author }}&lt;/blockquote&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#directiva-v-show","title":"Directiva v-show","text":"<p>Otra opci\u00f3n para mostrar condicionalmente un elemento es la directiva v-show. El uso es b\u00e1sicamente el mismo:</p> <p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue.js Intro&lt;/title&gt;\n      &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n        &lt;h1&gt;Batman quotes  &lt;small&gt;{{ newQuote }}&lt;/small&gt; &lt;/h1&gt;\n        &lt;input\n          type=\"text\"\n          v-model=\"newQuote\"\n          v-on:keypress.enter=\"addQuote\"&gt;\n        &lt;hr&gt;\n        &lt;ul&gt;\n            &lt;li v-for=\"({ quote, author }, index) in quotes\"&gt;\n                &lt;span&gt;{{ index + 1 }} - {{ quote }}&lt;/span&gt;\n                &lt;blockquote v-show=\"author\"&gt;- {{author}}&lt;/blockquote&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>La diferencia es que un elemento con v-show siempre se renderizar\u00e1 y permanecer\u00e1 en el DOM; v-show solo cambia la propiedad display del CSS del elemento.</p> <p>En base a eso, podemos decir que v-if tiene costos de alternancia m\u00e1s altos mientras que v-show tiene costos de renderizaci\u00f3n inicial m\u00e1s altos. As\u00ed que mejor usar v-show si necesitas alternar algo con mucha frecuencia, y mejor v-if si es poco probable que la condici\u00f3n cambie en el tiempo de ejecuci\u00f3n.</p>"},{"location":"ud8.2-Fundamentos-Vue/#v-if-con-v-for","title":"v-if con v-for","text":"<p>La gu\u00eda de vue no recomienda usar v-if y v-for en el mismo elemento debido a la precedencia impl\u00edcita. Consultar la gu\u00eda de estilo para m\u00e1s detalles.</p> <p>Cuando usemos v-for v-if, v-if tiene una prioridad m\u00e1s alta que v-for.</p> <p>Eso significa que la condici\u00f3n v-if no tendr\u00e1 acceso a las variables del alcance de v-for.</p> <p>Si aplicamos esto a nuestro ejemplo y colocamos el v-for y v-if en el mimso elemento:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n      &lt;h1&gt;Batman Quotes&lt;/h1&gt;\n      &lt;input type=\"text\" v-model=\"newQuote\" v-on:keypress.enter=\"addQuote\" /&gt;\n      &lt;hr /&gt;\n      &lt;ul&gt;\n        &lt;li v-for=\"({quote, author}, index) in quotes\" v-if=\"author\"&gt;\n          &lt;span&gt;{{quote}} &lt;/span&gt;\n          &lt;blockquote&gt;- {{author}}&lt;/blockquote&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n  &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre> <p>Vemos que no nos pinta nada por pantalla, esto se debe a que como nos indica Vue, el v-if tiene prioridad y por ello no puede acceder al valor de los elementos del v-for.</p> <p>Una posible soluci\u00f3n puede ser llevar el v-for a un elemento de nivel superior, por ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"myApp\"&gt;\n      &lt;h1&gt;Batman Quotes&lt;/h1&gt;\n      &lt;input type=\"text\" v-model=\"newQuote\" v-on:keypress.enter=\"addQuote\" /&gt;\n      &lt;hr /&gt;\n      &lt;ul v-for=\"({quote, author}, index) in quotes\"&gt;\n        &lt;li v-if=\"author\"&gt;\n          &lt;span&gt;{{quote}} &lt;/span&gt;\n          &lt;blockquote&gt;- {{author}}&lt;/blockquote&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n  &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#v-else-y-v-else-if","title":"v-else y v-else-if","text":"<p>Tambien tenemos una directiva v-else y v-else-if.</p> <pre><code>const app = Vue.createApp({\n  template: `\n  &lt;h1&gt;Hola {{ name }}!&lt;/h1&gt;\n  &lt;h2 v-if=\"active\"&gt;v-if en acci\u00f3n&lt;/h2&gt;\n  &lt;h2 v-else&gt;v-else en acci\u00f3n&lt;/h2&gt;\n  `,\n\n  data() {\n    return {\n      name: 'Vue 3',\n      active: null,\n    }\n  },\n})\n\napp.mount('#myApp')\n</code></pre> <pre><code>const app = Vue.createApp({\n  template: `\n    &lt;h1&gt;Hola {{ name }}!&lt;/h1&gt;\n    &lt;h2 v-if=\"active === true\"&gt;Estoy en true&lt;/h2&gt;\n    &lt;h2 v-else-if=\"active === false\"&gt;Estoy en false&lt;/h2&gt;\n    &lt;h2 v-else&gt;Estoy indeciso&lt;/h2&gt;\n  `,\n\n  data() {\n    return {\n      name: 'Vue 3',\n      active: null,\n    }\n  },\n})\n\napp.mount('#myApp')\n</code></pre> <p>Un elemento v-else debe seguir inmediatamente a un v-if o un v-else-if elemento; de lo contrario, no se reconocer\u00e1.</p> <p>\ud83d\udc94 Incorrecto:</p> <pre><code>const app = Vue.createApp({\n  template: `\n    &lt;h1&gt;Hola {{ name }}!&lt;/h1&gt;\n    &lt;h2 v-if=\"active === true\"&gt;Estoy en true&lt;/h2&gt;\n    &lt;h2 v-else-if=\"active === false\"&gt;Estoy en false&lt;/h2&gt;\n    &lt;p&gt;Lorem ipsum dolor sit&lt;/p&gt;\n    &lt;h2 v-else&gt;Estoy indeciso&lt;/h2&gt;\n  `,\n\n  data() {\n    return {\n      name: 'Vue 3',\n      active: null,\n    }\n  },\n})\n\napp.mount('#myApp')\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#directiva-v-bind","title":"Directiva v-bind","text":"<p>La directiva v-bind es una de las directivas m\u00e1s utilizadas y populares de Vue. Esta directiva permite enlazar (bindear) una variable de Vue con un atributo espec\u00edfico de una etiqueta HTML. De esta forma, podemos colocar como valor de un atributo HTML el contenido que tengamos almacenado en una variable de la l\u00f3gica de Javascript.</p> <pre><code>const app = Vue.createApp({\n  template: `\n  &lt;h1&gt;Hola {{ name }}!&lt;/h1&gt;\n  &lt;h2 v-bind:style=\"styleColor\"&gt;Hola {{ name }}&lt;/h2&gt;\n  &lt;img v-bind:src=\"image\" v-bind:alt=\"text\"&gt;\n  `,\n\n  data() {\n    return {\n      name: 'Vue 3',\n      styleColor: 'color: red;',\n      image: 'https://avatars.githubusercontent.com/u/6128107?s=280&amp;v=4',\n      text: 'Logo de Vue',\n    }\n  },\n})\n\napp.mount('#myApp')\n</code></pre> <p>Debido a que v-bind se usa con tanta frecuencia, tiene una sintaxis abreviada dedicada:</p> <pre><code>&lt;h2 :style=\"styleColor\"&gt;Hola {{ name }}&lt;/h2&gt;\n</code></pre>"},{"location":"ud8.2-Fundamentos-Vue/#deploy","title":"Deploy","text":"<pre><code>npm run build\nnpm run preview\n</code></pre>"},{"location":"ud8.3-Comenzar-proyecto-Vue/","title":"Comenzar un proyecto Vue","text":"<p>En este apartado se introducen algunos recursos \u00fatiles para iniciar tu primer proyecto en Vue.</p>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#requisitos-previos","title":"Requisitos previos","text":"<p>Es necesario contar con:</p> <ul> <li> <p>Node js, un entorno en tiempo de ejecuci\u00f3n multiplataforma, de c\u00f3digo abierto, para la capa del servidor (pero no limit\u00e1ndose a ello) basado en el lenguaje de programaci\u00f3n JavaScript.</p> </li> <li> <p>npm (Node Package Manager), es un gestor de paquetes desarrollado en su totalidad bajo el lenguaje JavaScript por Isaac Schlueter, a trav\u00e9s del cual podemos obtener cualquier librer\u00eda con tan solo una sencilla l\u00ednea de c\u00f3digo.</p> </li> <li> <p>https://code.visualstudio.com/(opcional)</p> </li> </ul>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#extensiones-visual-code-studio","title":"Extensiones Visual Code Studio","text":"<p>A continuaci\u00f3n se listan algunas extensiones que pueden resultar muy \u00fatiles para trabajar con Vue en \u00e9ste editor.</p> <ul> <li>Volar proporciona resaltado de sintaxis e inteligencia para expresiones de plantillas y accesorios de componentes.</li> <li>Vue VSCode Snippets proporciona snippets para Vue2 y Vue3.</li> </ul>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#herramientas-de-desarrollo-del-navegador","title":"Herramientas de desarrollo del navegador","text":"<p>La extensi\u00f3n de herramientas de desarrollo del navegador Vue nos permite explorar el \u00e1rbol de componentes de una aplicaci\u00f3n Vue, inspeccionar el estado de los componentes individuales, realizar un seguimiento de los eventos de gesti\u00f3n del estado y el rendimiento del perfil.</p> <ul> <li>Documentaci\u00f3n</li> <li>Extensi\u00f3n para Chrome</li> <li>Extensi\u00f3n para Firefox</li> </ul>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#como-iniciar-un-proyecto-vue","title":"\u00bfC\u00f3mo iniciar un proyecto Vue?","text":"<p>Un proyecto creado con Vue puede tener m\u00faltiples formas de crearse, pero existen unas pautas, recomendaciones y buenas pr\u00e1cticas para crear proyectos similares bajo los mismos criterios.</p> <p>Para ello, existen herramientas de l\u00ednea de comandos que act\u00faan de asistentes y permiten crear una estructura de carpetas con un proyecto Vue inicial, con todas las herramientas que necesitemos instaladas y listo para comenzar a trabajar con \u00e9l.</p> <p>Tenemos dos opciones:</p> <ul> <li>Create Vue</li> <li>Vue-CLI</li> </ul>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#create-vue-vite","title":"Create Vue (Vite)","text":"<p>Vite es una herramienta de compilaci\u00f3n liviana y r\u00e1pida con soporte Vue SFC de primera clase. Est\u00e1 desarrollada por Evan You, el creador de Vue.</p> <p>Para comenzar con Vite + Vue, simplemente ejecute:</p> <pre><code>$ npm init vue@latest\n</code></pre> <p>Este comando instalar\u00e1 y ejecutar\u00e1 create-vue, la herramienta oficial de andamiaje (scaffolding) del proyecto Vue.</p>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#ejemplo-de-creacion-de-proyecto-con-vite","title":"Ejemplo de creaci\u00f3n de proyecto con vite","text":"<pre><code>npm init vue@latest\n</code></pre> <pre><code>\u2714 Project name: \u2026 &lt;your-project-name&gt;\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit testing? \u2026 No / Yes\n\u2714 Add Cypress for both Unit and End-to-End testing? \u2026 No / Yes\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\u2714 Add Prettier for code formatting? \u2026 No / Yes\n\nScaffolding project in ./&lt;your-project-name&gt;...\nDone.\n</code></pre> <pre><code>&gt; cd &lt;your-project-name&gt;\n&gt; npm install\n&gt; npm run dev\n</code></pre>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#cli-de-vue","title":"CLI de Vue","text":"<p>Vue CLI ha sido durante mucho tiempo la cadena de herramientas oficial basada en paquetes web para Vue. Seg\u00fan la documentaci\u00f3n oficial del framework est\u00e1 herramienta est\u00e1 en modo de mantenimiento y no recomiendan su uso. Actualmente recomiendan comenzar nuevos proyectos con Vite, la cual proporciona una experiencia de desarrollador superior en la mayor\u00eda de los casos.</p>"},{"location":"ud8.3-Comenzar-proyecto-Vue/#referencias","title":"Referencias","text":"<ul> <li> Gu\u00eda de herramientas de Vue 3</li> </ul>"},{"location":"ud8.4-Mi-Primer-Proyecto/","title":"Mi primer proyecto","text":""},{"location":"ud8.4-Mi-Primer-Proyecto/#componentes","title":"Componentes","text":"<p>Los componentes nos permiten dividir la interfaz de usuario en piezas independientes y reutilizables, y pensar en cada pieza de forma aislada. Es com\u00fan que una aplicaci\u00f3n se organice en un \u00e1rbol de componentes anidados:</p> <p> <p></p> <p></p>"},{"location":"ud8.4-Mi-Primer-Proyecto/#mi-primer-componente","title":"Mi primer componente","text":"<p>Normalmente cada componente Vue suele implementarse en un archivo dedicado usando la extensi\u00f3n .vue, esto se le conoce como componente de un solo archivo (SFC, por sus siglas en ingl\u00e9s).</p> <p>Los SFC son un formato de archivo especial que nos permite encapsular la plantilla, la l\u00f3gica y el estilo de un componente de Vue en un solo archivo. Aqu\u00ed hay un ejemplo de SFC:</p> <p>Vamos a definir el primer componente de nuestra aplicaci\u00f3n, counter.vue, dentro de la carpeta components:</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Counter&lt;/h2&gt;\n    &lt;p&gt;10&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n\n  }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n\n</code></pre> <p>Los bloques template, script y style encapsulan y colocan la vista, la l\u00f3gica y el estilo de un componente en el mismo archivo. Podemos ver mas informaci\u00f3n sobre la especificaci\u00f3n de sintaxis SFC en la documentaci\u00f3n de vue.</p> <p>Si cargamos la aplicaci\u00f3n vemos que el componente no se muestra, tenemos ahora que relacionarlo con nuesto App.vue para que se muestre en la aplicaci\u00f3n:</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;Mi primera App&lt;/h1&gt;\n  &lt;Counter /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Counter from './components/Counter.vue'\n\nexport default {\n  components: { Counter },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre> <p>Si refrescamos el navegador, vemos que ahora nuestro nuevo componente si se est\u00e1 mostrando en la aplicaci\u00f3n.</p>"},{"location":"ud8.4-Mi-Primer-Proyecto/#estado-del-componente","title":"Estado del componente","text":"<p>Vamos a declarar un estado local, counter, utilizando la funci\u00f3n data de la misma manera que lo hicimos anteriormente en el apartado de fundamentos. Esta funci\u00f3n va a devolver un objeto y cada una de las propiedades que tenga declaradas ser\u00e1n reactivas, es decir vue estar\u00e1 pendiente de los cambios que sufran y reaccionara a estos.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Counter&lt;/h2&gt;\n    &lt;p&gt;{{counter}}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    data() {\n      return {\n        // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n        counter: 5,\n      }\n    }\n  }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre> <p>Vamos a realizar una peque\u00f1a operaci\u00f3n matem\u00e1tica con el estado que hemos creado.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Counter&lt;/h2&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ counter * counter }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    data() {\n      return {\n        // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n        counter: 5,\n      }\n    }\n  }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre> <p>Las expresiones en el template son muy convenientes, pero est\u00e1n dise\u00f1adas para operaciones simples. Poner demasiada l\u00f3gica en las templates puede hacerlos grandes, complejos y dif\u00edciles de mantener. En este punto, el template ya no es simple y declarativo.</p> <p>Para evitar esto posiblemente lo primero que se nos ocurrir\u00eda ser\u00eda crearnos un m\u00e9todo que realice la operaci\u00f3n.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Counter&lt;/h2&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquare() }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    data() {\n      return {\n        // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n        counter: 5,\n      }\n    },\n    methods: {\n      getSquare() {\n        console.log('getSquareValue')\n        return this.counter * this.counter\n      }\n    }\n  }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre> <p>As\u00ed minimizamos la l\u00f3gica en el template, pero vamos a suponer que necesitamos realizar dicha operaci\u00f3n vaias veces:</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Counter&lt;/h2&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquare() }}&lt;/p&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquare() }}&lt;/p&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquare() }}&lt;/p&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquare() }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    data() {\n      return {\n        // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n        counter: 5,\n      }\n    },\n    methods: {\n      getSquare() {\n        console.log('getSquareValue')\n        return this.counter * this.counter\n      }\n    }\n  }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre> <p>Si nos fijamos en la consola, como es de esperar, el c\u00f3digo se est\u00e1 ejecutando varias veces. En este caso, una operaci\u00f3n matem\u00e1tica simple, no supone un gran problema, pero en otras ocasiones si lo ser\u00e1 ya que estamos ocupando un espacio de memoria innecesariamente.</p> <p>A continuaci\u00f3n veremos como darle soluci\u00f3n a esto.</p>"},{"location":"ud8.4-Mi-Primer-Proyecto/#propiedades-computadas","title":"Propiedades computadas","text":"<p>Las propiedades computadas o computed properties son una caracter\u00edstica muy interesante de Vue. B\u00e1sicamente una computada es una variable, la diferencia con las variables de Vue es que las computadas normalmente transforman la variable o hacen alg\u00fan tipo de c\u00e1lculo antes de devolverla.</p> <p>Vamos a repetir el c\u00f3digo anterior, pero usando una propiedad computada en vez de un m\u00e9todo.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Counter&lt;/h2&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    data() {\n      return {\n        // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n        counter: 5,\n      }\n    },\n    methods: {\n      getSquare() {\n        console.log('getSquareValue')\n        return this.counter * this.counter\n      }\n    },\n    computed: {\n      getSquareComputed() {\n        console.log('getSquareValueComputed')\n        return this.counter * this.counter\n      },\n  },\n  }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\n&lt;/style&gt;\n</code></pre> <p>Si ahora nos fijamos en la consola, vemos que el c\u00f3digo se ha ejecutado una sola vez.</p> <p>La diferencia entre ambos c\u00f3digos, usar un m\u00e9todo y utilizar las propiedades computadas es que ser\u00eda m\u00e1s \u00f3ptimo trabajar con \u00e9stas, ya que se cachea su valor y al contrario de los m\u00e9todos, no se llaman cada vez que se renderiza la plantilla a menos que cambie su valor.</p>"},{"location":"ud8.4-Mi-Primer-Proyecto/#propiedes-computadas-vs-metodos","title":"Propiedes computadas vs m\u00e9todos","text":"<p>La diferencia fundamental es la reactividad. Las computadas son reactivas, como las variables, mientras que los m\u00e9todos no lo son.</p> <p>Que las computadas sean reactivas quiere decir que cuando el valor del data cambie, la computada autom\u00e1ticamente se va a ejecutar y va a devolver el nuevo valor.</p> <p>Las computadas NO pueden recibir par\u00e1metros de entrada, mientas que los m\u00e9todos s\u00ed. Las computadas siempre tienen que hace return de un valor, mientras que los m\u00e9todos puede que no devuelvan nada.</p> <p>Otra diferencia es que las propiedades computadas tienen cach\u00e9, es decir, utilizar propiedades computadas es m\u00e1s \u00f3ptimo porque si Vue detecta que la computada va a devolver el mismo valor, no ejecutar\u00e1 la computada ahorrando c\u00e1lculos. Los m\u00e9todos se ejecutan siempre cada vez aunque el resultado sea el mismo.</p> <p>Por \u00faltimo decir que es normal llamar a las computadas desde dentro de los m\u00e9todos, mientras que ejecutar m\u00e9todos dentro de computadas no se recomienda (por lo de la cach\u00e9), es mejor busca otra alternativa para no tener que hacer eso.</p>"},{"location":"ud8.4-Mi-Primer-Proyecto/#incrementar-y-decrementar","title":"Incrementar y decrementar","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Counter&lt;/h2&gt;\n    &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n    &lt;div&gt;\n      &lt;button v-on:click=\"decrease\"&gt;-1&lt;/button&gt;\n      &lt;button v-on:click=\"increase\"&gt;+1&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n      counter: 5,\n    }\n  },\n  methods: {\n    getSquare() {\n      return this.counter * this.counter\n    },\n    increase() {\n      this.counter++\n    },\n    decrease() {\n      this.counter--\n    },\n  },\n  computed: {\n    getSquareComputed() {\n      return this.counter * this.counter\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre>"},{"location":"ud8.4-Mi-Primer-Proyecto/#properties-props","title":"Properties - props","text":"<p>Las properties o props son atributos HTML personalizados que podemos registrar en nuestros componentes, lesto nos permite pasar datos a nuestros componentes.</p> <p>App.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;Mi primera App&lt;/h1&gt;\n  &lt;Counter title=\"Primer contador\" /&gt;\n  &lt;Counter /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Counter from './components/Counter.vue'\n\nexport default {\n  components: { Counter },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;h2&gt;{{ title }}&lt;/h2&gt;\n  &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n  &lt;div&gt;\n    &lt;button v-on:click=\"decrease\"&gt;-1&lt;/button&gt;\n    &lt;button v-on:click=\"increase\"&gt;+1&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: ['title'],\n  data() {\n    return {\n      // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n      counter: 5,\n    }\n  },\n  methods: {\n    getSquare() {\n      console.log('getSquareValue')\n      return this.counter * this.counter\n    },\n    increase() {\n      this.counter++\n    },\n    decrease() {\n      this.counter--\n    },\n  },\n  computed: {\n    getSquareComputed() {\n      console.log('getSquareValueComputed')\n      return this.counter * this.counter\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre>"},{"location":"ud8.4-Mi-Primer-Proyecto/#otras-formas-de-definir-las-props","title":"Otras formas de definir las props","text":"<p>Adem\u00e1s de declarar accesorios con notaci\u00f3n de array, tambi\u00e9n podemos hacerlo usando sintaxis de objeto:</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;h2&gt;{{ title }}&lt;/h2&gt;\n  &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n  &lt;div&gt;\n    &lt;button v-on:click=\"decrease\"&gt;-1&lt;/button&gt;\n    &lt;button v-on:click=\"increase\"&gt;+1&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    title: String,\n    }\n  data() {\n    return {\n      // Cualquier propiedad que declaremos aqu\u00ed ser\u00e1 reactiva.\n      counter: 5,\n    }\n  },\n  methods: {\n    getSquare() {\n      console.log('getSquareValue')\n      return this.counter * this.counter\n    },\n    increase() {\n      this.counter++\n    },\n    decrease() {\n      this.counter--\n    },\n  },\n  computed: {\n    getSquareComputed() {\n      console.log('getSquareValueComputed')\n      return this.counter * this.counter\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre> <p>En la sintaxis de objeto, la clave es el nombre de la prop y valor es el tipo esperado.</p> <p>Esto no s\u00f3lo documenta el componente, sino que tambi\u00e9n advertir\u00e1 a otros desarrolladores que utilicen el componente (en la consola del navegador) si pasan el tipo incorrecto.</p>"},{"location":"ud8.4-Mi-Primer-Proyecto/#validacion-de-las-props","title":"Validaci\u00f3n de las props","text":"<p>En Vue podemos establecer raquisitos para los props que reciben nuestros componentes, es decir podemos aplicar validaciones. Ya hemos visto en el punto anterior, por ejemplo, como validar el tipo del dato que reciben. Si no se cumple un requisito, Vue avisar\u00e1 en la consola de JavaScript del navegador. Esto es especialmente \u00fatil cuando se desarrolla un componente destinado a ser utilizado por otros.</p> <p>Para especificar validaciones de props, usaremos la notaci\u00f3n de objeto en lugar de la de array. Por ejemplo:</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;h2&gt;{{ customTitle }}&lt;/h2&gt;\n\n  &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n\n  &lt;div&gt;\n    &lt;button v-on:click=\"decrease\"&gt;-1&lt;/button&gt;\n    &lt;button v-on:click=\"increase\"&gt;+1&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    title: String,\n    start: {\n      type: Number,\n      // required: true,\n      default: 5,\n    },\n  },\n  data() {\n    return {\n      // Cualquier propiedad que declaremos aqu\u00e9 ser\u00e1 reactiva.\n      // counter: 5,\n      counter: this.start,\n    }\n  },\n  methods: {\n    getSquare() {\n      console.log('getSquareValue')\n      return this.counter * this.counter\n    },\n    increase() {\n      this.counter++\n    },\n    decrease() {\n      this.counter--\n    },\n  },\n  computed: {\n    getSquareComputed() {\n      console.log('getSquareValueComputed')\n      return this.counter * this.counter\n    },\n    customTitle() {\n      return this.title || 'Counter'\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre>"},{"location":"ud8.4-Mi-Primer-Proyecto/#validaciones-pesonalizadas","title":"Validaciones pesonalizadas","text":"<p>Podemos agregar validaciones personalizadas en funci\u00f3n de nuestra necesidad. Por ejemplo, vamos a imaginar que necesitamos que el valor de start sea mayor o igual que 0.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;h2&gt;{{ customTitle }}&lt;/h2&gt;\n\n  &lt;p&gt;{{ counter }} &lt;sup&gt;2&lt;/sup&gt;= {{ getSquareComputed }}&lt;/p&gt;\n\n  &lt;div&gt;\n    &lt;button v-on:click=\"decrease\"&gt;-1&lt;/button&gt;\n    &lt;button v-on:click=\"increase\"&gt;+1&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    title: String,\n    start: {\n      type: Number,\n      // required: true,\n      default: 5,\n      validator(value) {\n        return value &gt;= 0\n      },\n    },\n  },\n  data() {\n    return {\n      // Cualquier propiedad que declaremos aqu\u00e9 ser\u00e1 reactiva.\n      // counter: 5,\n      counter: this.start,\n    }\n  },\n  methods: {\n    getSquare() {\n      console.log('getSquareValue')\n      return this.counter * this.counter\n    },\n    increase() {\n      this.counter++\n    },\n    decrease() {\n      this.counter--\n    },\n  },\n  computed: {\n    getSquareComputed() {\n      console.log('getSquareValueComputed')\n      return this.counter * this.counter\n    },\n    customTitle() {\n      return this.title || 'Counter'\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre> <p>Si el valor que recibe como prop es menor que 0, nos dar\u00e1 un mensaje de error en la consola del navegador.</p> <p>En la gu\u00eda de Vue podemos encontrar varias validaciones m\u00e1s. Por ejemplo:</p> <pre><code>export default {\n  props: {\n    // Basic type check\n    //  (`null` and `undefined` values will allow any type)\n    propA: Number,\n    // Multiple possible types\n    propB: [String, Number],\n    // Required string\n    propC: {\n      type: String,\n      required: true\n    },\n    // Number with a default value\n    propD: {\n      type: Number,\n      default: 100\n    },\n    // Object with a default value\n    propE: {\n      type: Object,\n      // Object or array defaults must be returned from\n      // a factory function. The function receives the raw\n      // props received by the component as the argument.\n      default(rawProps) {\n        return { message: 'hello' }\n      }\n    },\n    // Custom validator function\n    propF: {\n      validator(value) {\n        // The value must match one of these strings\n        return ['success', 'warning', 'danger'].includes(value)\n      }\n    },\n    // Function with a default value\n    propG: {\n      type: Function,\n      // Unlike object or array default, this is not a factory function - this is a function to serve as a default value\n      default() {\n        return 'Default function'\n      }\n    }\n  }\n}\n\n</code></pre>"},{"location":"ud8.5-Indecision_APP/","title":"Indecision App","text":"<p>En esta secci\u00f3n vamos a realizar una peque\u00f1a aplicaci\u00f3n a la cual le vamos a poder hacer preguntas \"existenciales\" y \u00e9sta nos responder\u00e1 si o no.</p> <p>Es una aplicaci\u00f3n sencilla que va a realizar llamadas a una API, observar los cambios en un input, y alguna cosilla mas. El objetivo de la misma es consolidar el conocimiento de los elementos fundamentales del Option API de Vue.js.</p>"},{"location":"ud8.5-Indecision_APP/#demo-del-objetivo-final","title":"Demo del objetivo final","text":"<p>En el siguiente enlace podemos ver un despligue de como se ver\u00e1 la aplicaci\u00f3n una vez terminada:</p> <ul> <li>Despliegue de la Indecision App</li> </ul>"},{"location":"ud8.5-Indecision_APP/#recursos-para-el-desarrollo-de-la-app","title":"Recursos para el desarrollo de la App","text":"<p>Algunos recursos que vamos a necesitar:</p> <ul> <li>Enlace a la API yesno.wtf</li> <li>CSS para la aplicaci\u00f3n</li> </ul>"},{"location":"ud8.5-Indecision_APP/#comenzamos-el-proyecto","title":"Comenzamos el proyecto","text":"<p>Vamos, en primer lugar, a comenzar un nuevo proyecto Vue utilizando vite.</p> <pre><code>npm init vue@latest\n</code></pre> <pre><code>Vue.js - The Progressive JavaScript Framework\n\n\u2714 Project name: \u2026 IndecisionApp\n\u2714 Package name: \u2026 indecisionapp\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit Testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u203a No\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\nScaffolding project in /xxx/xxx/IndecisionApp...\n\nDone. Now run:\n\n  cd IndecisionApp\n  npm install\n  npm run dev\n\n</code></pre> <p>Una vez que tenemos creado el proyecto, eliminamos los elementos que genera por defecto y nos vamos a utilizar, componentes, archivos css, etc....</p> <p>A continuaci\u00f3n, sustituimos el c\u00f3digo del App.vue a un componente limpio y le a\u00f1adimos el css que tenemos en el archivo que hemos descargado en el apartado anterior.</p> <pre><code>&lt;template&gt;&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style&gt;\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n&lt;/style&gt;\n\n</code></pre>"},{"location":"ud8.5-Indecision_APP/#indecision-component","title":"Indecision component","text":"<p>Vamos a crear un nuevo componente, Indecision.vue, dentro de la carpeta components, le a\u00f1adimos el css y lo mostramos en el App.vue.</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;Indecision App&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n</code></pre> <p>App.vue</p> <pre><code>&lt;template&gt;\n  &lt;Indecision /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Indecision from './components/Indecision.vue'\n\nexport default {\n  components: { Indecision },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n&lt;/style&gt;\n</code></pre> <p>Ahora vamos a crearnos el \"cascaron de la aplicaci\u00f3n\".</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img src=\"https://via.placeholder.com/250\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input type=\"text\" placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div&gt;\n      &lt;h2&gt;\u00bfSer\u00e9 millonario?&lt;/h2&gt;\n      &lt;h1&gt;Si, No, pensando...&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n</code></pre> <p>A estas alturas ya tenemos creada la estructura de como queremos que nos quede la aplicaci\u00f3n:</p> <p> </p> <p>Le a\u00f1adimos el css que tenemos en el archivo adjunto:</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img src=\"https://via.placeholder.com/250\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input type=\"text\" placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div&gt;\n      &lt;h2&gt;\u00bfSer\u00e9 millonario?&lt;/h2&gt;\n      &lt;h1&gt;Si, No, pensando...&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style&gt;\nimg,\n.bg-dark {\n  height: 100vh;\n  left: 0px;\n  max-height: 100%;\n  max-width: 100%;\n  position: fixed;\n  top: 0px;\n  width: 100vw;\n}\n\n.bg-dark {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.indecision-container {\n  position: relative;\n  z-index: 99;\n}\n\ninput {\n  width: 250px;\n  padding: 10px 15px;\n  border-radius: 5px;\n  border: none;\n  margin: 20px;\n}\ninput:focus {\n  outline: none;\n}\n\np {\n  color: white;\n  font-size: 20px;\n  margin-top: 0px;\n}\n\nh1,\nh2 {\n  color: white;\n}\n\nh2 {\n  margin-top: 150px;\n}\n&lt;/style&gt;\n</code></pre> <p>Y ahora tendremos algo, como:</p> <p> </p> <p>Ahora vamos a necesitar \"capturar\" lo que los usuarios escriban en el input, para ello vamos a declarar uana propiedad reactiva y enlazarla al input.</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img src=\"https://via.placeholder.com/250\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input v-model=\"question\" type=\"text\" placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div&gt;\n      &lt;h2&gt;{{ question }}&lt;/h2&gt;\n      &lt;h1&gt;Si, No, pensando...&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      question: 'Pregunta inicial',\n    }\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\nimg,\n.bg-dark {\n  height: 100vh;\n  left: 0px;\n  max-height: 100%;\n  max-width: 100%;\n  position: fixed;\n  top: 0px;\n  width: 100vw;\n}\n\n.bg-dark {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.indecision-container {\n  position: relative;\n  z-index: 99;\n}\n\ninput {\n  width: 250px;\n  padding: 10px 15px;\n  border-radius: 5px;\n  border: none;\n  margin: 20px;\n}\ninput:focus {\n  outline: none;\n}\n\np {\n  color: white;\n  font-size: 20px;\n  margin-top: 0px;\n}\n\nh1,\nh2 {\n  color: white;\n}\n\nh2 {\n  margin-top: 150px;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.5-Indecision_APP/#watch-observar-cambios-en-una-propiedad-reactiva","title":"Watch - Observar cambios en una propiedad reactiva","text":"<p>Hay casos en los que necesitamos realizar \"efectos secundarios\" en reacci\u00f3n a los cambios de estado, por ejemplo, mutar el DOM.</p> <p>Con la API de opciones, podemos usar la opci\u00f3n watch para activar una funci\u00f3n cada vez que cambia una propiedad reactiva.</p> <p>En nuestra aplicaci\u00f3n vamos a necesitar que cuando el usuario escriba una \"?\" en el input se dispare la llamada a la API, para esto vamos a declarar un watch.</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img src=\"https://via.placeholder.com/250\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input v-model=\"question\" type=\"text\" placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div&gt;\n      &lt;h2&gt;{{ question }}&lt;/h2&gt;\n      &lt;h1&gt;Si, No, pensando...&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      question: 'Pregunta inicial',\n    }\n  },\n  watch: {\n    question(value, oldvalue) {\n      console.log(value, oldvalue)\n      if (!value.includes('?')) return\n      console.log('Se ha detectado una ?')\n\n      // TODO: Llamada HTTP\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\nimg,\n.bg-dark {\n  height: 100vh;\n  left: 0px;\n  max-height: 100%;\n  max-width: 100%;\n  position: fixed;\n  top: 0px;\n  width: 100vw;\n}\n\n.bg-dark {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.indecision-container {\n  position: relative;\n  z-index: 99;\n}\n\ninput {\n  width: 250px;\n  padding: 10px 15px;\n  border-radius: 5px;\n  border: none;\n  margin: 20px;\n}\ninput:focus {\n  outline: none;\n}\n\np {\n  color: white;\n  font-size: 20px;\n  margin-top: 0px;\n}\n\nh1,\nh2 {\n  color: white;\n}\n\nh2 {\n  margin-top: 150px;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.5-Indecision_APP/#peticion-http","title":"Petici\u00f3n HTTP","text":"<p>Realizamos la petici\u00f3n HTTP a la API. Implementamos un m\u00e9todo para hacer la llamada, no ser\u00eda una buena pr\u00e1ctica hacerla en el watcher.</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img src=\"https://via.placeholder.com/250\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input v-model=\"question\" type=\"text\" placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div&gt;\n      &lt;h2&gt;{{ question }}&lt;/h2&gt;\n      &lt;h1&gt;Si, No, pensando...&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      question: 'Pregunta inicial',\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.answer = 'Pensando...'\n      const data = await fetch('https://yesno.wtf/api').then((res) =&gt;\n        res.json()\n      )\n      console.log(data)\n    },\n  },\n  watch: {\n    question(value, oldvalue) {\n      console.log(value, oldvalue)\n      if (!value.includes('?')) return\n      console.log('Se ha detectado una ?')\n\n      // TODO: Llamada HTTP\n      this.getAnswer()\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\nimg,\n.bg-dark {\n  height: 100vh;\n  left: 0px;\n  max-height: 100%;\n  max-width: 100%;\n  position: fixed;\n  top: 0px;\n  width: 100vw;\n}\n\n.bg-dark {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.indecision-container {\n  position: relative;\n  z-index: 99;\n}\n\ninput {\n  width: 250px;\n  padding: 10px 15px;\n  border-radius: 5px;\n  border: none;\n  margin: 20px;\n}\ninput:focus {\n  outline: none;\n}\n\np {\n  color: white;\n  font-size: 20px;\n  margin-top: 0px;\n}\n\nh1,\nh2 {\n  color: white;\n}\n\nh2 {\n  margin-top: 150px;\n}\n&lt;/style&gt;\n</code></pre> <p>Vamos a desestructurar la respuesta de la API y almacenarla en dos propiedades reactivas, answer y img. El contenido de estas dos propiedes lo usaremos para pintar la respuesta en nuestro HTML y sustituir la imagen.</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img v-bind:src=\"img\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input v-model=\"question\" type=\"text\" placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div&gt;\n      &lt;h2&gt;{{ question }}&lt;/h2&gt;\n      &lt;h1&gt;{{ answer }}&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      question: null,\n      answer: null,\n      img: null,\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.answer = 'Pensando...'\n      const data = await fetch('https://yesno.wtf/api').then((res) =&gt;\n        res.json()\n      )\n      const { answer, image } = data\n      this.answer = answer\n      this.img = image\n    },\n  },\n  watch: {\n    question(value, oldvalue) {\n      console.log(value, oldvalue)\n      if (!value.includes('?')) return\n      // console.log('Se ha detectado una ?')\n      this.getAnswer()\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\nimg,\n.bg-dark {\n  height: 100vh;\n  left: 0px;\n  max-height: 100%;\n  max-width: 100%;\n  position: fixed;\n  top: 0px;\n  width: 100vw;\n}\n\n.bg-dark {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.indecision-container {\n  position: relative;\n  z-index: 99;\n}\n\ninput {\n  width: 250px;\n  padding: 10px 15px;\n  border-radius: 5px;\n  border: none;\n  margin: 20px;\n}\ninput:focus {\n  outline: none;\n}\n\np {\n  color: white;\n  font-size: 20px;\n  margin-top: 0px;\n}\n\nh1,\nh2 {\n  color: white;\n}\n\nh2 {\n  margin-top: 150px;\n}\n&lt;/style&gt;\n</code></pre> <p>Vemos que inicialmente nos muestra una imagen rota, eso es debido a que hemos inicializado el estado img en null, podemos solucionarlo usando el renderizad condicional, v-if.</p> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img v-if=\"img\" v-bind:src=\"img\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input v-model=\"question\" type=\"text\" placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div&gt;\n      &lt;h2&gt;{{ question }}&lt;/h2&gt;\n      &lt;h1&gt;{{ answer }}&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      question: null,\n      answer: null,\n      img: null,\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.answer = 'Pensando...'\n      const data = await fetch('https://yesno.wtf/api').then((res) =&gt;\n        res.json()\n      )\n      const { answer, image } = data\n      this.answer = answer\n      this.img = image\n    },\n  },\n  watch: {\n    question(value, oldvalue) {\n      console.log(value, oldvalue)\n      if (!value.includes('?')) return\n      // console.log('Se ha detectado una ?')\n      this.getAnswer()\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\nimg,\n.bg-dark {\n  height: 100vh;\n  left: 0px;\n  max-height: 100%;\n  max-width: 100%;\n  position: fixed;\n  top: 0px;\n  width: 100vw;\n}\n\n.bg-dark {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.indecision-container {\n  position: relative;\n  z-index: 99;\n}\n\ninput {\n  width: 250px;\n  padding: 10px 15px;\n  border-radius: 5px;\n  border: none;\n  margin: 20px;\n}\ninput:focus {\n  outline: none;\n}\n\np {\n  color: white;\n  font-size: 20px;\n  margin-top: 0px;\n}\n\nh1,\nh2 {\n  color: white;\n}\n\nh2 {\n  margin-top: 150px;\n}\n&lt;/style&gt;\n</code></pre> <p>Ya no se nos muestra, pero nos queda un foncdo bastante pobre. Vamos a darle algo de color al fondo inicial, lo haremos en un nuevo archivo /assets/styles.css.</p> <p>styles.css</p> <pre><code>html,\nbody {\n  background-color: cadetblue;\n}\n</code></pre> <p>Ahora tenemos que importarlo en el main.js</p> <pre><code>import { createApp } from 'vue'\nimport App from './App.vue'\n\nimport '@/assets/styles.css'\n\ncreateApp(App).mount('#app')\n</code></pre>"},{"location":"ud8.5-Indecision_APP/#puliendo-algunos-detalles","title":"Puliendo algunos detalles","text":"<p>Antes de dar por finalizado el proyecto, vamos a pulir algunos detalles.</p> <ul> <li>Traducimos la respuesta, no queremos mostrar yes / no, cuando toda nuestra aplicaci\u00f3n est\u00e1 en espa\u00f1ol.</li> <li>No queremos mostrar ninguna respuesta mientras el usuario est\u00e1 escibiendo o el input est\u00e1 en blanco, usaremos una flag isvalidQuestion.</li> <li>Como no indicamos que la pregunta debe acabar en \"?\", posiblemente el usuario trate de enviar la consulta presionando intro. Vamos a controlar ese detalle, y si presiona intro le mostraremos un mensaje record\u00e1ndole que debe acabar la pregunta en \"?\". Usaremos para ello una flag error.</li> </ul> <p>Indecision.vue</p> <pre><code>&lt;template&gt;\n  &lt;img v-if=\"img\" v-bind:src=\"img\" alt=\"imagen\" /&gt;\n  &lt;div class=\"bg-dark\"&gt;&lt;/div&gt;\n  &lt;div class=\"indecision-container\"&gt;\n    &lt;h1&gt;Indecision App&lt;/h1&gt;\n    &lt;input\n      v-on:keypress.enter=\"setError()\"\n      v-model=\"question\"\n      type=\"text\"\n      placeholder=\"Hazme una pregunta\" /&gt;\n    &lt;p v-if=\"error\"&gt;Recuerda terminar con un signo de interrogaci\u00f3n (?)&lt;/p&gt;\n    &lt;div v-if=\"isvalidQuestion\"&gt;\n      &lt;h2&gt;{{ question }}&lt;/h2&gt;\n      &lt;h1&gt;{{ answer === 'yes' ? 'SI' : 'NO' }}&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      question: null,\n      answer: null,\n      img: null,\n      isvalidQuestion: false,\n      error: false,\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.answer = 'Pensando...'\n      const data = await fetch('https://yesno.wtf/api').then((res) =&gt;\n        res.json()\n      )\n      const { answer, image } = data\n      this.answer = answer\n      this.img = image\n    },\n    setError() {\n      this.error = true\n    },\n  },\n  watch: {\n    question(value, oldvalue) {\n      this.isvalidQuestion = false\n      if (!value.includes('?')) return\n      this.getAnswer()\n      this.isvalidQuestion = true\n      this.error = false\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\nimg,\n.bg-dark {\n  height: 100vh;\n  left: 0px;\n  max-height: 100%;\n  max-width: 100%;\n  position: fixed;\n  top: 0px;\n  width: 100vw;\n}\n\n.bg-dark {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n.indecision-container {\n  position: relative;\n  z-index: 99;\n}\n\ninput {\n  width: 250px;\n  padding: 10px 15px;\n  border-radius: 5px;\n  border: none;\n  margin: 20px;\n}\ninput:focus {\n  outline: none;\n}\n\np {\n  color: white;\n  font-size: 20px;\n  margin-top: 0px;\n}\n\nh1,\nh2 {\n  color: white;\n}\n\nh2 {\n  margin-top: 150px;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/","title":"Pokemon Game","text":"<p>En esta secci\u00f3n vamos a desarrollar un juego de pok\u00e9mon, \"adivina que pok\u00e9mon es\". Mostraremos un pok\u00e9mon difuminado, y cuatro opciones a elegir, y el usuario tendr\u00e1 que adivinar cual es.</p> <p>El desarrollo del juego nos va a permitir aprender bastante sobre Vue y la comunicaci\u00f3n entre componentes. El objetivo del desarrollo va a ser enfocarnos en:</p> <ul> <li> <p>Mount</p> </li> <li> <p>Axios en Vue.js</p> </li> <li> <p>Emitir eventos</p> </li> <li> <p>Escuchar eventos personalizados</p> </li> </ul>"},{"location":"ud8.6-Pokemon-Game/#demo-del-objetivo-final","title":"Demo del objetivo final","text":"<p>En el siguiente enlace podemos ver un despligue de como se ver\u00e1 la aplicaci\u00f3n una vez terminada:</p> <ul> <li>Despliegue de Pokemosn Game</li> </ul>"},{"location":"ud8.6-Pokemon-Game/#recursos-para-el-desarrollo-de-la-app","title":"Recursos para el desarrollo de la App","text":"<p>Algunos recursos que vamos a necesitar:</p> <ul> <li>Axios</li> <li>Enlace a la API pokeapi</li> <li>CSS para la aplicaci\u00f3n</li> </ul>"},{"location":"ud8.6-Pokemon-Game/#inicio-del-proyecto","title":"Inicio del proyecto","text":"<p>Comenzamos un nuevo proyecto Vue utilizando vite.</p> <pre><code>npm init vue@latest\n</code></pre> <p>A continuaci\u00f3n nos descargamos el zip con los arhivos css del proyecto, a\u00f1adimos los archivos animations.css y styles.css a la carpeta assets y los importamos en el main.js.</p> <p>main.js</p> <pre><code>import { createApp } from 'vue'\nimport App from './App.vue'\n\nimport './assets/styles.css'\nimport './assets/animations.css'\n\ncreateApp(App).mount('#app')\n</code></pre> <p>Ya tenemos todo listo para comenzar a trabajar en nuestro juego.</p>"},{"location":"ud8.6-Pokemon-Game/#estructura-del-proyecto-y-componentes","title":"Estructura del proyecto y componentes","text":"<p>Cuando estamos trabajando con un proyecto grande no se recomienda usar la estructura de carpetas por defecto. A medida que el proyecto crece ser\u00e1 mas complejo tener localizados y controlados los diferentes elementos de la aplicaci\u00f3n. En ese caso se recomienda una estructura, como:</p> <p> </p> <p>La aplicaci\u00f3n que vamos a desarrollar es relativamente sencilla, tendr\u00e1 solo 3 o 4 componentes, y no nos va a hacer falta una estructura compleja. A\u00fan as\u00ed tampoco tendr\u00eda sentido implementar toda la aplicaci\u00f3n en el App.vue, la segmentaci\u00f3n en componentes siempre la va a hacer mas f\u00e1cil de leer y mantener.</p> <p>Vamos a utilizar la siguiente estructura:</p> <p> </p> <p>Implementamos los componentes:</p>"},{"location":"ud8.6-Pokemon-Game/#pokemon-page","title":"Pokemon Page","text":"<p>Est\u00e1 ser\u00e1 la p\u00e1gina principal de la aplicaci\u00f3n, aunque no vamos a usar el router y es nuestra \u00fanica p\u00e1gina est\u00e1 bien hacerla separada por si la aplicaci\u00f3n crece y luego usamos un router.</p> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n\n    &lt;!-- TODO: Componente para mostrar la imagen del pokemon --&gt;\n\n\n    &lt;!-- TODO: Componente para mostrar las opciones --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre> <p>Lo mostramos en el App.vue:</p> <p>App.vue</p> <pre><code>&lt;template&gt;\n  &lt;PokemonPage /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonPage from './pages/PokemonPage.vue'\nexport default { components: { PokemonPage } }\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre> <p>Nota. A\u00f1adimos a App.vue el css que tenemos en el archivo App.css (zip con los arhivos css del proyecto.</p>"},{"location":"ud8.6-Pokemon-Game/#pokemonpicturevue","title":"PokemonPicture.vue","text":"<p>Este componente va a mostrar la imagen del pokemon que el usuario tiene que intentar adivinar.</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;Pokemon Picture&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#pokemonoptionsvue","title":"PokemonOptions.vue","text":"<p>Este componente tiene que mostrar una lista de pokemons para que el usuario elija la correcta.</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;Opciones&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre> <p>Mostramos ambos componentes en el PokemonPage.vue:</p> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture /&gt;\n\n    &lt;PokemonOptions /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\n\nexport default { components: { PokemonOptions, PokemonPicture } }\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#diseno-de-los-componentes","title":"Dise\u00f1o de los componentes","text":"<p>Vamos a realizar el dise\u00f1o de los dos componentes, para posteriormente ya centrarnos en las funcionalidades.</p>"},{"location":"ud8.6-Pokemon-Game/#pokemonpicturevue_1","title":"PokemonPicture.vue","text":"<p>De momento estamos haciendo la estructura, vamos a hacer que muestre la imagen de manera est\u00e1tica, y posteriormente la haremos din\u00e1mica. Le a\u00f1adiremos tambien el css correspondiente.</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"pokemon-container\"&gt;\n    &lt;img\n      src=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/1.svg\"\n      alt=\"pokemon\"\n      class=\"hidden-pokemon\" /&gt;\n    &lt;!-- &lt;img\n      src=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/1.svg\"\n      alt=\"pokemon\"\n      class=\"fade-in\" /&gt; --&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style&gt;\n.pokemon-container {\n  height: 200px;\n  position: relative;\n}\n\nimg {\n  height: 200px;\n  position: absolute;\n  left: 50%;\n  user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -webkit-user-drag: none;\n  -webkit-user-select: none;\n\n  transform: translateX(-50%);\n}\n.hidden-pokemon {\n  filter: brightness(0);\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#pokemonoptionsvue_1","title":"PokemonOptions.vue","text":"<p>En este componente vamos a implementar una lista con 4 elementos para posteriormente mostrar las opciones. Le a\u00f1adiremos tambien el css correspondiente.</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"options-container\"&gt;\n    &lt;ul&gt;\n      &lt;li&gt;1&lt;/li&gt;\n      &lt;li&gt;1&lt;/li&gt;\n      &lt;li&gt;1&lt;/li&gt;\n      &lt;li&gt;1&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nul {\n  list-style-type: none;\n}\nli {\n  background-color: white;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n  margin-bottom: 10px;\n  width: 250px;\n}\n\nli:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.options-container {\n  display: flex;\n  justify-content: center;\n}\n&lt;/style&gt;\n</code></pre> <p>Nuestro proyecto se ver\u00e1 algo, como:</p> <p> </p> <p>Ya tenemos la estructura lista, ahora nos centraremos en la l\u00f3gica de la aplicaci\u00f3n.</p>"},{"location":"ud8.6-Pokemon-Game/#funcionalidad-de-pokemonpicture","title":"Funcionalidad de PokemonPicture","text":"<p>El componente tiene que recibir un pokemon, en concreto el id de un pokemon, y mostar la imagen de este.</p> <p>PokemonPicture.vue</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"pokemon-container\"&gt;\n    &lt;img :src=\"imgSrc\" alt=\"pokemon\" class=\"hidden-pokemon\" /&gt;\n    &lt;img v-if=\"showPokemon\" :src=\"imgSrc\" alt=\"pokemon\" class=\"fade-in\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    pokemonId: {\n      type: Number,\n      required: true,\n    },\n    showPokemon: {\n      type: Boolean,\n      required: true,\n      default: false,\n    },\n  },\n  computed: {\n    imgSrc() {\n      return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${this.pokemonId}.svg`\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n.pokemon-container {\n  height: 200px;\n  position: relative;\n}\n\nimg {\n  height: 200px;\n  position: absolute;\n  left: 50%;\n  user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -webkit-user-drag: none;\n  -webkit-user-select: none;\n\n  transform: translateX(-50%);\n}\n.hidden-pokemon {\n  filter: brightness(0);\n}\n&lt;/style&gt;\n</code></pre> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture :pokemonId=\"151\" :showPokemon=\"false\" /&gt;\n\n    &lt;PokemonOptions /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\n\nexport default { components: { PokemonOptions, PokemonPicture } }\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#logica-de-los-nombres-de-los-pokemons","title":"L\u00f3gica de los nombres de los pok\u00e9mons","text":"<p>El componente PokemonOptions deber\u00eda de recibir un array con los 4 pokemons que tiene que mostrar en las opciones. Para evitar pomer toda la l\u00f3gica en el componente PokemonPage vamos a crearnos una carpeta helpers y dentro un archivo getPokemonOptions.js.</p> <p>getPokemonOptions.js</p> <pre><code>const getPokemons = () =&gt; {\n  const pokemosArr = Array.from(Array(650))\n  return pokemosArr.map((arg, index) =&gt; index + 1)\n}\n\nconst getPokemonOptions = () =&gt; {\n  const mixedPokemons = getPokemons().sort(() =&gt; Math.random() - 0.5)\n  getPokemonName(mixedPokemons.splice(0, 4))\n}\n\nconst getPokemonName = ([a, b, c, d] = []) =&gt; {\n  console.log(a, b, c, d)\n}\n\nexport default getPokemonOptions\n</code></pre> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture :pokemonId=\"151\" :showPokemon=\"false\" /&gt;\n\n    &lt;PokemonOptions /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\nimport getPokemonOptions from '@/helpers/getPokemonOptions'\n\nconsole.log(getPokemonOptions())\n\nexport default { components: { PokemonOptions, PokemonPicture } }\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#obtener-nombres-de-los-4-pokemons","title":"Obtener nombres de los 4 pok\u00e9mons","text":"<p>Ya tenemos los id de los 4 pokemons que queremos mostrar, ahora tenemos que llamar a la API y obtener los datos de esos pokemons.</p>"},{"location":"ud8.6-Pokemon-Game/#axios","title":"Axios","text":"<p>Para hacer las peticiones vamos a usar axios, vamos a instalar la librer\u00eda:</p> <pre><code>npm install axios\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#http-request","title":"HTTP request","text":"<p>Nos creamos una nueva carpeta que llamaremos \"api\", y un archivo pokemonAPI.js y en el haremos la configuraci\u00f3n de axios.</p> <p>pokemonAPI.js</p> <pre><code>import axios from 'axios'\n\nconst pokemonAPI = axios.create({\n  baseURL: 'https://pokeapi.co/api/v2/pokemon',\n})\n\nexport default pokemonAPI\n</code></pre> <p>getPokemonOptions.js</p> <pre><code>import pokemonAPI from '../api/pokemonAPI'\n\nconst getPokemons = () =&gt; {\n  const pokemosArr = Array.from(Array(650))\n  return pokemosArr.map((arg, index) =&gt; index + 1)\n}\n\nconst getPokemonOptions = async () =&gt; {\n  const mixedPokemons = getPokemons().sort(() =&gt; Math.random() - 0.5)\n  const pokemons = await getPokemonNames(mixedPokemons.splice(0, 4))\n  return pokemons\n}\n\nconst getPokemonNames = async ([a, b, c, d] = []) =&gt; {\n  const promiseArr = [\n    pokemonAPI.get(`/${a}`),\n    pokemonAPI.get(`/${b}`),\n    pokemonAPI.get(`/${c}`),\n    pokemonAPI.get(`/${d}`),\n  ]\n  const [pok1, pok2, pok3, pok4] = await Promise.all(promiseArr)\n  return [\n    { name: pok1.data.name, id: pok1.data.id },\n    { name: pok2.data.name, id: pok2.data.id },\n    { name: pok3.data.name, id: pok3.data.id },\n    { name: pok4.data.name, id: pok4.data.id },\n  ]\n}\n\nexport default getPokemonOptions\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#mostrar-las-opciones-posibles","title":"Mostrar las opciones posibles","text":"<p>Una vez que ya hemos obtenido los datos de los 4 pokemons, vamos a pintar los nombres en las opciones.</p> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture :pokemonId=\"151\" :showPokemon=\"false\" /&gt;\n\n    &lt;PokemonOptions :pokemons=\"pokemonsArr\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\nimport getPokemonOptions from '@/helpers/getPokemonOptions'\n\nexport default {\n  components: { PokemonOptions, PokemonPicture },\n  data() {\n    return {\n      pokemonsArr: [],\n    }\n  },\n  methods: {\n    async mixPokemonArray() {\n      this.pokemonsArr = await getPokemonOptions()\n    },\n  },\n  mounted() {\n    this.mixPokemonArray()\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre> <p>PokemonOptions.vue</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"options-container\"&gt;\n    &lt;ul&gt;\n      &lt;li v-for=\"pokemon in pokemons\" :key=\"pokemon.id\"&gt;{{ pokemon.name }}&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    pokemons: {\n      type: Array,\n      required: true,\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nul {\n  list-style-type: none;\n}\nli {\n  background-color: white;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n  margin-bottom: 10px;\n  width: 250px;\n}\n\nli:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.options-container {\n  display: flex;\n  justify-content: center;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#seleccionar-un-pokemon-aleatoriamente","title":"Seleccionar un pok\u00e9mon aleatoriamente","text":"<p>Ya estamos mostrando los nombres de los pokemons, ahora tenemos que mostrar la imagen de uno de ellos.</p> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1 v-if=\"!pokemon\"&gt;Espere por favor...&lt;/h1&gt;\n  &lt;div v-else=\"pokemon\"&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture :pokemonId=\"pokemon.id\" :showPokemon=\"false\" /&gt;\n\n    &lt;PokemonOptions :pokemons=\"pokemonsArr\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\nimport getPokemonOptions from '@/helpers/getPokemonOptions'\n\nexport default {\n  components: { PokemonOptions, PokemonPicture },\n  data() {\n    return {\n      pokemonsArr: [],\n      pokemon: null,\n    }\n  },\n  methods: {\n    async mixPokemonArray() {\n      this.pokemonsArr = await getPokemonOptions()\n      const rndInt = Math.floor(Math.random() * 4)\n      this.pokemon = this.pokemonsArr[rndInt]\n    },\n  },\n  mounted() {\n    this.mixPokemonArray()\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre> <p>Ahora vamos a hacer que e pokemon se \"descubra\" cuando el usuario haga click en una de las opciones.</p> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1 v-if=\"!pokemon\"&gt;Espere por favor...&lt;/h1&gt;\n  &lt;!-- &lt;div v-if=\"pokemon\"&gt; --&gt;\n  &lt;div v-else=\"pokemon\"&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture :pokemonId=\"pokemon.id\" :showPokemon=\"showPokemon\" /&gt;\n\n    &lt;PokemonOptions :pokemons=\"pokemonsArr\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\nimport getPokemonOptions from '@/helpers/getPokemonOptions'\n\nexport default {\n  components: { PokemonOptions, PokemonPicture },\n  data() {\n    return {\n      pokemonsArr: [],\n      pokemon: null,\n      showPokemon: false,\n    }\n  },\n  methods: {\n    async mixPokemonArray() {\n      this.pokemonsArr = await getPokemonOptions()\n      const rndInt = Math.floor(Math.random() * 4)\n      this.pokemon = this.pokemonsArr[rndInt]\n    },\n  },\n  mounted() {\n    this.mixPokemonArray()\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#emit-emitir-eventos","title":"Emit - Emitir eventos","text":"<p>En este apartado tenemo que hacer que el componente hijo opciones \"emita\" cual es la opci\u00f3n en la que el usuario ha hecho click. Para ello vamos a hacer uso de los custom events de vue.</p> <p>PokemonOptions.vue</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"options-container\"&gt;\n    &lt;ul&gt;\n      &lt;li\n        v-for=\"pokemon in pokemons\"\n        :key=\"pokemon.id\"\n        @click=\"$emit('selection', pokemon.id)\"&gt;\n        {{ pokemon.name }}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    pokemons: {\n      type: Array,\n      required: true,\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nul {\n  list-style-type: none;\n}\nli {\n  background-color: white;\n  border-radius: 5px;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n  margin-bottom: 10px;\n  width: 250px;\n}\n\nli:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.options-container {\n  display: flex;\n  justify-content: center;\n}\n&lt;/style&gt;\n</code></pre> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1 v-if=\"!pokemon\"&gt;Espere por favor...&lt;/h1&gt;\n  &lt;div v-else=\"pokemon\"&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture :pokemonId=\"pokemon.id\" :showPokemon=\"showPokemon\" /&gt;\n\n    &lt;PokemonOptions :pokemons=\"pokemonsArr\" @selection=\"checkAnswer\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\nimport getPokemonOptions from '@/helpers/getPokemonOptions'\n\nexport default {\n  components: { PokemonOptions, PokemonPicture },\n  data() {\n    return {\n      pokemonsArr: [],\n      pokemon: null,\n      showPokemon: false,\n    }\n  },\n  methods: {\n    async mixPokemonArray() {\n      this.pokemonsArr = await getPokemonOptions()\n      const rndInt = Math.floor(Math.random() * 4)\n      this.pokemon = this.pokemonsArr[rndInt]\n    },\n    checkAnswer(selectedId) {\n      console.log(pokemonId)\n      this.showPokemon = true\n    },\n  },\n  mounted() {\n    this.mixPokemonArray()\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#resultado-y-reinicio-de-juego","title":"Resultado y reinicio de juego","text":"<p>Ya estamos finalizando el proyecto, nos faltan los \u00faltimos detalles. Por ejemplo, que muestre un mensaje cuando el usuario acierta o falla.</p> <p>PokemonOptions.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1 v-if=\"!pokemon\"&gt;Espere por favor...&lt;/h1&gt;\n  &lt;div v-else=\"pokemon\"&gt;\n    &lt;h1&gt;\u00bfQuien es este pokemon?&lt;/h1&gt;\n\n    &lt;PokemonPicture :pokemonId=\"pokemon.id\" :showPokemon=\"showPokemon\" /&gt;\n\n    &lt;PokemonOptions :pokemons=\"pokemonsArr\" @selection=\"checkAnswer\" /&gt;\n\n    &lt;template v-if=\"showAnswer\"&gt;\n      &lt;h2 class=\"fade-in\"&gt;{{ message }}&lt;/h2&gt;\n      &lt;button @click=\"newGame\"&gt;Jugar de nuevo&lt;/button&gt;\n    &lt;/template&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PokemonOptions from '../components/PokemonOptions.vue'\nimport PokemonPicture from '../components/PokemonPicture.vue'\nimport getPokemonOptions from '@/helpers/getPokemonOptions'\n\nexport default {\n  components: { PokemonOptions, PokemonPicture },\n  data() {\n    return {\n      pokemonsArr: [],\n      pokemon: null,\n      showPokemon: false,\n      showAnswer: false,\n      message: '',\n    }\n  },\n  methods: {\n    async mixPokemonArray() {\n      this.pokemonsArr = await getPokemonOptions()\n      const rndInt = Math.floor(Math.random() * 4)\n      this.pokemon = this.pokemonsArr[rndInt]\n    },\n    checkAnswer(selectedId) {\n      this.showPokemon = true\n      this.showAnswer = true\n\n      if (selectedId === this.pokemon.id) {\n        this.message = `Correcto, ${this.pokemon.name}`\n      } else {\n        this.message = `Ups, era ${this.pokemon.name}`\n      }\n    },\n    newGame() {\n      ;(this.showPokemon = false),\n        (this.showAnswer = false),\n        (this.pokemonsArr = []),\n        this.mixPokemonArray(),\n        (this.pokemon = null)\n    },\n  },\n  mounted() {\n    this.mixPokemonArray()\n  },\n}\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#desplegar-nuestro-juego-en-produccion","title":"Desplegar nuestro juego en producci\u00f3n","text":"<pre><code>npm run build\nnpm run preview\n</code></pre>"},{"location":"ud8.6-Pokemon-Game/#codigo-fuente-de-la-seccion","title":"C\u00f3digo fuente de la secci\u00f3n","text":"<p>En este enlace encontrar\u00e9is el c\u00f3digo fuente de la aplicaci\u00f3n finalizada.</p>"},{"location":"ud8.7-Vue-Router/","title":"Vue Router","text":""},{"location":"ud8.7-Vue-Router/#introduccion-a-la-seccion","title":"Introducci\u00f3n a la secci\u00f3n","text":"<p>En esta secci\u00f3n, vamos a ver como crear aplicaciones de una sola p\u00e1gina (SPA) con el enrutador Vue.</p> <p>Las SPA son aplicaciones o sitios web que interact\u00faan con el usuario reescribiendo din\u00e1micamente la p\u00e1gina actual en lugar de cargar p\u00e1ginas nuevas completas desde el servidor.</p> <p>Vue Router es el enrutador oficial de Vue.js. Se integra con el n\u00facleo de Vue.js para facilitar la creaci\u00f3n de SPA con Vue.js.</p> <p>Los objetivos de la secci\u00f3n son enfocarnos en:</p> <ul> <li>Vue Router</li> <li>Guards</li> <li>Rutas hijas</li> <li>Diferentes dise\u00f1os entre router views</li> <li>Argumentos por URL (Query parameters)</li> <li>Segmentos por URL</li> <li>Lifecycle hooks</li> </ul>"},{"location":"ud8.7-Vue-Router/#inicio-de-proyecto","title":"Inicio de proyecto","text":"<p>Comenzamos un nuevo proyecto Vue utilizando vite.</p> <pre><code>npm init vue@latest\n</code></pre> <pre><code>Vue.js - The Progressive JavaScript Framework\n\n\u2714 Project name: \u2026 VueRouter\n\u2714 Package name: \u2026 VueRouter\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit Testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u203a No\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\nScaffolding project in /xxx/xxx/VueRouter...\n\nDone. Now run:\n\n  cd VueRouter\n  npm install\n  npm run dev\n\n</code></pre> <p>Una vez que tenemos creado el proyecto, eliminamos los elementos que genera por defecto y no vamos a utilizar, componentes, archivos css, etc....</p>"},{"location":"ud8.7-Vue-Router/#creacion-de-paginas-necesarias","title":"Creaci\u00f3n de p\u00e1ginas necesarias","text":"<p>Como ya habamos anteriormente cuando estamos trabajando con un proyecto grande no se recomienda usar la estructura por defecto ya que a medida que el proyecto crece ser\u00e1 mas complejo tener localizados y controlados los diferentes elementos de la aplicaci\u00f3n.</p> <p>En ese caso usaremos una estructura de este tipo:</p> <p> </p> <p>En concreto vamos a comenzar creando la siguiente estructura:</p> <p> </p> <p>Una vez creadas las carpetas, vamos con los componentes:</p> <p>AboutPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;About Page&lt;/h1&gt;\n&lt;/template&gt;\n</code></pre> <p>ListPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;List Page&lt;/h1&gt;\n&lt;/template&gt;\n</code></pre> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;Pokemon Page&lt;/h1&gt;\n&lt;/template&gt;\n</code></pre> <p>Los importamos desde nuestra App.vue:</p> <p>App.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;Vue Router&lt;/div&gt;\n  &lt;AboutPage /&gt;\n  &lt;ListPage /&gt;\n  &lt;PokemonPage /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport AboutPage from './modules/pokemon/pages/AboutPage.vue'\nimport ListPage from './modules/pokemon/pages/ListPage.vue'\nimport PokemonPage from './modules/pokemon/pages/PokemonPage.vue'\n\nexport default { components: { AboutPage, ListPage, PokemonPage } }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nheader {\n  line-height: 1.5;\n}\n\n.logo {\n  display: block;\n  margin: 0 auto 2rem;\n}\n\n@media (min-width: 1024px) {\n  header {\n    display: flex;\n    place-items: center;\n    padding-right: calc(var(--section-gap) / 2);\n  }\n\n  .logo {\n    margin: 0 2rem 0 0;\n  }\n\n  header .wrapper {\n    display: flex;\n    place-items: flex-start;\n    flex-wrap: wrap;\n  }\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#configuracion-manual-del-vue-router","title":"Configuraci\u00f3n manual del Vue Router","text":"<p>Crear una SPA con Vue + Vue Router es bastante f\u00e1cil y natural ya que con Vue.js, ya estamos desarrollando nuestra aplicaci\u00f3n usando componentes. Al agregar Vue Router a la mezcla, solo tenemos que asignar nuestros componentes a las rutas y dejar que Vue Router sepa d\u00f3nde renderizarlos.</p> <p>Instalamos el Vue Router:</p> <pre><code>npm install vue-router@4\n</code></pre> <p>Ahora si nos vamos a la documentaci\u00f3n oficial nos muestra los pasos para usar Vue Router en nuestra aplicaci\u00f3n. Nos indica los siguientes pasos:</p> <p>Paso 1. Definir los componentes Esto ya lo tenemos hecho.</p> <p>Paso 2. Definir las rutas. Para poner la configuraci\u00f3n del router usualmente se usa una carpeta router en la raiz del proyecto, la creamos y dentro de esta un archivo router.js.</p> <p> </p> <p>Y dentro del archivo router.js vamos a configurar las rutas:</p> <pre><code>import AboutPage from '../modules/pokemon/pages/AboutPage.vue'\nimport ListPage from '../modules/pokemon/pages/ListPage.vue'\nimport PokemonPage from '../modules/pokemon/pages/PokemonPage.vue'\n\nconst routes = [\n  { path: '/', component: ListPage },\n  { path: '/about', component: AboutPage },\n  { path: '/id', component: PokemonPage },\n]\n</code></pre> <p>Paso 3. Crear la instancia del enrutador y pasar la opci\u00f3n routes</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nimport AboutPage from '../modules/pokemon/pages/AboutPage.vue'\nimport ListPage from '../modules/pokemon/pages/ListPage.vue'\nimport PokemonPage from '../modules/pokemon/pages/PokemonPage.vue'\n\nconst routes = [\n  { path: '/', component: ListPage },\n  { path: '/about', component: AboutPage },\n  { path: '/id', component: PokemonPage },\n]\n\nconst router = createRouter({\n  routes,\n})\n\nexport default router\n</code></pre> <p>Paso 4. Proporciona la implementaci\u00f3n del historial a utilizar.</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nimport AboutPage from '../modules/pokemon/pages/AboutPage.vue'\nimport ListPage from '../modules/pokemon/pages/ListPage.vue'\nimport PokemonPage from '../modules/pokemon/pages/PokemonPage.vue'\n\nconst routes = [\n  { path: '/', component: ListPage },\n  { path: '/about', component: AboutPage },\n  { path: '/id', component: PokemonPage },\n]\n\nconst router = createRouter({\n  routes,\n})\n\nexport default router\n</code></pre> <p>Paso 5. Crear y montar la instancia ra\u00edz.</p> <p>Vamos a crear y montyar la instancia en el main de nuestra aplicaci\u00f3on.</p> <pre><code>import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router/router'\n\nimport './assets/main.css'\n\ncreateApp(App).use(router).mount('#app')\n</code></pre> <p>Ahora refrescamos la aplicaci\u00f3n y nos fijamos en la url (http://localhost:5173/#/) vemos que est\u00e1 usando una # en la ruta, es por el modo history que hemos definido.</p> <p>Finalmente nos queda decirle a la aplicaci\u00f3n donde tiene que mostrar los componentes de las rutas, para eso tenemos el router-view. Podemos ponerlo en cualquier lugar para adaptarlo a nuestro dise\u00f1o dise\u00f1o.</p> <p>App.vue</p> <pre><code>&lt;template&gt;\n  &lt;router-view /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default { components: {} }\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nheader {\n  line-height: 1.5;\n}\n\n.logo {\n  display: block;\n  margin: 0 auto 2rem;\n}\n\n@media (min-width: 1024px) {\n  header {\n    display: flex;\n    place-items: center;\n    padding-right: calc(var(--section-gap) / 2);\n  }\n\n  .logo {\n    margin: 0 2rem 0 0;\n  }\n\n  header .wrapper {\n    display: flex;\n    place-items: flex-start;\n    flex-wrap: wrap;\n  }\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#error-404-not-found","title":"Error 404 Not Found","text":"<p>Ya estamos mostrando cada una de las p\u00e1ginas, ahora ser\u00eda \u00fatil implementar otra para que cuando la ruta no exista nos muestre informaci\u00f3n del error. Esta p\u00e1gina la vamos a crear dentro de un nuevo m\u00f3dulo, \"shared\", la idea de este m\u00f3dulo es que tenga componentes que van a ser usados por toda la aplicaci\u00f3n.</p> <p>NoPageFound.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;Error 404 Not Found&lt;/h1&gt;\n&lt;/template&gt;\n</code></pre> <p>router.js</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nimport AboutPage from '../modules/pokemon/pages/AboutPage.vue'\nimport ListPage from '../modules/pokemon/pages/ListPage.vue'\nimport PokemonPage from '../modules/pokemon/pages/PokemonPage.vue'\nimport NoPageFound from '../modules/shared/NoPageFound.vue'\n\nconst routes = [\n  { path: '/', component: ListPage },\n  { path: '/about', component: AboutPage },\n  { path: '/id', component: PokemonPage },\n  { path: '/:pathMatch(.*)*', component: NoPageFound },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n})\n\nexport default router\n</code></pre>"},{"location":"ud8.7-Vue-Router/#lazyload-de-paginas","title":"LazyLoad de p\u00e1ginas","text":"<p>Para aligerar la carga de la aplicaci\u00f3n, podemos hacer un lazyload de los componentes. De esta manera al comienzo solo se va cargar el componente o p\u00e1gina principal y el resto de los componentes se cargar\u00e1n bajo demanda .</p> <p>router.js</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    component: () =&gt; import('../modules/pokemon/pages/ListPage.vue'),\n  },\n  {\n    path: '/about',\n    component: () =&gt; import('../modules/pokemon/pages/AboutPage.vue'),\n  },\n  {\n    path: '/id',\n    component: () =&gt; import('../modules/pokemon/pages/PokemonPage.vue'),\n  },\n  {\n    path: '/:pathMatch(.*)*',\n    component: () =&gt; import('../modules/shared/NoPageFound.vue'),\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n})\n\nexport default router\n</code></pre>"},{"location":"ud8.7-Vue-Router/#navegar-entre-paginas-routerlink","title":"Navegar entre p\u00e1ginas - RouterLink","text":"<p>Vamos ahora a implementa una barra de navegaci\u00f3n, como es un componente global en la aplicaci\u00f3n la vamos a crear dentro del directorio shared.</p> <p>Navbar.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;router-link to=\"/\"&gt;Pokemon List&lt;/router-link&gt;\n    &lt;router-link to=\"/id\"&gt;Pokemon por id&lt;/router-link&gt;\n    &lt;router-link to=\"/about\"&gt; About&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\ndiv {\n  padding: 0 30px;\n}\n\ndiv a {\n  font-weight: hold;\n  color: #2c3e50;\n  margin: 0 10px;\n}\n&lt;/style&gt;\n</code></pre> <p>App.vue</p> <pre><code>&lt;template&gt;\n  &lt;Navbar /&gt;\n  &lt;router-view /&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  components: {\n    Navbar: defineAsyncComponent(() =&gt; import('./modules/shared/Navbar.vue')),\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\nheader {\n  line-height: 1.5;\n}\n\n.logo {\n  display: block;\n  margin: 0 auto 2rem;\n}\n\n@media (min-width: 1024px) {\n  header {\n    display: flex;\n    place-items: center;\n    padding-right: calc(var(--section-gap) / 2);\n  }\n\n  .logo {\n    margin: 0 2rem 0 0;\n  }\n\n  header .wrapper {\n    display: flex;\n    place-items: flex-start;\n    flex-wrap: wrap;\n  }\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#routerlink-active","title":"RouterLink Active","text":"<p>Si inspeccionamos el c\u00f3digo del navlink con el inspector de elementos, vemos que Vue le coloca las clases router-link-active y router-link-exact-active al elemento del men\u00fa en el que hemos hecho click. Podemos por tanto aplicar css a ese elemento usando esa clase.</p> <p>Navbar.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;router-link to=\"/\"&gt;Pokemon List&lt;/router-link&gt;\n    &lt;router-link to=\"/id\"&gt;Pokemon por id&lt;/router-link&gt;\n    &lt;router-link to=\"/about\"&gt; About&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\ndiv {\n  padding: 0 30px;\n}\n\ndiv a {\n  font-weight: hold;\n  color: #2c3e50;\n  margin: 0 10px;\n}\n\n.router-link-exact-active {\n  color: red;\n}\n&lt;/style&gt;\n\n</code></pre>"},{"location":"ud8.7-Vue-Router/#lifecycle-hooks-ciclo-de-vida-de-un-componente","title":"Lifecycle Hooks - Ciclo de vida de un componente","text":"<p>Cada instancia de componente de Vue pasa por una serie de pasos de inicializaci\u00f3n cuando se crea; por ejemplo, debe configurar la observaci\u00f3n de datos, compilar la plantilla, montar la instancia en el DOM y actualizar el DOM cuando cambian los datos. En el camino, tambi\u00e9n ejecuta funciones llamadas Lifecycle Hooks o enlaces de ciclo de vida, lo que nos da la oportunidad de imlpementar c\u00f3digo propio c\u00f3digo en cada para que se ejecute en etapas espec\u00edficas.</p>"},{"location":"ud8.7-Vue-Router/#registro-de-ganchos-de-ciclo-de-vida","title":"Registro de ganchos de ciclo de vida","text":"<p>Por ejemplo, el enlace se puede usar para ejecutar c\u00f3digo despu\u00e9s de que el componente haya terminado la representaci\u00f3n inicial y haya creado los nodos DOM:mounted</p> <p>js</p> <pre><code>export default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}\n</code></pre> <p>Tambi\u00e9n hay otros ganchos que se llamar\u00e1n en diferentes etapas del ciclo de vida de la instancia, siendo los m\u00e1s utilizados, mounted, updated, y unmounted</p> <p>Todos los enlaces de ciclo de vida se llaman con su contexto this que apunta a la instancia activa actual que lo invoca.</p>"},{"location":"ud8.7-Vue-Router/#diagrama-de-ciclo-de-vida","title":"Diagrama de ciclo de vida","text":"<p>A continuaci\u00f3n se muestra un diagrama del ciclo de vida de la instancia. No es necesario que comprenda completamente todo lo que sucede en este momento, pero a medida que aprenda y construya m\u00e1s, ser\u00e1 una referencia \u00fatil.</p> <p> </p>"},{"location":"ud8.7-Vue-Router/#disparar-metodos-del-ciclo-de-vida","title":"Disparar m\u00e9todos del ciclo de vida","text":"<p>En la referencia de la API Lifecycle Hooks podemos ver los detalles sobre todos los lifecycle hooks y sus respectivos casos de uso.</p> <p>Vamos a implementar cada uno de los Lifecycle Hooks para probarlos:</p> <p>AboutPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;About Page&lt;/h1&gt;\n  &lt;hr /&gt;\n  &lt;h2&gt;{{ name }}&lt;/h2&gt;\n  &lt;!-- Si comentamos el h2 vemos que no saltan los hooks que est\u00e1n pendientes de --&gt;\n  &lt;!-- los estados; renderTracked | renderTriggered. --&gt;\n  &lt;button @click=\"changeName\"&gt;Change name&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      name: 'IES Rafael Alberti',\n    }\n  },\n  methods: {\n    changeName() {\n      this.name = '2\u00ba DAW'\n      console.log(this.name)\n    },\n  },\n  beforeCreate() {\n    console.log('beforeCreate')\n  },\n  created() {\n    console.log('created')\n  },\n  beforeMount() {\n    console.log('beforeMount')\n  },\n  mounted() {\n    console.log('mounted')\n  },\n  beforeUpdate() {\n    console.log('beforeUpdate')\n  },\n  updated() {\n    console.log('updated')\n  },\n  beforeUnmount() {\n    console.log('beforeUnmount')\n  },\n  unmounted() {\n    console.log('unmounted')\n  },\n  errorCaptured() {\n    console.log('errorCaptured')\n  },\n  renderTracked() {\n    console.log('renderTracked')\n  },\n  renderTriggered() {\n    console.log('renderTriggered')\n  },\n  activated() {\n    console.log('activated')\n  },\n  deactivated() {\n    console.log('deactivated')\n  },\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#en-que-paso-del-ciclo-de-vido-hago-una-llamada-http","title":"\u00bfEn que paso del ciclo de vido hago una llamada HTTP?","text":"<p>Una pregunta que nos hacemos en este punto es, si necesito hacer una llamada HTTP lo antes posible para que el contenido se renderice nada mas cargar la aplicaci\u00f3n, \u00bfdonde la hago?</p> <p>En primer lugar vamos a mencionar donde no podemos hacerlo, y es en beforeCreate, ya que en ese momento el data no se ha creado y una vez que se crea va a sobreescribir todo lo que hay. La petici\u00f3n HTTP idealmente podemos hacerla en created().</p> <p>Veamoslo en un ejemplo:</p> <p>AboutPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;About Page&lt;/h1&gt;\n  &lt;hr /&gt;\n  &lt;h2&gt;{{ name }}&lt;/h2&gt;\n  &lt;!-- Si comentamos el h2 vemos que no saltan los hooks que est\u00e1n pendientes de --&gt;\n  &lt;!-- los estados; renderTracked | renderTriggered. --&gt;\n  &lt;button @click=\"changeName\"&gt;Change name&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      name: 'IES Rafael Alberti',\n    }\n  },\n  methods: {\n    changeName() {\n      this.name = '2\u00ba DAW'\n      console.log(this.name)\n    },\n  },\n  beforeCreate() {\n    console.log('beforeCreate')\n    this.name = 'DWEC'\n    // Este cambio no se va a reflejar en el DOM\n    // En ese momento no existe el data, y al crearse sobrescribe lo que hay.\n  },\n  created() {\n    console.log('created')\n    this.name = 'DWEC'\n    // Este si se va a reflejar en el DOM\n  },\n  beforeMount() {\n    console.log('beforeMount')\n  },\n  mounted() {\n    console.log('mounted')\n  },\n  beforeUpdate() {\n    console.log('beforeUpdate')\n  },\n  updated() {\n    console.log('updated')\n  },\n  beforeUnmount() {\n    console.log('beforeUnmount')\n  },\n  unmounted() {\n    console.log('unmounted')\n  },\n  errorCaptured() {\n    console.log('errorCaptured')\n  },\n  renderTracked() {\n    console.log('renderTracked')\n  },\n  renderTriggered() {\n    console.log('renderTriggered')\n  },\n  activated() {\n    console.log('activated')\n  },\n  deactivated() {\n    console.log('deactivated')\n  },\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#segmentos-del-url-y-queryparameters","title":"Segmentos del URL y QueryParameters","text":"<p>Vamos a trabajar con el componente pokemonPage, este va a recibir por la url un id del pokemon que tiene que mostrar.</p> <p>Si ahora escribimos una url como por ejemplo, http://localhost:5173/#/55, nos devolver\u00e1 un 404 ya que no tenemos ninguna ruta que haga match con ese path. Tenemos que indicarle al router que el id es un argumento.</p> <p>router.js</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    component: () =&gt; import('../modules/pokemon/pages/ListPage.vue'),\n  },\n  {\n    path: '/about',\n    component: () =&gt; import('../modules/pokemon/pages/AboutPage.vue'),\n  },\n  // {\n  //   path: '/id',\n  //   component: () =&gt; import('../modules/pokemon/pages/PokemonPage.vue'),\n  // },\n  {\n    path: '/:id',\n    name: 'pokemonId',\n    component: () =&gt; import('../modules/pokemon/pages/PokemonPage.vue'),\n  },\n  {\n    path: '/:pathMatch(.*)*',\n    component: () =&gt; import('../modules/shared/NoPageFound.vue'),\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes, // short for `routes: routes`\n})\n\nexport default router\n</code></pre> <p>Ahora tenemos que recibir ese id en el componente.</p> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;\n    Pokemon: &lt;span&gt; # {{ id }}&lt;/span&gt;\n  &lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      id: null,\n    }\n  },\n  created() {\n    console.log(this.$route)\n    const { id } = this.$route.params\n    console.log(id)\n    this.id = id\n  },\n}\n&lt;/script&gt;\n</code></pre> <p>No est\u00e1 mal, pero mejor a\u00fan si le podemos especifiar como va a funcionar el componente. Es decir, sabemos que el id es necesario para que el componente funcione, estar\u00eda bien hacer un prop con el y establecer las validaciones, as\u00ed cualquiera que vea el c\u00f3digo sabe que nuestro componente necesita recibir ese id.</p>"},{"location":"ud8.7-Vue-Router/#recibir-props-por-url","title":"Recibir Props por URL","text":"<p>router.js</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    component: () =&gt; import('../modules/pokemon/pages/ListPage.vue'),\n  },\n  {\n    path: '/about',\n    component: () =&gt; import('../modules/pokemon/pages/AboutPage.vue'),\n  },\n  {\n    path: '/:id',\n    name: 'pokemonId',\n    component: () =&gt; import('../modules/pokemon/pages/PokemonPage.vue'),\n    // Definimos un prop, y accedemos a la ruta.\n    props: (route) =&gt; {\n      // console.log(route)\n      // Lo que devolvamos ser\u00e1 o que reciba el componente por props.\n\n      // const { id } = route.params\n      // return {\n      //   id,\n      // }\n      // Con el c\u00f3digo anterior nos da un warning, tenemos que convertirlo en number y validarlo.\n      const id = Number(route.params.id)\n      return isNaN(id) ? { id: 1 } : { id }\n    },\n  },\n  {\n    path: '/:pathMatch(.*)*',\n    component: () =&gt; import('../modules/shared/NoPageFound.vue'),\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n})\n\nexport default router\n</code></pre> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;\n    Pokemon: &lt;span&gt; # {{ id }}&lt;/span&gt;\n  &lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    id: {\n      type: Number,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      // id: null,\n    }\n  },\n  created() {\n    // console.log(this.$attrs)\n  },\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#peticion-http-y-redirecciones","title":"Petici\u00f3n HTTP y redirecciones","text":"<p>Vamos a hacer la llamada Http para traer al pokemon que nos llega como argumento por la url.</p> <p>PokemonPage.vue</p> <pre><code>&lt;template&gt;\n  &lt;h1&gt;\n    Pokemon: &lt;span&gt; # {{ id }}&lt;/span&gt;\n  &lt;/h1&gt;\n\n  &lt;div v-if=\"pokemon\"&gt;\n    &lt;img :src=\"pokemon.sprites.front_default\" alt=\"pokemon.name\" /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    id: {\n      type: Number,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      pokemon: null,\n    }\n  },\n  created() {\n    this.getPokemon()\n  },\n  methods: {\n    async getPokemon() {\n      try {\n        const pokemon = await fetch(\n          `https://pokeapi.co/api/v2/pokemon/${this.id}`\n        ).then((res) =&gt; res.json())\n        console.log(pokemon)\n        this.pokemon = pokemon\n      } catch (error) {\n        // console.log(error)\n        this.$router.push('/')\n      }\n    },\n  },\n  watch: {\n    id() {\n      this.getPokemon()\n    },\n  },\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#redireccion-desde-el-router","title":"Redirecci\u00f3n desde el router","text":"<p>Navbar.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;router-link to=\"/\"&gt;Pokemon List&lt;/router-link&gt;\n    &lt;!-- &lt;router-link to=\"/id\"&gt;Pokemon por id's&lt;/router-link&gt; --&gt;\n    &lt;router-link :to=\"{ name: 'pokemonId', params: { id: 1 } }\"\n      &gt;Pokemon por id's&lt;/router-link\n    &gt;\n    &lt;router-link to=\"/about\"&gt;About&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\ndiv {\n  padding: 0 40px;\n}\n\ndiv a {\n  font-weight: hold;\n  color: #2c3e50;\n  margin: 0 10px;\n}\n\n.router-link-exact-active {\n  color: red;\n}\n&lt;/style&gt;\n</code></pre> <p>router.js</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    component: () =&gt; import('../modules/pokemon/pages/ListPage.vue'),\n  },\n  {\n    path: '/about',\n    component: () =&gt; import('../modules/pokemon/pages/AboutPage.vue'),\n  },\n  {\n    // path: '/:id',\n    path: '/pokemon/:id',\n    name: 'pokemonId',\n    component: () =&gt; import('../modules/pokemon/pages/PokemonPage.vue'),\n    props: (route) =&gt; {\n      const id = Number(route.params.id)\n      return isNaN(id) ? { id: 1 } : { id }\n    },\n  },\n  {\n    path: '/:pathMatch(.*)*',\n    // component: () =&gt; import('../modules/shared/NoPageFound.vue'),\n    redirect: '/',\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n})\n\nexport default router\n</code></pre>"},{"location":"ud8.7-Vue-Router/#routerlink-personalizado","title":"RouterLink Personalizado","text":""},{"location":"ud8.7-Vue-Router/#multiples-router-view-rutas-hijas","title":"Multiples Router-View - Rutas Hijas","text":"<p>Vamos a ver las bases para construir una aplicaci\u00f3n que tenga dise\u00f1os estructurales totalmente diferente en diferentes p\u00e1ginas o componentes. Para ello vamos a crear los layout que no es mas que un simple componente que internamente tiene otro router-view, el router que tenemos en el app.js seguir\u00e1 siendo el router principal.</p> <p>PokemonLayout.vue</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"pokemon-layout\"&gt;\n    &lt;h1&gt;Pokemon Layout&lt;/h1&gt;\n    &lt;router-view /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.pokemon-layout {\n  background-color: deeppink;\n}\n&lt;/style&gt;\n</code></pre> <p>router.js</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    // redirect: '/home',\n    redirect: '/pokemon',\n  },\n  {\n    path: '/pokemon',\n    name: 'pokemon',\n    component: () =&gt; import('../modules/pokemon/layouts/PokemonLayout.vue'),\n    children: [\n      {\n        path: '',\n        name: 'pokemon-home',\n        component: () =&gt; import('../modules/pokemon/pages/ListPage.vue'),\n      },\n      {\n        path: 'about',\n        name: 'pokemon-about',\n        component: () =&gt; import('../modules/pokemon/pages/AboutPage.vue'),\n      },\n      {\n        path: 'pokemon/:id',\n        name: 'pokemon-id',\n        component: () =&gt; import('../modules/pokemon/pages/PokemonPage.vue'),\n        props: (route) =&gt; {\n          const id = Number(route.params.id)\n          return isNaN(id) ? { id: 1 } : { id }\n        },\n      },\n    ],\n  },\n  {\n    path: '/:pathMatch(.*)*',\n    component: () =&gt; import('../modules/shared/NoPageFound.vue'),\n    // redirect: '/',\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n})\n\nexport default router\n\n</code></pre> <p>navbar.js</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- &lt;router-link to=\"/\"&gt;Pokemon List&lt;/router-link&gt; --&gt;\n    &lt;router-link :to=\"{ name: 'pokemon-home' }\"&gt;Pokemon List&lt;/router-link&gt;\n    &lt;router-link :to=\"{ name: 'pokemon-id', params: { id: 1 } }\"\n      &gt;Pokemon por id's&lt;/router-link\n    &gt;\n    &lt;!-- &lt;router-link to=\"/about\"&gt;About&lt;/router-link&gt; --&gt;\n    &lt;router-link :to=\"{ name: 'pokemon-about' }\"&gt;About&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\ndiv {\n  padding: 0 40px;\n}\n\ndiv a {\n  font-weight: hold;\n  color: #2c3e50;\n  margin: 0 10px;\n}\n\n.router-link-exact-active {\n  color: red;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.7-Vue-Router/#segundo-layout","title":"Segundo Layout","text":"<p>Vamnos a inmplementa el segundo m\u00f3dulo, spiderman, que va a tener un layout totalmente diferente. Cremos las carpetas layouts y pages, las p\u00e1ginas del m\u00f3dulo, y el nuevo layout.</p> <p>Characters.vue</p> <pre><code>&lt;template&gt;\n  &lt;h2&gt;Personajes&lt;/h2&gt;\n&lt;/template&gt;\n</code></pre> <p>About.vue</p> <pre><code>&lt;template&gt;\n  &lt;h2&gt;About Spiderman&lt;/h2&gt;\n&lt;/template&gt;\n</code></pre> <p>SpidermanLayout.vue</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"spiderman-layout\"&gt;\n    &lt;h1&gt;Spiderman Layout&lt;/h1&gt;\n    &lt;router-view /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.spiderman-layout {\n  background-color: deepskyblue;\n}\n&lt;/style&gt;\n</code></pre> <p>router.js</p> <pre><code>import { createRouter, createWebHashHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    redirect: '/pokemon',\n  },\n  {\n    path: '/pokemon',\n    name: 'pokemon',\n    component: () =&gt; import('../modules/pokemon/layouts/PokemonLayout.vue'),\n    children: [\n      {\n        path: '',\n        name: 'pokemon-home',\n        component: () =&gt; import('../modules/pokemon/pages/ListPage.vue'),\n      },\n      {\n        path: 'about',\n        name: 'pokemon-about',\n        component: () =&gt; import('../modules/pokemon/pages/AboutPage.vue'),\n      },\n      {\n        path: 'pokemon/:id',\n        name: 'pokemon-id',\n        component: () =&gt; import('../modules/pokemon/pages/PokemonPage.vue'),\n        props: (route) =&gt; {\n          const id = Number(route.params.id)\n          return isNaN(id) ? { id: 1 } : { id }\n        },\n      },\n    ],\n  },\n  // Spiderman Layout\n  {\n    path: '/spiderman',\n    name: 'spiderman',\n    component: () =&gt; import('../modules/spiderman/layouts/SpidermanLayout.vue'),\n    children: [\n      {\n        path: '',\n        name: 'spiderman-home',\n        component: () =&gt; import('../modules/spiderman/pages/Characters.vue'),\n      },\n      {\n        path: 'about',\n        name: 'spiderman-about',\n        component: () =&gt; import('../modules/spiderman/pages/About.vue'),\n      },\n    ],\n  },\n\n  {\n    path: '/:pathMatch(.*)*',\n    component: () =&gt; import('../modules/shared/NoPageFound.vue'),\n  },\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n})\n\nexport default router\n</code></pre>"},{"location":"ud8.7-Vue-Router/#anadimos-los-nuevos-enlaces-al-navbar","title":"A\u00f1adimos los nuevos enlaces al NavBar","text":"<p>Vamos a incorporar a nuestra barra de navegaci\u00f3n los nuevos componentes.</p> <p>Navbar.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;router-link :to=\"{ name: 'pokemon-home' }\"&gt;Pokemon List&lt;/router-link&gt;\n    &lt;router-link :to=\"{ name: 'pokemon-id', params: { id: 1 } }\"\n      &gt;Pokemon por id's&lt;/router-link\n    &gt;\n    &lt;router-link :to=\"{ name: 'pokemon-about' }\"&gt;About&lt;/router-link&gt;\n    &lt;router-link :to=\"{ name: 'spiderman-home' }\"&gt;Characters&lt;/router-link&gt;\n    &lt;router-link :to=\"{ name: 'spiderman-about' }\"&gt;Spiderman About&lt;/router-link&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\ndiv {\n  padding: 0 40px;\n}\n\ndiv a {\n  font-weight: hold;\n  color: #2c3e50;\n  margin: 0 10px;\n}\n\n.router-link-exact-active {\n  color: red;\n}\n&lt;/style&gt;\n\n</code></pre>"},{"location":"ud8.7-Vue-Router/#codigo-fuente-de-la-seccion","title":"C\u00f3digo fuente de la secci\u00f3n","text":"<p>En este enlace encontrar\u00e9is el c\u00f3digo fuente de la aplicaci\u00f3n finalizada.</p>"},{"location":"ud8.8-Vuex/","title":"Vuex","text":"<p>IMPORTANT. Pinia is now the new default</p> <p>La librer\u00eda oficial para la gesti\u00f3n de estado en Vue ha cambiado a Pinia. Pinia tiene casi la misma API exacta o mejorada que Vuex 5, descrita en el RFC de Vuex 5. Podr\u00edas simplemente considerar a Pinia como Vuex 5 con un nombre diferente. Pinia tambi\u00e9n funciona con Vue 2.x.</p> <p>Vuex 3 y 4 seguir\u00e1n siendo mantenidos. Sin embargo, es poco probable que se a\u00f1adan nuevas funcionalidades. Vuex y Pinia pueden ser instalados en el mismo proyecto. Si est\u00e1s migrando una aplicaci\u00f3n existente de Vuex a Pinia, podr\u00eda ser una opci\u00f3n adecuada. Sin embargo, si est\u00e1s planeando comenzar un nuevo proyecto, recomendamos altamente usar Pinia en su lugar.</p>"},{"location":"ud8.8-Vuex/#introduccion-a-la-seccion","title":"Introducci\u00f3n a la secci\u00f3n","text":"<p>Esta secci\u00f3n esta dedicada a tener una introducci\u00f3n a Vuex, como gestor de estado global de nuestra aplicaci\u00f3n.</p> <p>Los objetivos de la secci\u00f3n son enfocarnos en:</p> <ul> <li>\u00bfQu\u00e9 es Vuex?</li> <li>\u00bfQu\u00e9 problema resuelve Vuex?</li> <li>Actions</li> <li>Getters</li> <li>Mutations</li> <li>State</li> <li>M\u00f3dulos</li> <li>Segmentaci\u00f3n</li> <li>Vuex DevTools</li> </ul> <p>Esta secci\u00f3n es muy importante para comprender Vuex, el cual es un gestor de estado muy popular cuando sabemos que las aplicaciones ser\u00e1n de mediana a gran escala.</p>"},{"location":"ud8.8-Vuex/#introduccion-a-vuex","title":"Introducci\u00f3n a Vuex","text":"<p>Vuex sirve como un almac\u00e9n centralizado para todos los componentes de una aplicaci\u00f3n, con reglas que garantizan que el estado solo se puede modificar de una manera predecible.</p> <p>La idea principal es generar un estado global para que todos los componentes puedan acceder a la informaci\u00f3n, as\u00ed tambi\u00e9n podemos tener mutaciones, acciones y getters.</p> <p> </p>"},{"location":"ud8.8-Vuex/#cuando-debo-usarlo","title":"\u00bfCu\u00e1ndo debo usarlo?","text":"<p>Si nuestra aplicaci\u00f3n es simple, lo m\u00e1s probable es que un almacen de estados no aporte una complejidad innecesaria. Un simple patr\u00f3n de tienda puede ser todo lo que necesitas. Pero si construyes una SPA de mediana a gran escala, lo m\u00e1s probable es que nos encontremos con situaciones que te hagan pensar en c\u00f3mo manejar mejor el estado fuera de tus componentes Vue, y Vuex ser\u00e1 el siguiente paso natural.</p> <p>Hay una buena cita de Dan Abramov, el autor de Redux:</p> <p>\"Las librer\u00edas de flujo son como las gafas: sabr\u00e1s cu\u00e1ndo las necesitas\"</p>"},{"location":"ud8.8-Vuex/#inicio-de-proyecto","title":"Inicio de proyecto","text":"<p>Comenzamos un nuevo proyecto Vue utilizando vite.</p> <pre><code>npm init vue@latest\n</code></pre> <pre><code>Vue.js - The Progressive JavaScript Framework\n\n\u2714 Project name: \u2026 Vuex\n\u2714 Package name: \u2026 Vuex\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit Testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u203a No\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\nScaffolding project in /xxx/xxx/Vuex...\n\nDone. Now run:\n\n  cd Vuex\n  npm install\n  npm run dev\n\n</code></pre> <p>Una vez que tenemos creado el proyecto, eliminamos los elementos que genera por defecto y no vamos a utilizar, componentes, archivos css, etc....</p>"},{"location":"ud8.8-Vuex/#instalacion-manual-de-vuex","title":"Instalaci\u00f3n manual de Vuex","text":"<p>En la p\u00e1gina oficial de Vue tenemos las diferentes formas de instalar Vuex en nuestra aplicaci\u00f3n. Nosotros vamos a usar npm:</p> <pre><code>npm install vuex@next --save\n</code></pre>"},{"location":"ud8.8-Vuex/#configuramos-nuestro-primer-store","title":"Configuramos nuestro primer Store","text":"<p>Preparamos la estructura de carpetas y archivos para usar Vuex, para ello creamos una carpeta store y un archivo para almacenar nuestro store.</p> <p> </p> <p>store/index.js</p> <pre><code>import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    count: 1,\n  },\n})\n</code></pre> <p>main.js</p> <pre><code>import { createApp } from 'vue'\nimport App from './App.vue'\nimport store from './store'\n\nimport './assets/main.css'\n\ncreateApp(App).use(store).mount('#app')\n</code></pre>"},{"location":"ud8.8-Vuex/#leer-el-state-reactivo","title":"Leer el state reactivo","text":"<p>Hay ver diferentes formas de leer las propiedades que se encuentran en el state del store, vamos a ver algunas de ellas. Para ver las diferentes formas creamos un componente counter.</p>"},{"location":"ud8.8-Vuex/#direct-access","title":"Direct access","text":"<p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8-Vuex/#propiedad-computada","title":"Propiedad computada","text":"<p>Podemos almacenarlo en una propiedad computada.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;h2&gt;Conmputed property - {{ countComputed }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.count\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8-Vuex/#mapstate","title":"mapState","text":"<p>El helper mapState genera funciones getter computadas.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;h2&gt;mapState - {{ count }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from 'vuex'\nexport default {\n  computed: mapState(['count']),\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre> <p>Conservando las propiedades conmutadas:</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;!-- &lt;h2&gt;Conmputed property - {{ countComputed }}&lt;/h2&gt; --&gt;\n    &lt;h2&gt;mapState - {{ count }} - {{ lastMutation }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from 'vuex'\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.count\n    },\n    // ...mapState(['count']),\n    ...mapState({\n      count: (state) =&gt; state.count,\n      lastMutation: (state) =&gt; state.lastMutation,\n    }),\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre> <p>store/index.js</p> <pre><code>import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    count: 1,\n    lastMutation: 'none',\n  },\n})\n</code></pre>"},{"location":"ud8.8-Vuex/#mutations","title":"Mutations","text":"<p>La \u00fanica forma de cambiar de estado en una store Vuex es a trav\u00e9s de una mutaci\u00f3n.</p> <p>store/index.js</p> <pre><code>import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    count: 1,\n    lastMutation: 'none',\n  },\n  mutations: {\n    increment(state) {\n      state.count++\n      state.lastMutation = 'increment'\n    },\n    // Mutaci\u00f3n recibiendo un argumento\n    incrementBy(state, value) {\n      state.count += value\n      state.lastMutation = 'incrementBy'\n    },\n  },\n})\n\n</code></pre> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;!-- &lt;h2&gt;Conmputed property - {{ countComputed }}&lt;/h2&gt; --&gt;\n    &lt;h2&gt;mapState - {{ count }} - {{ lastMutation }}&lt;/h2&gt;\n    &lt;hr /&gt;\n    &lt;button @click=\"increment\"&gt;+1&lt;/button&gt;\n    &lt;button @click=\"incrementBy\"&gt;+5&lt;/button&gt;\n    &lt;button&gt;Random&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from 'vuex'\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.count\n    },\n    // ...mapState(['count']),\n    ...mapState({\n      count: (state) =&gt; state.count,\n      lastMutation: (state) =&gt; state.lastMutation,\n    }),\n  },\n  // Metodos\n  methods: {\n    increment() {\n      this.$store.commit('increment')\n    },\n    incrementBy() {\n      this.$store.commit('incrementBy', 5)\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre> <p>Nota. Las mutations NO pueden ser as\u00edncronas.</p>"},{"location":"ud8.8-Vuex/#actions","title":"Actions","text":"<p>Las acciones son similares a las mutaciones, las diferencias son que:</p> <ul> <li>En lugar de mutar el estado, las acciones cometen mutaciones.</li> <li>Las acciones pueden contener ser asincronas.</li> </ul> <p>Es habitual dispararlas para comprobar algo en el back y cuando recibimos la respuesta disparamos el commit de la mutaci\u00f3n.</p> <p>Para probar las actions nos vamos a crear un helper que nos devuelva un n\u00famero aleatorio, usaremos una promesa para hacerlo as\u00edncrono.</p> <p>getRandomInt.js</p> <pre><code>const getRandomInt = () =&gt; {\n  return new Promise((resolve) =&gt; {\n    const rndInt = Math.floor(Math.random() * 20 + 1)\n    setTimeout(() =&gt; {\n      resolve(rndInt)\n    }, 1000)\n  })\n}\n\nexport default getRandomInt\n</code></pre> <p>store/index.js</p> <pre><code>import { createStore } from 'vuex'\nimport getRandomInt from '../helpers/getRandomInt'\n\nexport default createStore({\n  state: {\n    count: 1,\n    lastMutation: 'none',\n  },\n\n  // **** Mutations ****\n  mutations: {\n    increment(state) {\n      state.count++\n      state.lastMutation = 'increment'\n    },\n    incrementBy(state, value) {\n      state.count += value\n      state.lastMutation = 'incrementBy ' + value\n    },\n  },\n\n  // **** Aactions ****\n  actions: {\n    async incrementRandomInt(context) {\n      const randomInt = await getRandomInt()\n\n      context.commit('incrementBy', randomInt)\n    },\n  },\n})\n</code></pre> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;!-- &lt;h2&gt;Conmputed property - {{ countComputed }}&lt;/h2&gt; --&gt;\n    &lt;h2&gt;mapState - {{ count }} - {{ lastMutation }}&lt;/h2&gt;\n    &lt;hr /&gt;\n    &lt;button @click=\"increment\"&gt;+1&lt;/button&gt;\n    &lt;button @click=\"incrementBy\"&gt;+5&lt;/button&gt;\n    &lt;button @click=\"incrementRandomInt\"&gt;Random&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from 'vuex'\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.count\n    },\n    // ...mapState(['count']),\n    ...mapState({\n      count: (state) =&gt; state.count,\n      lastMutation: (state) =&gt; state.lastMutation,\n    }),\n  },\n  // Metodos\n  methods: {\n    increment() {\n      this.$store.commit('increment')\n    },\n    incrementBy() {\n      this.$store.commit('incrementBy', 5)\n    },\n    incrementRandomInt() {\n      this.$store.dispatch('incrementRandomInt')\n    },\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8-Vuex/#mapactions","title":"mapActions","text":"<p>Como hemos visto anteriormente, podemos disparar acciones desde los componentes con this.$store.dispatch('xxx'), otra opci\u00f3n ser\u00eda usar el helper mapActions que asigna m\u00e9todos de componentes a llamadas store.dispatch.</p> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;!-- &lt;h2&gt;Conmputed property - {{ countComputed }}&lt;/h2&gt; --&gt;\n    &lt;h2&gt;mapState - {{ count }} - {{ lastMutation }}&lt;/h2&gt;\n    &lt;hr /&gt;\n    &lt;button @click=\"increment\"&gt;+1&lt;/button&gt;\n    &lt;button @click=\"incrementBy\"&gt;+5&lt;/button&gt;\n    &lt;!-- &lt;button @click=\"incrementRandomInt\"&gt;Random&lt;/button&gt; --&gt;\n    &lt;button @click=\"randomInt\"&gt;Random&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState, mapActions } from 'vuex'\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.count\n    },\n    ...mapState({\n      count: (state) =&gt; state.count,\n      lastMutation: (state) =&gt; state.lastMutation,\n    }),\n  },\n\n  //  **** Metodos ****\n  methods: {\n    increment() {\n      this.$store.commit('increment')\n    },\n    incrementBy() {\n      this.$store.commit('incrementBy', 5)\n    },\n    // incrementRandomInt() {\n    //   this.$store.dispatch('incrementRandomInt')\n    // },\n    // ...mapActions(['incrementRandomInt']),\n    ...mapActions({\n      randomInt: 'incrementRandomInt',\n    }),\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8-Vuex/#bloquear-boton-mientras-una-accion-trabaja","title":"Bloquear bot\u00f3n mientras una acci\u00f3n trabaja","text":"<p>Cuando hacemos click en el bot\u00f3n solicitamos un n\u00famero aleatorio, si durante el tiempo que tarda en responder le damos mas veces, se van a encadenar las llamadas. Vamos a deshabilitar el bot\u00f3n hasta que no tengamos respuesta.</p> <p>store/index.js</p> <pre><code>import { createStore } from 'vuex'\nimport getRandomInt from '../helpers/getRandomInt'\n\nexport default createStore({\n  state: {\n    count: 1,\n    lastMutation: 'none',\n    isLoading: false,\n  },\n\n  // **** Mutations ****\n  mutations: {\n    increment(state) {\n      state.count++\n      state.lastMutation = 'increment'\n    },\n    incrementBy(state, value) {\n      state.count += value\n      state.lastMutation = 'incrementBy ' + value\n    },\n    setLoading(state, value) {\n      state.isLoading = value\n      state.lastMutation = 'setLoading ' + value\n    },\n  },\n\n  // **** Actions ****\n  actions: {\n    async incrementRandomInt(context) {\n      context.commit('setLoading', true)\n      const randomInt = await getRandomInt()\n\n      context.commit('incrementBy', randomInt)\n      context.commit('setLoading', false)\n    },\n  },\n})\n</code></pre> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;h2&gt;mapState - {{ count }} - {{ lastMutation }}&lt;/h2&gt;\n    &lt;hr /&gt;\n    &lt;button @click=\"increment\"&gt;+1&lt;/button&gt;\n    &lt;button @click=\"incrementBy\"&gt;+5&lt;/button&gt;\n    &lt;button @click=\"randomInt\" :disabled=\"isLoading\"&gt;Random&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState, mapActions } from 'vuex'\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.count\n    },\n    ...mapState({\n      count: (state) =&gt; state.count,\n      lastMutation: (state) =&gt; state.lastMutation,\n      isLoading: (state) =&gt; state.isLoading,\n    }),\n  },\n\n  //  **** M\u00e9todos ****\n  methods: {\n    increment() {\n      this.$store.commit('increment')\n    },\n    incrementBy() {\n      this.$store.commit('incrementBy', 5)\n    },\n    ...mapActions({\n      randomInt: 'incrementRandomInt',\n    }),\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8-Vuex/#getters","title":"Getters","text":"<p>Los getters podr\u00edamos decir que tienen un comportamiento similar a las propiedades computadas.</p> <p>store/index.js</p> <pre><code>import { createStore } from 'vuex'\nimport getRandomInt from '../helpers/getRandomInt'\n\nexport default createStore({\n  state: {\n    count: 1,\n    lastMutation: 'none',\n    isLoading: false,\n  },\n\n  // **** Mutations ****\n  mutations: {\n    increment(state) {\n      state.count++\n      state.lastMutation = 'increment'\n    },\n    incrementBy(state, value) {\n      state.count += value\n      state.lastMutation = 'incrementBy ' + value\n    },\n    setLoading(state, value) {\n      state.isLoading = value\n      state.lastMutation = 'setLoading ' + value\n    },\n  },\n\n  // **** Actions ****\n  actions: {\n    async incrementRandomInt(context) {\n      this.commit('setLoading', true)\n      const randomInt = await getRandomInt()\n\n      context.commit('incrementBy', randomInt)\n      context.commit('setLoading', false)\n    },\n  },\n\n  //  **** Getters ****\n  getters: {\n    squareCount(state) {\n      return state.count * state.count\n    },\n  },\n})\n</code></pre> <p>Counter.vue</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.count }}&lt;/h2&gt;\n    &lt;h2&gt;mapState - {{ count }} - {{ lastMutation }}&lt;/h2&gt;\n    &lt;hr /&gt;\n    &lt;button @click=\"increment\"&gt;+1&lt;/button&gt;\n    &lt;button @click=\"incrementBy\"&gt;+5&lt;/button&gt;\n    &lt;button @click=\"randomInt\" :disabled=\"isLoading\"&gt;Random&lt;/button&gt;\n\n    &lt;h2&gt;Direct Getter: {{ $store.getters.squareCount }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState, mapActions } from 'vuex'\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.count\n    },\n    ...mapState({\n      count: (state) =&gt; state.count,\n      lastMutation: (state) =&gt; state.lastMutation,\n      isLoading: (state) =&gt; state.isLoading,\n    }),\n  },\n\n  //  **** M\u00e9todos ****\n  methods: {\n    increment() {\n      this.$store.commit('increment')\n    },\n    incrementBy() {\n      this.$store.commit('incrementBy', 5)\n    },\n    ...mapActions({\n      randomInt: 'incrementRandomInt',\n    }),\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8-Vuex/#modules","title":"Modules","text":"<p>Debido al uso de un \u00fanico \u00e1rbol de estados, todos los estados de nuestra aplicaci\u00f3n est\u00e1n contenidos dentro de un gran objeto. Sin embargo, a medida que nuestra aplicaci\u00f3n crezca, el almacen puede volverse un caos.</p> <p>Para solucionar eso, Vuex nos permite dividir nuestro almac\u00e9n en m\u00f3dulos. Cada m\u00f3dulo puede contener su propio estado, mutaciones, acciones, getters, e incluso m\u00f3dulos anidados.</p> <p>Vamos a crear una carpeta nueva para el m\u00f3dulo del store y un archivo index.js en ella.</p> <p> </p> <p>store/index.js</p> <pre><code>import { createStore } from 'vuex'\nimport counterStore from './counter/index,js'\n\nexport default createStore({\n  modules: {\n    counter: counterStore,\n  },\n})\n</code></pre> <p>store/counter/index.js</p> <pre><code>import getRandomInt from '../../helpers/getRandomInt'\n\nconst counterStore = {\n  state: () =&gt; ({\n    count: 1,\n    lastMutation: 'none',\n    isLoading: false,\n  }),\n\n  // **** Mutations ****\n  mutations: {\n    increment(state) {\n      state.count++\n      state.lastMutation = 'increment'\n    },\n    incrementBy(state, value) {\n      state.count += value\n      state.lastMutation = 'incrementBy ' + value\n    },\n    setLoading(state, value) {\n      state.isLoading = value\n      state.lastMutation = 'setLoading ' + value\n    },\n  },\n\n  // **** Actions ****\n  actions: {\n    async incrementRandomInt(context) {\n      this.commit('setLoading', true)\n      const randomInt = await getRandomInt()\n\n      context.commit('incrementBy', randomInt)\n      context.commit('setLoading', false)\n    },\n  },\n\n  //  **** Getters ****\n  getters: {\n    squareCount(state) {\n      return state.count * state.count\n    },\n  },\n}\n\nexport default counterStore\n</code></pre> <p>Vemos que algunas cosa fallan, b\u00e1sicamente todo lo que usa la notaci\u00f3n del tipo direct access, $store.state.count, ya que ahora en nuestro store no tenemos directamente almacenados esos states. Si que funcionan las que tenemos asociadas con los maps.</p>"},{"location":"ud8.8-Vuex/#actions-getters-mutations-state-desde-un-modulo","title":"Actions, Getters, Mutations, State desde un m\u00f3dulo","text":"<p>Si que nos est\u00e1 funcionando el direct getter, $store.getters.squareCount, y esto podr\u00eda generar poblemas, ya que si nos despistamos podr\u00edamos tener dos getters con el mismo nombre en m\u00f3dulos diferentes y provocar un error.</p> <p>Si queremos evitar eso y que nuestros m\u00f3dulos sean m\u00e1s aut\u00f3nomos o reutilizables, podemos marcar nuestros strores como espacios de nombres independientes con la propiedad namespace. Cuando se registra el m\u00f3dulo, todos sus getters, acciones y mutaciones se asignar\u00e1n autom\u00e1ticamente a un espacio de nombres en funci\u00f3n de la ruta en la que se registr\u00f3 el m\u00f3dulo.</p> <p>store/counter/index.js</p> <pre><code>import getRandomInt from '../../helpers/getRandomInt'\n\nconst counterStore = {\n\n  namespaced: true,\n\n  state: () =&gt; ({\n    count: 1,\n    lastMutation: 'none',\n    isLoading: false,\n  }),\n\n  // **** Mutations ****\n  mutations: {\n    increment(state) {\n      state.count++\n      state.lastMutation = 'increment'\n    },\n    incrementBy(state, value) {\n      state.count += value\n      state.lastMutation = 'incrementBy ' + value\n    },\n    setLoading(state, value) {\n      state.isLoading = value\n      state.lastMutation = 'setLoading ' + value\n    },\n  },\n\n  // **** Actions ****\n  actions: {\n    async incrementRandomInt(context) {\n      this.commit('setLoading', true)\n      const randomInt = await getRandomInt()\n\n      context.commit('incrementBy', randomInt)\n      context.commit('setLoading', false)\n    },\n  },\n\n  //  **** Getters ****\n  getters: {\n    squareCount(state) {\n      return state.count * state.count\n    },\n  },\n}\n\nexport default counterStore\n</code></pre> <p>Ahora esto, $store.getters.squareCount, ya no nos funciona, aunque tanbien han dejado de funcionar otras opciones. Tenemos que hacer unos ajustes para adecuar la aplicaci\u00f3n al nuevo espacio de nombres.</p> <p>Counter.js</p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Counter - Vuex&lt;/h1&gt;\n    &lt;h2&gt;Direct Access - {{ $store.state.counter.count }}&lt;/h2&gt;\n    &lt;h2&gt;Computed: {{ countComputed }}&lt;/h2&gt;\n    &lt;h2&gt;mapState - {{ count }} - {{ lastMutation }}&lt;/h2&gt;\n\n    &lt;hr /&gt;\n\n    &lt;button @click=\"increment\"&gt;+1&lt;/button&gt;\n    &lt;button @click=\"incrementBy\"&gt;+5&lt;/button&gt;\n    &lt;!-- &lt;button @click=\"randomInt\" :disabled=\"isLoading\"&gt;Random&lt;/button&gt; --&gt;\n    &lt;button @click=\"incrementRandomInt\" :disabled=\"isLoading\"&gt;Random&lt;/button&gt;\n\n    &lt;h2&gt;Direct getter: {{ $store.getters['counter/squareCount'] }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState, mapActions } from 'vuex'\nexport default {\n  computed: {\n    countComputed() {\n      return this.$store.state.counter.count\n    },\n    ...mapState('counter', ['count', 'lastMutation', 'isLoading']),\n    // ...mapState({\n    //   count: (state) =&gt; state.count,\n    //   lastMutation: (state) =&gt; state.lastMutation,\n    //   isLoading: (state) =&gt; state.isLoading,\n    // }),\n  },\n\n  //  **** M\u00e9todos ****\n  methods: {\n    increment() {\n      this.$store.commit('counter/increment')\n    },\n    incrementBy() {\n      this.$store.commit('counter/incrementBy', 5)\n    },\n    ...mapActions('counter', ['incrementRandomInt']),\n    // ...mapActions('counter', {\n    //   randomInt: 'incrementRandomInt',\n    // }),\n  },\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8-Vuex/#separar-modulo-en-archivos-independientes","title":"Separar m\u00f3dulo en archivos independientes","text":"<p>Lo \u00faltimo que vamos a hacer es refactorizar un poco el c\u00f3digo, dividir cada una de las \"piezas\" del counter store en archivos idependientes.</p> <p>Preparamos la estructura de archivos, vamos a crear un archivo .js por cada uno de los elementos que vamos a separar, actions, getters, mutations, y state.</p> <p> </p> <p>store/counter/state.js</p> <pre><code>export default () =&gt; ({\n  count: 1,\n  lastMutation: 'none',\n  isLoading: false,\n})\n</code></pre> <p>store/counter/mutations.js</p> <pre><code>export const increment = (state) =&gt; {\n  state.count++\n  state.lastMutation = 'increment'\n}\nexport const incrementBy = (state, value) =&gt; {\n  state.count += value\n  state.lastMutation = 'incrementBy ' + value\n}\nexport const setLoading = (state, value) =&gt; {\n  state.isLoading = value\n  state.lastMutation = 'setLoading ' + value\n}\n</code></pre> <p>store/counter/actions.js</p> <pre><code>import getRandomInt from '../../helpers/getRandomInt'\n\nexport const incrementRandomInt = async ({ commit }) =&gt; {\n  commit('setLoading', true)\n  const randomInt = await getRandomInt()\n\n  commit('incrementBy', randomInt)\n  commit('setLoading', false)\n}\n</code></pre> <p>store/counter/getters.js</p> <pre><code>export const squareCount = (state) =&gt; {\n  return state.count * state.count\n}\n</code></pre> <p>store/counter/index.js</p> <pre><code>import state from './state'\nimport * as mutations from './mutations'\nimport * as actions from './actions'\nimport * as getters from './getters'\n\nconst counterStore = {\n  namespaced: true,\n  // state: state,\n  state,\n  mutations,\n  actions,\n  getters,\n}\n\nexport default counterStore\n</code></pre>"},{"location":"ud8.8-Vuex/#codigo-fuente-de-la-seccion","title":"C\u00f3digo fuente de la secci\u00f3n","text":"<p>En este enlace encontrar\u00e9is el c\u00f3digo fuente de la aplicaci\u00f3n finalizada.</p>"},{"location":"ud8.8.1-Pinnia/","title":"Pinia","text":""},{"location":"ud8.8.1-Pinnia/#introduccion-a-la-seccion","title":"Introducci\u00f3n a la secci\u00f3n","text":"<p>Esta secci\u00f3n est\u00e1 dedicada a proporcionar una introducci\u00f3n completa a  Pinia, el almac\u00e9n de estado oficial para aplicaciones Vue.js. Dise\u00f1ado para reemplazar y mejorar sobre Vuex, Pinia ofrece una experiencia m\u00e1s simplificada y potente para el manejo del estado global en aplicaciones Vue, especialmente aquellas que utilizan Vue 3 y la Composition API.</p> <p>Los objetivos de la secci\u00f3n son enfocarnos en:</p> <ul> <li> <p>Comprender qu\u00e9 es Pinia y por qu\u00e9 se ha convertido en el gestor de estado recomendado para Vue 3.</p> </li> <li> <p>Identificar los problemas que resuelve Pinia, especialmente en comparaci\u00f3n con Vuex y c\u00f3mo simplifica la gesti\u00f3n del estado global.</p> </li> <li> <p>Explorar las caracter\u00edsticas principales de Pinia, incluyendo su estructura de almac\u00e9n, la forma de definir estados, acciones, getters y m\u00e1s.</p> </li> <li> <p>Aprender a configurar Pinia en un proyecto Vue y c\u00f3mo integrarlo con Vue 3 y la Composition API.</p> </li> <li> <p>Pr\u00e1cticas recomendadas para organizar y estructurar tus almacenes de Pinia para mantener tu c\u00f3digo limpio y mantenible.</p> </li> <li> <p>Ejemplos pr\u00e1cticos de c\u00f3mo utilizar Pinia para manejar estados complejos y reactividad en aplicaciones Vue de mediana a gran escala.</p> </li> </ul> <p>Esta secci\u00f3n es muy importante para comprender Pinia, el cual es un gestor de estado muy adecuado para aplicaciones de mediana a gran escala.</p>"},{"location":"ud8.8.1-Pinnia/#cuando-debo-usarlo","title":"\u00bfCu\u00e1ndo debo usarlo?","text":"<p>Si nuestra aplicaci\u00f3n es simple, probablemente un almacenamiento de estados no aporte una complejidad innecesaria. Un simple patr\u00f3n reactiva puede ser todo lo que necesitas. Pero si construyes una SPA de mediana a gran escala, es probable que te encuentres con situaciones que te hagan pensar en c\u00f3mo manejar mejor el estado fuera de tus componentes Vue, y Pinia ser\u00e1 el siguiente paso natural.</p>"},{"location":"ud8.8.1-Pinnia/#inicio-de-proyecto","title":"Inicio de proyecto","text":"<p>Comenzamos un nuevo proyecto Vue utilizando Vite.</p> <pre><code>npm init vue@latest\n</code></pre> <pre><code>Vue.js - The Progressive JavaScript Framework\n\n\u2714 Project name: \u2026 Vuex\n\u2714 Package name: \u2026 Vuex\n\u2714 Add TypeScript? \u2026 No / Yes\n\u2714 Add JSX Support? \u2026 No / Yes\n\u2714 Add Vue Router for Single Page Application development? \u2026 No / Yes\n\u2714 Add Pinia for state management? \u2026 No / Yes\n\u2714 Add Vitest for Unit Testing? \u2026 No / Yes\n\u2714 Add an End-to-End Testing Solution? \u203a No\n\u2714 Add ESLint for code quality? \u2026 No / Yes\n\nScaffolding project in /xxx/xxx/Vuex...\n\nDone. Now run:\n\n  cd Vuex\n  npm install\n  npm run dev\n\n</code></pre> <p>Una vez que tenemos creado el proyecto, eliminamos los elementos que genera por defecto y no vamos a utilizar, componentes, archivos css, etc....</p>"},{"location":"ud8.8.1-Pinnia/#instalacion-manual-de-pinia","title":"Instalaci\u00f3n manual de Pinia","text":"<p>En la p\u00e1gina oficial de Vue tenemos las diferentes formas de instalar Pinia en nuestra aplicaci\u00f3n. Nosotros vamos a usar npm:</p> <pre><code>npm install pinia\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#configuramos-nuestro-primer-store","title":"Configuramos nuestro primer Store","text":"<p>Preparamos la estructura de carpetas y archivos para usar Vuex, para ello creamos una carpeta store y un archivo para almacenar nuestro store.</p> <pre><code>src/\n\u2514\u2500\u2500 stores/\n    \u2514\u2500\u2500 counterStore.js\n</code></pre> <p><code>Archivo: src/stores/counterStore.js</code></p> <pre><code>import { defineStore } from 'pinia';\n\nexport const useCounterStore = defineStore('counterStore', {\n  // Estado inicial del almac\u00e9n\n  state: () =&gt; ({\n    counter: 0, // Inicializamos el contador en 0\n  }),\n});\n</code></pre> <p>main.js</p> <pre><code>import { createApp } from 'vue'\nimport App from './App.vue'\nimport { createPinia } from 'pinia'\n\nimport './assets/main.css'\n\nconst pinia = createPinia()\ncreateApp(App).use(pinia).mount('#app')\n</code></pre> <p>Ya hemos configurado nuestro primer store utilizando Pinia, lo cual nos permitir\u00e1 manejar el estado global de nuestra aplicaci\u00f3n de manera m\u00e1s eficiente y con una sintaxis m\u00e1s sencilla</p>"},{"location":"ud8.8.1-Pinnia/#leer-el-state-reactivo","title":"Leer el state reactivo","text":"<p>Una vez que tienes tu store definido en Pinia, el siguiente paso es leer el estado de este store en un componente Vue. Aqu\u00ed est\u00e1 c\u00f3mo hacerlo de manera simple y directa.</p> <p><code>Archivo: src/components/CounterComponent.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;Contador: {{ counter }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { useCounterStore } from '../stores/counterStore';\nimport { mapState } from 'pinia';\n\nexport default {\n  name: 'CounterComponent',\n  computed: {\n    // Mapeamos el estado del counterStore a propiedades computadas locales\n    ...mapState(useCounterStore, ['counter']),\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>A\u00f1adimos el componente al App.vue.</p> <p><code>Archivo: src/App.vue</code></p> <pre><code>&lt;script&gt;\nimport CounterComponent from './components/counterComponent.vue';\n\nexport default {\n  components: { CounterComponent },\n}\n\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;CounterComponent /&gt; &lt;!-- A\u00f1ade el componente counterComponent aqu\u00ed --&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\n/* Estilos */\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#getters","title":"Getters","text":"<p>Los getters en Pinia funcionan de manera similar a las propiedades computadas en Vue, permitiendo calcular derivados del estado.</p> <p><code>Archivo: src/stores/counterStore.js</code></p> <pre><code>import { defineStore } from 'pinia';\n\nexport const useCounterStore = defineStore('counterStore', {\n  // Estado inicial del almac\u00e9n\n  state: () =&gt; ({\n    counter: 0, // Inicializamos el contador en 0\n  }),\n  // Getters para el almac\u00e9n\n  getters: {\n    // Definimos el getter squareCount\n    squareCount: (state) =&gt; state.counter * state.counter,\n  },\n});\n</code></pre> <p>Para utilizar este getter en un componente Vue, simplemente accedemos al store de Pinia y luego a los getters definidos en \u00e9l. A continuaci\u00f3n, te muestro c\u00f3mo hacerlo:</p> <p><code>Archivo: src/components/CounterComponent.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Contador: {{ counter }}&lt;/p&gt;\n    &lt;p&gt;Cuadrado del Contador: {{ squareCount }}&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { useCounterStore } from '../stores/counterStore';\nimport { mapState } from 'pinia';\n\nexport default {/*  */\n  name: 'CounterComponent',\n  computed: {\n    // Utilizamos mapState para mapear tanto el estado como los getters del counterStore\n    // ...mapState(useCounterStore, ['counter', 'squareCount']),\n    ...mapState(useCounterStore, {\n      counter: (state) =&gt; state.counter,\n      squareCount: (state) =&gt; state.squareCount,\n    }),\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#actions","title":"Actions","text":"<p>Las acciones en Pinia son m\u00e9todos que puedes definir dentro de tu store que, a diferencia de las mutaciones en Vuex, pueden ser as\u00edncronas. Esto las hace ideales para operaciones que necesitan esperar a que algo suceda (como la recuperaci\u00f3n de datos de una API) antes de modificar el estado.</p>"},{"location":"ud8.8.1-Pinnia/#action-sincrona","title":"Action s\u00edncrona","text":"<p>Vamos a empezar definiendo un store de Pinia que incluye una acci\u00f3n simple para incrementar el contador de manera s\u00edncrona.</p> <p><code>Archivo: src/stores/counterStore.js</code></p> <pre><code>import { defineStore } from 'pinia';\n\nexport const useCounterStore = defineStore('counterStore', {\n  // Estado inicial del almac\u00e9n\n  state: () =&gt; ({\n    counter: 0, // Inicializamos el contador en 0\n  }),\n  // Getters para el almac\u00e9n\n  getters: {\n    squareCount: (state) =&gt; state.counter * state.counter,\n  },\n  // Acciones para mutar el estado\n  actions: {\n    increment() {\n      this.counter++;\n    }\n  },\n});\n</code></pre> <p>Ahora, mostraremos c\u00f3mo utilizar esta acci\u00f3n s\u00edncrona increment desde un componente Vue que utiliza el Options API.</p> <p><code>Archivo: src/components/CounterComponent.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Contador: {{ counter }}&lt;/p&gt;\n    &lt;p&gt;Cuadrado del Contador: {{ squareCount }}&lt;/p&gt;\n    &lt;button @click=\"increment\"&gt;Incrementar&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { useCounterStore } from '../stores/counterStore';\nimport { mapState } from 'pinia';\n\nexport default {\n  name: 'CounterComponent',\n  computed: {\n    // ...mapState(useCounterStore, ['counter', 'squareCount']),\n    ...mapState(useCounterStore, {\n      counter: (state) =&gt; state.counter,\n      squareCount: (state) =&gt; state.squareCount,\n    }),\n  },\n  methods: {\n    increment() {\n      const store = useCounterStore();\n      store.increment();\n    }\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#accion-asincrona","title":"Acci\u00f3n as\u00edncrona","text":"<p>Ahora, vamos a expandir nuestro store de Pinia para incluir una acci\u00f3n as\u00edncrona que simula la obtenci\u00f3n de un n\u00famero aleatorio de manera as\u00edncrona y lo suma al contador.</p> <p>Primero, necesitaremos un helper para generar un n\u00famero entero aleatori.</p> <p><code>Archivo: src/helpers/getRandomInt.js</code></p> <pre><code>export const getRandomInt = () =&gt; {\n  return new Promise((resolve) =&gt; {\n    const rndInt = Math.floor(Math.random() * 20 + 1)\n    setTimeout(() =&gt; {\n      resolve(rndInt)\n    }, 1000) // Simula una operaci\u00f3n as\u00edncrona, como una petici\u00f3n a una API\n  })\n}\n</code></pre> <p>Expandimos nuestro store para incluir la nueva acci\u00f3n:</p> <p><code>Archivo: src/stores/counterStore.js</code></p> <pre><code>import { defineStore } from 'pinia';\nimport { getRandomInt } from '../helpers/getRandomInt';\n\nexport const useCounterStore = defineStore('counterStore', {\n  // Estado inicial del almac\u00e9n\n  state: () =&gt; ({\n    counter: 0, // Inicializamos el contador en 0\n  }),\n  // Getters para el almac\u00e9n\n  getters: {\n    squareCount: (state) =&gt; state.counter * state.counter,\n  },\n  // Acciones para mutar el estado\n  actions: {\n    increment() {\n      this.counter++;\n    },\n    async incrementRandom() {\n      const randomInt = await getRandomInt();\n      this.counter += randomInt; // Aseg\u00farate tambi\u00e9n de que est\u00e1s modificando `counter`, no `count`\n    },\n  },\n});\n</code></pre> <p>Finalmente, actualizamos nuestro componente para incluir un bot\u00f3n que al hacer clic invoque la nueva acci\u00f3n as\u00edncrona:</p> <p><code>Archivo: src/components/CounterComponent.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Contador: {{ counter }}&lt;/p&gt;\n    &lt;p&gt;Cuadrado del Contador: {{ squareCount }}&lt;/p&gt;\n    &lt;button @click=\"increment\"&gt;Incrementar&lt;/button&gt;\n    &lt;button @click=\"incrementRandom\"&gt;Incrementar Aleatoriamente&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { useCounterStore } from '../stores/counterStore';\nimport { mapState, mapActions } from 'pinia';\n\nexport default {\n  name: 'CounterComponent',\n  computed: {\n    // ...mapState(useCounterStore, ['counter', 'squareCount']),\n    ...mapState(useCounterStore, {\n      counter: (state) =&gt; state.counter,\n      squareCount: (state) =&gt; state.squareCount,\n    }),\n  },\n  methods: {\n    // Mapea las acciones\n    ...mapActions(useCounterStore, ['increment', 'incrementRandom']),\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#bloquear-boton-mientras-una-accion-trabaja","title":"Bloquear bot\u00f3n mientras una acci\u00f3n trabaja","text":"<p>Cuando hacemos click en el bot\u00f3n solicitamos un n\u00famero aleatorio, si durante el tiempo que tarda en responder le damos mas veces, se van a encadenar las llamadas. Vamos a deshabilitar el bot\u00f3n hasta que no tengamos respuesta.</p> <p>Vamos a agregar un nuevo estado isLoading a tu almac\u00e9n counterStore, que se utilizar\u00e1 para rastrear si la acci\u00f3n est\u00e1 en progreso o no.</p> <p><code>Archivo: src/stores/counterStore.js</code></p> <pre><code>import { defineStore } from 'pinia';\nimport { getRandomInt } from '../helpers/getRandomInt';\n\nexport const useCounterStore = defineStore('counterStore', {\n  // Estado inicial del almac\u00e9n\n  state: () =&gt; ({\n    counter: 0, // Inicializamos el contador en 0\n    isLoading: false, // Nuevo estado para rastrear si estamos cargando un n\u00famero aleatorio\n  }),\n  // Getters para el almac\u00e9n\n  getters: {\n    squareCount: (state) =&gt; state.counter * state.counter,\n  },\n  // Acciones para mutar el estado\n  actions: {\n    increment() {\n      this.counter++;\n    },\n    async incrementRandom() {\n      this.isLoading = true; // Comenzamos a cargar\n      const randomInt = await getRandomInt();\n      this.counter += randomInt;\n      this.isLoading = false; // Terminamos de cargar\n    },\n  },\n});\n</code></pre> <p>Modificamos el componente para deshabilitar el bot\u00f3n basado en el estado isLoading. Esto se hace utilizando el atributo disabled del bot\u00f3n, que se establece condicionalmente seg\u00fan el valor de isLoading.</p> <p><code>Archivo: src/components/CounterComponent.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;p&gt;Contador: {{ counter }}&lt;/p&gt;\n    &lt;p&gt;Cuadrado del contador: {{ squareCount }}&lt;/p&gt;\n    &lt;button @click=\"increment\" :disabled=\"isLoading\"&gt;Incrementar&lt;/button&gt;\n    &lt;button @click=\"incrementRandom\" :disabled=\"isLoading\"&gt;\n      Incrementar Aleatoriamente\n    &lt;/button&gt;\n    &lt;p v-if=\"isLoading\"&gt;Cargando...&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { useCounterStore } from '../stores/counterStore';\nimport { mapState } from 'pinia';\n\nexport default {\n  name: 'CounterComponent',\n  computed: {\n    ...mapState(useCounterStore, ['counter', 'squareCount', 'isLoading']),\n  },\n  methods: {\n    increment() {\n      const store = useCounterStore();\n      store.increment();\n    },\n    incrementRandom() {\n      const store = useCounterStore();\n      store.incrementRandom();\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#organizacion-modular-en-pinia","title":"Organizaci\u00f3n Modular en Pinia","text":"<p>En lugar de utilizar un \u00fanico store con m\u00faltiples m\u00f3dulos como en Vuex, en Pinia cada store act\u00faa efectivamente como un \"m\u00f3dulo\" individual. Esto facilita la separaci\u00f3n de diferentes partes del estado y la l\u00f3gica de tu aplicaci\u00f3n de manera m\u00e1s intuitiva y mantenible.</p>"},{"location":"ud8.8.1-Pinnia/#ejemplo-creando-stores-separados-en-pinia","title":"Ejemplo: Creando Stores Separados en Pinia","text":"<p>Digamos que, adem\u00e1s de un contador, tienes otra parte de tu aplicaci\u00f3n que maneja la autenticaci\u00f3n del usuario. En lugar de combinar todo en un \u00fanico archivo o utilizar un sistema de m\u00f3dulos como en Vuex, simplemente crear\u00edas dos stores separados en Pinia:</p> <p><code>Archivo: src/stores/authStore.js</code></p> <pre><code>import { defineStore } from 'pinia'\n\nexport const useAuthStore = defineStore('auth', {\n  state: () =&gt; ({\n    user: null,\n  }),\n  actions: {\n    logIn(user) {\n      this.user = user\n    },\n    logOut() {\n      this.user = null\n    }\n  },\n})\n</code></pre> <p>Cada uno de estos archivos define un store separado que maneja su propia parte del estado global de la aplicaci\u00f3n. La l\u00f3gica relacionada est\u00e1 contenida dentro de su respectivo store, haciendo que el c\u00f3digo sea m\u00e1s f\u00e1cil de entender y mantener.</p>"},{"location":"ud8.8.1-Pinnia/#acceso-y-uso-de-multiples-stores-en-componentes","title":"Acceso y Uso de M\u00faltiples Stores en Componentes","text":"<p>En tus componentes Vue, puedes importar y usar estos stores seg\u00fan sea necesario, sin preocuparte por la configuraci\u00f3n de espacios de nombres o la interacci\u00f3n entre m\u00f3dulos:</p> <p><code>Archivo: src/components/AuthComponent.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div v-if=\"user\"&gt;\n      &lt;p&gt;Bienvenido, {{ user.name }}!&lt;/p&gt;\n      &lt;button @click=\"logOut\"&gt;Cerrar Sesi\u00f3n&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div v-else&gt;\n      &lt;p&gt;Por favor, inicie sesi\u00f3n.&lt;/p&gt;\n      &lt;button @click=\"logIn\"&gt;Iniciar Sesi\u00f3n&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { useAuthStore } from '../stores/authStore'; // Aseg\u00farate de que la ruta sea correcta\n\nexport default {\n  name: 'AuthComponent',\n  computed: {\n    user() {\n      return useAuthStore().user;\n    },\n  },\n  methods: {\n    logIn() {\n      // Simula un usuario que inicia sesi\u00f3n\n      const user = { id: '1', name: 'Usuario Ejemplo' };\n      useAuthStore().logIn(user);\n    },\n    logOut() {\n      useAuthStore().logOut();\n    },\n  },\n};\n&lt;/script&gt;\n</code></pre> <p>A\u00f1adimos el componente al App.vue.</p> <p><code>Archivo: src/App.vue</code></p> <pre><code>&lt;script&gt;\nimport UserAuth from './components/UserAuth.vue';\nimport CounterComponent from './components/counterComponent.vue';\n\nexport default {\n  components: { CounterComponent, UserAuth },\n}\n\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;CounterComponent /&gt; &lt;!-- A\u00f1ade el componente counterComponent aqu\u00ed --&gt;\n    &lt;hr /&gt;\n    &lt;UserAuth /&gt; &lt;!-- A\u00f1ade el componente counterComponent aqu\u00ed --&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\n/* Estilos */\n&lt;/style&gt;\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#persistencia-del-estado-con-pinia","title":"Persistencia del Estado con Pinia","text":"<p>La persistencia del estado es importante para para una experiencia de usuario fluida. Con Pinia y pinia-plugin-persist, logramos que el estado de la aplicaci\u00f3n se mantenga entre sesiones con facilidad, mejorando la experiencia del usuario sin complicaciones de configuraci\u00f3n. </p> <p>Vamos a explorar c\u00f3mo utilizar este plugin para asegurar una transici\u00f3n suave de datos a trav\u00e9s de sesiones de navegador.</p>"},{"location":"ud8.8.1-Pinnia/#instalar-pinia-plugin-persist","title":"Instalar pinia-plugin-persist","text":"<pre><code>npm install pinia-plugin-persist\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#configurar-el-plugin-en-pinia","title":"Configurar el Plugin en Pinia","text":"<p>Luego, necesitas configurar Pinia para usar este plugin. Esto se hace t\u00edpicamente en tu archivo principal donde creas la instancia de Pinia y la aplicaci\u00f3n Vue.</p> <p><code>Archivo: src/main.js</code></p> <pre><code>import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport piniaPluginPersist from 'pinia-plugin-persist'\n\nimport App from './App.vue'\n\nconst pinia = createPinia()\npinia.use(piniaPluginPersist)\n\ncreateApp(App).use(pinia).mount('#app')\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#configurar-la-persistencia-en-tu-store","title":"Configurar la Persistencia en tu Store","text":"<p>Por \u00faltimo, configura tu store para que utilice la persistencia a\u00f1adiendo la opci\u00f3n persist a la definici\u00f3n del store.</p> <p><code>Archivo: src/stores/counterStore.js</code></p> <pre><code>import { defineStore } from 'pinia';\nimport { getRandomInt } from '../helpers/getRandomInt';\n\nexport const useCounterStore = defineStore('counterStore', {\n  // Estado inicial del almac\u00e9n\n  state: () =&gt; ({\n    counter: 0, // Inicializamos el contador en 0\n    isLoading: false, // Nuevo estado para rastrear si estamos cargando un n\u00famero aleatorio\n  }),\n  // Getters para el almac\u00e9n\n  getters: {\n    squareCount: (state) =&gt; state.counter * state.counter,\n  },\n  // Acciones para mutar el estado\n  actions: {\n    increment() {\n      this.counter++;\n    },\n    async incrementRandom() {\n      this.isLoading = true; // Comenzamos a cargar\n      const randomInt = await getRandomInt();\n      this.counter += randomInt;\n      this.isLoading = false; // Terminamos de cargar\n    },\n  },\n  persist: {\n    enabled: true, // Habilita la persistencia\n    strategies: [\n      {\n        key: 'my-counter-store',\n        storage: localStorage, // Define el storage a utilizar\n        // storage: sessionStorage, // Usa sessionStorage para la persistencia\n      },\n    ],\n  },\n});\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#persistencia-de-estado-de-autenticacion-en-pinia","title":"Persistencia de Estado de Autenticaci\u00f3n en Pinia","text":"<p>Esta secci\u00f3n se centrar\u00e1 en la gesti\u00f3n del estado de autenticaci\u00f3n de usuarios en aplicaciones Vue utilizando Pinia. Mostraremos c\u00f3mo el plugin pinia-plugin-persist facilita la persistencia de objetos, como el estado del usuario, directamente en sessionStorage o localStorage, sin la necesidad de serializar o deserializar manualmente los datos. </p>"},{"location":"ud8.8.1-Pinnia/#ampliacion-del-authstore-para-incluir-el-objeto-de-usuario","title":"Ampliaci\u00f3n del authStore para Incluir el Objeto de Usuario","text":"<p>Vamos a modificar el authStore para manejar el estado de autenticaci\u00f3n del usuario mediante un objeto que incluya propiedades como id, name, email, y token.</p> <p><code>Archivo: src/stores/authStore.js</code></p> <pre><code>import {defineStore} from \"pinia\"\n\nexport const useAuthStore = defineStore(\"authStore\", {\nstate: () =&gt; ({\n  user:{\n    id:\"\",\n    name:\"\",\n    email:\"\",\n    token:\"\"\n  },\n}),\nactions: {\n  logIn(user) {\n    this.user = user\n  },\n  logOut() {\n    this.user =  {\n      id:\"\",\n      name:\"\",\n      email:\"\",\n      token:\"\"\n    }\n  }\n},\npersist: {\n  enabled:true,\n  strategies: [\n    {\n      key:\"auth\",\n      storage: localStorage,\n      // storage: sessionStorage\n    }\n  ]\n}\n})\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#componente-vue-para-autenticacion","title":"Componente Vue para Autenticaci\u00f3n","text":"<p>Para utilizar el authStore en un componente Vue, crearemos un componente que permita a los usuarios iniciar y cerrar sesi\u00f3n, mostrando la informaci\u00f3n relevante del usuario cuando est\u00e9 autenticado. Este componente interactuar\u00e1 con el authStore para actualizar y reflejar el estado de autenticaci\u00f3n del usuario.</p> <p><code>Archivo: src/components/UserAuth.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;User Authentication&lt;/h2&gt;\n    &lt;!-- Mostrar informaci\u00f3n del usuario si est\u00e1 autenticado --&gt;\n    &lt;div v-if=\"user.id\"&gt;\n      &lt;p&gt;&lt;strong&gt;ID:&lt;/strong&gt; {{ user.id }}&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; {{ user.name }}&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; {{ user.email }}&lt;/p&gt;\n      &lt;button @click=\"logOut\"&gt;Log Out&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;!-- Formulario simplificado de inicio de sesi\u00f3n para el ejemplo --&gt;\n    &lt;div v-else&gt;\n      &lt;button @click=\"logInAsExampleUser\"&gt;Log In as Example User&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { useAuthStore } from '../stores/authStore'\n\nexport default {\n  computed: {\n    // Accede al estado del usuario desde el authStore\n    user() {\n      return useAuthStore().user\n    }\n  },\n  methods: {\n    logInAsExampleUser() {\n      // Datos de ejemplo para el usuario autenticado\n      const exampleUserData = {\n        id: '123',\n        name: 'Jane Doe',\n        email: 'jane.doe@example.com',\n        token: 'exampleToken'\n      }\n      const authStore = useAuthStore()\n      authStore.logIn(exampleUserData)\n    },\n    logOut() {\n      const authStore = useAuthStore()\n      authStore.logOut()\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"ud8.8.1-Pinnia/#codigo-fuente-de-la-seccion","title":"C\u00f3digo fuente de la secci\u00f3n","text":"<p>En este enlace puedes descargarte el c\u00f3digo fuente de la aplicaci\u00f3n finalizada.</p>"},{"location":"ud8.9-Journal_APP/","title":"Journal App","text":""},{"location":"ud8/","title":"UD8 - Vue.js","text":""},{"location":"ud8/#que-es-vue","title":"\u00bfQu\u00e9 es Vue?","text":"<p>Vue (pronunciado /vju\u02d0/) es un framework de JavaScript para construir interfaces de usuario. Se basa en HTML, CSS y JavaScript est\u00e1ndar y proporciona un modelo de programaci\u00f3n declarativo y basado en componentes que lo ayuda a desarrollar interfaces de usuario de manera eficiente, ya sean simples o complejas.</p> <p>Ejemplo de un contador:</p> <pre><code>import { createApp } from 'vue'\n\ncreateApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app')\n</code></pre> <pre><code>&lt;div id=\"app\"&gt;\n  &lt;button @click=\"count++\"&gt;\n    Count is: {{ count }}\n  &lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <p>El ejemplo anterior demuestra las dos caracter\u00edsticas principales de Vue:</p> <ul> <li> <p>Representaci\u00f3n declarativa : Vue ampl\u00eda HTML est\u00e1ndar con una sintaxis de plantilla que nos permite describir declarativamente la salida HTML en funci\u00f3n del estado de JavaScript.</p> </li> <li> <p>Reactividad : Vue rastrea autom\u00e1ticamente los cambios de estado de JavaScript y actualiza de manera eficiente el DOM cuando ocurren cambios.</p> </li> </ul>"},{"location":"ud8/#progressive-framework","title":"Progressive Framework","text":"<p>Vue es un marco y un ecosistema que cubre la mayor\u00eda de las caracter\u00edsticas comunes necesarias en el desarrollo frontend. Pero la web es extremadamente diversa: las cosas que construimos en la web pueden variar dr\u00e1sticamente en forma y escala. Con eso en mente, Vue est\u00e1 dise\u00f1ado para ser flexible y adoptarse de forma incremental. Dependiendo de su caso de uso, Vue se puede usar de diferentes maneras:</p> <ul> <li>Mejora de HTML est\u00e1tico sin un paso de compilaci\u00f3n</li> <li>Incrustaci\u00f3n como componentes web en cualquier p\u00e1gina</li> <li>Solicitud de una sola p\u00e1gina (SPA)</li> <li>Fullstack / Representaci\u00f3n del lado del servidor (SSR)</li> <li>Jamstack / Generaci\u00f3n de sitios est\u00e1ticos (SSG)</li> <li>Orientaci\u00f3n a escritorio, m\u00f3vil, WebGL e incluso al terminal</li> </ul> <p>Los t\u00e9rminos anteriores se analizan en detalle en el apartado formas de usar Vue, de la gu\u00eda del framework.</p> <p>Seg\u00fan la documentaci\u00f3n el nombre de \"The Progressive Framework\" se debe a que: \"es un marco que puede crecer contigo y adaptarse a tus necesidades\".</p>"},{"location":"ud8/#single-file-components","title":"Single File Components","text":"<p>En la mayor\u00eda de los proyectos de Vue habilitados para herramientas de compilaci\u00f3n, creamos componentes de Vue utilizando un formato de archivo similar a HTML llamado componente de archivo \u00fanico (tambi\u00e9n conocido como archivos *.vue, abreviado como SFC). Un SFC de Vue, como sugiere el nombre, encapsula la l\u00f3gica del componente (JavaScript), la plantilla (HTML) y los estilos (CSS) en un solo archivo. Aqu\u00ed est\u00e1 el ejemplo anterior, escrito en formato SFC:</p> <pre><code>&lt;script&gt;\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button @click=\"count++\"&gt;Count is: {{ count }}&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\nbutton {\n  font-weight: bold;\n}\n&lt;/style\n</code></pre> <p>SFC es una caracter\u00edstica definitoria de Vue y es la forma recomendada de crear componentes de Vue si su caso de uso justifica una configuraci\u00f3n de compilaci\u00f3n. Puede obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo y por qu\u00e9 de SFC en la documentaci\u00f3n, pero por ahora, solo sepa que Vue se encargar\u00e1 de la configuraci\u00f3n de todas las herramientas de compilaci\u00f3n por usted.</p>"},{"location":"ud8/#estilos-de-api","title":"Estilos de API","text":"<p>Los componentes de Vue se pueden crear en dos estilos de API diferentes: API de opciones y API de composici\u00f3n .</p>"},{"location":"ud8/#options-api","title":"Options API","text":"<p>Con options API, definimos la l\u00f3gica de un componente utilizando un objeto de opciones como data, methods y mounted. Las propiedades definidas por las opciones se exponen en \"this\" dentro de las funciones, que apunta a la instancia del componente:</p> <pre><code>&lt;script&gt;\nexport default {\n  // Properties returned from data() become reactive state\n  // and will be exposed on `this`.\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  // Methods are functions that mutate state and trigger updates.\n  // They can be bound as event listeners in templates.\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  // Lifecycle hooks are called at different stages\n  // of a component's lifecycle.\n  // This function will be called when the component is mounted.\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button @click=\"increment\"&gt;Count is: {{ count }}&lt;/button&gt;\n&lt;/template&gt;\n</code></pre> <p>Probrar el c\u00f3digo del ejemplo</p>"},{"location":"ud8/#composition-api","title":"Composition API","text":"<p>Con la composition API, definimos la l\u00f3gica de un componente utilizando funciones API importadas. En SFC, la API de composici\u00f3n se usa normalmente con \"script setup\". El atributo setup hace que Vue realice transformaciones en tiempo de compilaci\u00f3n que nos permiten usar la API de composici\u00f3n con menos repeticiones. Por ejemplo, las importaciones y las variables/funciones de nivel superior declaradas en \"script setup\" se pueden usar directamente en la plantilla.</p> <p>Veamos el mismo componente, con exactamente la misma plantilla, pero usando la API de composici\u00f3n y \"script setup\" en su lugar:</p> <pre><code>&lt;script setup&gt;\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() =&gt; {\n  console.log(`The initial count is ${count.value}.`)\n})\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;button @click=\"increment\"&gt;Count is: {{ count }}&lt;/button&gt;\n&lt;/template&gt;\n</code></pre> <p>Probrar el c\u00f3digo del ejemplo</p>"},{"location":"ud8/#cual-elegir","title":"\u00bfCu\u00e1l elegir?","text":"<p>Ambos estilos de API son totalmente capaces de cubrir casos de uso comunes. Los conceptos y conocimientos fundamentales sobre Vue se comparten entre los dos estilos, de hecho, la API de opciones se implementa sobre la API de composici\u00f3n.</p> <p>La API de opciones se centra en el concepto de una \"instancia de componente\" ( this como se ve en el ejemplo), que generalmente se alinea mejor con un modelo mental basado en clases para usuarios que provienen de lenguajes de programaci\u00f3n orientados a objetos. Tambi\u00e9n es m\u00e1s amigable para principiantes al abstraer los detalles de reactividad y hacer cumplir la organizaci\u00f3n del c\u00f3digo a trav\u00e9s de grupos de opciones.</p> <p>La API de composici\u00f3n se centra en declarar variables de estado reactivas directamente en el \u00e1mbito de una funci\u00f3n y componer el estado de varias funciones juntas para manejar la complejidad. Tiene una forma m\u00e1s libre y requiere una comprensi\u00f3n de c\u00f3mo funciona la reactividad en Vue para ser utilizado de manera efectiva. A cambio, su flexibilidad permite patrones m\u00e1s poderosos para organizar y reutilizar la l\u00f3gica.</p>"},{"location":"ud8/#recursos","title":"Recursos","text":"<ul> <li>Vue 3 Documentation</li> <li>Ways of Using Vue</li> </ul> <p>Last updated: 22/01/2023</p>"}]}